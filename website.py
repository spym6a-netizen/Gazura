# website.py
import asyncio
import aiohttp
from aiohttp import web
import sqlite3
import json
import secrets
from datetime import datetime, timedelta
import os
import socket
import requests

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
DB_PATH = "data.db"

def get_server_url():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç URL —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP
        external_ip = requests.get('https://api.ipify.org', timeout=5).text
        return f"http://{external_ip}:8080"
    except:
        try:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP
            hostname = socket.gethostname()
            local_ip = socket.gethostbyname(hostname)
            return f"http://{local_ip}:8080"
        except:
            return "http://localhost:8080"

class WebsiteServer:
    def __init__(self):
        self.app = web.Application()
        self.setup_routes()
        self.auth_tokens = {}  # token -> user_id
        self.setup_database()

    def setup_database(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤–µ–±-—Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS web_sessions (
                token TEXT PRIMARY KEY,
                user_id INTEGER NOT NULL,
                created_date TEXT NOT NULL,
                last_active TEXT NOT NULL,
                FOREIGN KEY (user_id) REFERENCES players (user_id)
            )
        """)
        conn.commit()
        conn.close()

    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã"""
        self.app.router.add_get('/', self.handle_index)
        self.app.router.add_get('/api/auth', self.handle_auth)
        self.app.router.add_get('/api/user_data', self.handle_user_data)
        self.app.router.add_post('/api/tap', self.handle_tap)
        self.app.router.add_post('/api/sync', self.handle_sync)
        # –£–±—Ä–∞–ª —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø–∞–ø–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞ —Å–µ–π—á–∞—Å

    async def handle_index(self, request):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        # –ß–∏—Ç–∞–µ–º index.html –∏ –æ—Ç–¥–∞–µ–º –µ–≥–æ
        try:
            with open('index.html', 'r', encoding='utf-8') as f:
                content = f.read()
            return web.Response(text=content, content_type='text/html')
        except FileNotFoundError:
            return web.Response(text='–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω', status=404)

    async def handle_auth(self, request):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        user_id = request.query.get('user_id')
        if not user_id:
            return web.json_response({'error': 'No user_id'}, status=400)
        
        try:
            user_id = int(user_id)
        except ValueError:
            return web.json_response({'error': 'Invalid user_id'}, status=400)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        token = secrets.token_hex(16)
        self.auth_tokens[token] = user_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT OR REPLACE INTO web_sessions 
            (token, user_id, created_date, last_active) 
            VALUES (?, ?, ?, ?)
        """, (token, user_id, datetime.now().isoformat(), datetime.now().isoformat()))
        conn.commit()
        conn.close()
        
        return web.json_response({'token': token})

    def get_user_data(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT username, level, coins, role, total_taps, has_passport 
            FROM players WHERE user_id = ?
        """, (user_id,))
        result = cursor.fetchone()
        
        if not result:
            return None
            
        username, level, coins, role, total_taps, has_passport = result
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã
        farm_income = self.get_farm_income(user_id)
        estate_income = self.get_real_estate_income(user_id)
        business_income = self.get_business_income(user_id)
        total_income = farm_income + estate_income + business_income
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∏–∑–Ω–µ—Å—ã
        businesses = self.get_user_businesses(user_id)
        
        conn.close()
        
        return {
            'user_id': user_id,
            'username': username,
            'level': level,
            'coins': coins,
            'role': role,
            'total_taps': total_taps,
            'has_passport': bool(has_passport),
            'incomes': {
                'farm': farm_income,
                'estate': estate_income,
                'business': business_income,
                'total': total_income
            },
            'businesses': businesses
        }

    def get_farm_income(self, user_id):
        """–î–æ—Ö–æ–¥ —Å —Ñ–µ—Ä–º—ã"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT SUM(income * count) FROM farm_animals WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        income = result[0] if result and result[0] else 0
        conn.close()
        return income

    def get_real_estate_income(self, user_id):
        """–î–æ—Ö–æ–¥ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT SUM(income) FROM user_real_estate WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        income = result[0] if result and result[0] else 0
        conn.close()
        return income

    def get_business_income(self, user_id):
        """–î–æ—Ö–æ–¥ —Å –±–∏–∑–Ω–µ—Å–æ–≤"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT SUM(income) FROM user_businesses WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        income = result[0] if result and result[0] else 0
        conn.close()
        return income

    def get_user_businesses(self, user_id):
        """–°–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT ub.business_name, ub.level, ub.income, bt.name 
            FROM user_businesses ub 
            JOIN business_types bt ON ub.business_type = bt.id 
            WHERE ub.user_id = ?
        """, (user_id,))
        businesses = []
        for name, level, income, type_name in cursor.fetchall():
            businesses.append({
                'name': name,
                'level': level,
                'income': income,
                'type': type_name
            })
        conn.close()
        return businesses

    async def handle_user_data(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        token = request.query.get('token')
        if not token or token not in self.auth_tokens:
            return web.json_response({'error': 'Invalid token'}, status=401)
        
        user_id = self.auth_tokens[token]
        user_data = self.get_user_data(user_id)
        
        if not user_data:
            return web.json_response({'error': 'User not found'}, status=404)
            
        return web.json_response(user_data)

    async def handle_tap(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–ø–æ–≤ —Å —Å–∞–π—Ç–∞"""
        try:
            data = await request.json()
        except:
            return web.json_response({'error': 'Invalid JSON'}, status=400)
            
        token = data.get('token')
        
        if not token or token not in self.auth_tokens:
            return web.json_response({'error': 'Invalid token'}, status=401)
        
        user_id = self.auth_tokens[token]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ç–∞–ø—ã –≤ –±–∞–∑–µ
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–∞–ø-–±—É—Å—Ç–∞
        cursor.execute("SELECT tap_boost_level FROM players WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        tap_income = 1
        if result and result[0]:
            tap_income = result[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ç–∞–ø—ã
        cursor.execute("""
            UPDATE players 
            SET coins = coins + ?, total_taps = total_taps + 1, daily_taps = daily_taps + 1 
            WHERE user_id = ?
        """, (tap_income, user_id))
        
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        cursor.execute("SELECT coins FROM players WHERE user_id = ?", (user_id,))
        new_coins = cursor.fetchone()[0]
        
        conn.close()
        
        return web.json_response({
            'success': True, 
            'coins_earned': tap_income,
            'new_balance': new_coins
        })

    async def handle_sync(self, request):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (polling)"""
        token = request.query.get('token')
        if not token or token not in self.auth_tokens:
            return web.json_response({'error': 'Invalid token'}, status=401)
        
        user_id = self.auth_tokens[token]
        user_data = self.get_user_data(user_id)
        
        return web.json_response(user_data)

async def start(self):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    runner = web.AppRunner(self.app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    
    server_url = get_server_url()
    print("üåê Website server started!")
    print(f"üì± –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: {server_url}")
    print("üîë –ü–æ–ª—É—á–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –≤ –±–æ—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /website")

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º
def setup_website_in_bot(dp):
    """–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∞–π—Ç–æ–º"""
    from aiogram import types
    
    @dp.message_handler(commands=['website', 'site'])
    async def cmd_website(message: types.Message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É"""
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        from website import website_server
        token = secrets.token_hex(16)
        website_server.auth_tokens[token] = user_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT OR REPLACE INTO web_sessions 
            (token, user_id, created_date, last_active) 
            VALUES (?, ?, ?, ?)
        """, (token, user_id, datetime.now().isoformat(), datetime.now().isoformat()))
        conn.commit()
        conn.close()
        
        server_url = get_server_url()
        
        await message.answer(
            f"üåê <b>–î–æ—Å—Ç—É–ø –∫ –≤–µ–±-—Å–∞–π—Ç—É</b>\n\n"
            f"üîë <b>–í–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:</b> <code>{token}</code>\n\n"
            f"üì± <b>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:</b>\n"
            f"{site_url}\n\n"
            f"üí° <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
            f"1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"
            f"2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞\n"
            f"3. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π!\n\n"
            f"‚ö° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
            f"‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n"
            f"‚Ä¢ –ò–≥—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –±–æ—Ç–µ\n"
            f"‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n"
            f"‚Ä¢ –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏",
            parse_mode='HTML'
        )

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
website_server = None

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async def start_website_server():
    global website_server
    website_server = WebsiteServer()
    await website_server.start()
    return website_server

if __name__ == "__main__":
    asyncio.run(start_website_server())
