# –î–æ–¥–∞–π —Ü—ñ —ñ–º–ø–æ—Ä—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ–∞–π–ª—É
import asyncio
import json
import random
import sqlite3
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional, List, Dict
from math import ceil

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

# ========== –ö–û–ù–§–ò–ì ==========
BOT_TOKEN = "8160983444:AAF-qKOw_MtVhFPtnejy3UcbPT59riKrsd8"
XP_PER_LEVEL = 100
INACTIVE_DAYS = 7
DB_PATH = "data.db"
QUESTIONS_PATH = "questions.json"
DAILY_QUESTION_LIMIT = 10

# –¢–í–Ü–ô ID (–¥—ñ–∑–Ω–∞–π—Å—è —á–µ—Ä–µ–∑ @userinfobot –≤ Telegram)
ADMIN_ID = 5672490558  # ‚Üê –ó–ê–ú–Ü–ù–ò –ù–ê –°–í–Ü–ô –†–ï–ê–õ–¨–ù–ò–ô ID
# ============================

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ========== –ë–ê–ó–ê –î–ê–ù–ù–ò–• ==========
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# –û–°–ù–û–í–ù–ê –¢–ê–ë–õ–ò–¶–Ø –ì–†–ê–í–¶–Ü–í
cursor.execute("""
CREATE TABLE IF NOT EXISTS players (
    user_id INTEGER PRIMARY KEY,
    username TEXT NOT NULL,
    level INTEGER DEFAULT 1,
    xp INTEGER DEFAULT 0,
    coins INTEGER DEFAULT 0,
    role TEXT DEFAULT '–ù–æ–≤–∞—á–æ–∫',
    last_active TEXT,
    animals INTEGER DEFAULT 0,
    tap_boost_level INTEGER DEFAULT 1,
    farm_income INTEGER DEFAULT 0,
    total_taps INTEGER DEFAULT 0
)
""")

# –¢–í–ê–†–ò–ù–ò –§–ï–†–ú–ò
cursor.execute("""
CREATE TABLE IF NOT EXISTS farm_animals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    animal_type TEXT NOT NULL,
    income INTEGER NOT NULL,
    count INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

# –ù–ï–†–£–•–û–ú–Ü–°–¢–¨
cursor.execute("""
CREATE TABLE IF NOT EXISTS user_real_estate (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    type TEXT NOT NULL,
    income INTEGER NOT NULL,
    price INTEGER NOT NULL,
    last_collect_time TEXT,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

# –î–†–£–ó–Ü
cursor.execute("""
CREATE TABLE IF NOT EXISTS friends (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    friend_username TEXT NOT NULL,
    added_date TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES players (user_id),
    UNIQUE(user_id, friend_id)
)
""")

# –ü–ï–†–ï–ö–ê–ó–ò
cursor.execute("""
CREATE TABLE IF NOT EXISTS money_transfers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    from_user_id INTEGER NOT NULL,
    to_user_id INTEGER NOT NULL,
    amount INTEGER NOT NULL,
    transfer_date TEXT NOT NULL,
    FOREIGN KEY (from_user_id) REFERENCES players (user_id),
    FOREIGN KEY (to_user_id) REFERENCES players (user_id)
)
""")

# –Ü–ù–®–Ü –¢–ê–ë–õ–ò–¶–Ü
cursor.execute("""
CREATE TABLE IF NOT EXISTS item_roulette_prizes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    price INTEGER NOT NULL,
    probability REAL NOT NULL,
    item_type TEXT NOT NULL
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_inventory (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    item_name TEXT NOT NULL,
    item_price INTEGER NOT NULL,
    obtained_date TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS daily_tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    task_date TEXT NOT NULL,
    tasks_completed INTEGER DEFAULT 0,
    spin_roulette_count INTEGER DEFAULT 0,
    tap_count INTEGER DEFAULT 0,
    play_minigames_count INTEGER DEFAULT 0,
    correct_answers_count INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS bank_income (
    user_id INTEGER PRIMARY KEY,
    total_commission INTEGER DEFAULT 0,
    last_collect_date TEXT,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS quiz_answers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    date TEXT NOT NULL,
    correct INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

conn.commit()

# ========== –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–†–£–ö–¢–£–†–ò –¢–ê–ë–õ–ò–¶–¨ ==========
try:
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ–ª–æ–Ω–∫–∞ income –≤ user_real_estate
    cursor.execute("PRAGMA table_info(user_real_estate)")
    columns = [column[1] for column in cursor.fetchall()]
    
    if 'income' not in columns:
        print("üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ user_real_estate...")
        cursor.execute("DROP TABLE IF EXISTS user_real_estate")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_real_estate (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            type TEXT NOT NULL,
            income INTEGER NOT NULL,
            price INTEGER NOT NULL,
            last_collect_time TEXT,
            FOREIGN KEY (user_id) REFERENCES players (user_id)
        )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—é user_real_estate –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    
    conn.commit()
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")

# ========== –ö–û–ù–°–¢–ê–ù–¢–ò ==========
class ItemRoulettePrizes:
    PRIZES = [
        {"name": "üíé –ê–ª–º–∞–∑", "price": 500, "probability": 0.01, "type": "mineral"},
        {"name": "ü™® –ö–∞–º—ñ–Ω—å", "price": 7, "probability": 0.15, "type": "mineral"},
        {"name": "‚õèÔ∏è –ó–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞", "price": 45, "probability": 0.12, "type": "mineral"},
        {"name": "ü™ô –ó–æ–ª–æ—Ç–∞ —Ä—É–¥–∞", "price": 120, "probability": 0.08, "type": "mineral"},
        {"name": "üîÆ –ú—ñ—Å—Ç–∏—á–Ω–∏–π –∫—Ä–∏—Å—Ç–∞–ª", "price": 300, "probability": 0.03, "type": "magic"},
        {"name": "üìú –°—Ç–∞—Ä–æ–≤–∏–Ω–Ω–∏–π —Å—É–≤—ñ–π", "price": 80, "probability": 0.10, "type": "magic"},
        {"name": "üß™ –ï–ª—ñ–∫—Å–∏—Ä —Å–∏–ª–∏", "price": 200, "probability": 0.05, "type": "potion"},
        {"name": "üåø –¶—ñ–ª—é—â–∞ —Ç—Ä–∞–≤–∞", "price": 25, "probability": 0.14, "type": "potion"},
        {"name": "‚öîÔ∏è –ú–µ—á –≤–æ—ó–Ω–∞", "price": 350, "probability": 0.02, "type": "weapon"},
        {"name": "üõ°Ô∏è –©–∏—Ç –∑–∞—Ö–∏—Å–Ω–∏–∫–∞", "price": 280, "probability": 0.025, "type": "armor"},
        {"name": "üèπ –õ—É–∫ –º–∏—Å–ª–∏–≤—Ü—è", "price": 180, "probability": 0.04, "type": "weapon"},
        {"name": "üî± –¢—Ä–∏–∑—É–± –ü–æ—Å–µ–π–¥–æ–Ω–∞", "price": 450, "probability": 0.015, "type": "artifact"},
        {"name": "üìø –ê–º—É–ª–µ—Ç —É–¥–∞—á—ñ", "price": 150, "probability": 0.06, "type": "artifact"},
        {"name": "üíç –ö—ñ–ª—å—Ü–µ –º–æ–≥—É—Ç–∏", "price": 220, "probability": 0.035, "type": "artifact"},
        {"name": "üëë –ö–æ—Ä–æ–Ω–∞ –∫–æ—Ä–æ–ª—è", "price": 480, "probability": 0.008, "type": "artifact"},
        {"name": "üßø –ì–ª–∞–∑ –¥—Ä–∞–∫–æ–Ω–∞", "price": 320, "probability": 0.02, "type": "magic"},
        {"name": "üåï –ú—ñ—Å—è—á–Ω–∏–π –∫–∞–º—ñ–Ω—å", "price": 90, "probability": 0.09, "type": "mineral"},
        {"name": "‚òÄÔ∏è –°–æ–Ω—è—á–Ω–∏–π —Å–∞–º–æ—Ü–≤—ñ—Ç", "price": 110, "probability": 0.07, "type": "mineral"},
        {"name": "‚ö° –ë–ª–∏—Å–∫–∞–≤–∫–æ–≤–∞ —Ä—É–¥–∞", "price": 270, "probability": 0.025, "type": "mineral"},
        {"name": "‚ùÑÔ∏è –ö—Ä–∏–∂–∞–Ω–∏–π –∫—Ä–∏—Å—Ç–∞–ª", "price": 130, "probability": 0.055, "type": "mineral"},
        {"name": "üî• –í–æ–≥–Ω—è–Ω–∞ —Ä—É–¥–∞", "price": 160, "probability": 0.045, "type": "mineral"},
        {"name": "üå™Ô∏è –£—Ä–∞–≥–∞–Ω–Ω–∏–π –ø–µ—Ä–ª", "price": 290, "probability": 0.018, "type": "mineral"},
        {"name": "üçØ –ó–æ–ª–æ—Ç–∏–π –º–µ–¥", "price": 65, "probability": 0.11, "type": "potion"},
        {"name": "üßÉ –ï–ª—ñ–∫—Å–∏—Ä –º–æ–ª–æ–¥–æ—Å—Ç—ñ", "price": 400, "probability": 0.012, "type": "potion"},
        {"name": "üå∞ –ú–∞–≥—ñ—á–Ω–∏–π –∂–æ–ª—É–¥—å", "price": 35, "probability": 0.13, "type": "magic"},
        {"name": "üçÄ –ß–æ—Ç–∏—Ä–∏–ª–∏—Å–Ω–∏–∫", "price": 75, "probability": 0.085, "type": "artifact"},
        {"name": "üé≠ –ú–∞—Å–∫–∞ —Ç–∞—î–º–Ω–∏—Ü—ñ", "price": 190, "probability": 0.038, "type": "artifact"},
        {"name": "üìØ –†—ñ–≥ –∑–≤—ñ—Ä–∞", "price": 95, "probability": 0.065, "type": "artifact"},
        {"name": "üêâ –õ—É—Å–∫–∞ –¥—Ä–∞–∫–æ–Ω–∞", "price": 380, "probability": 0.014, "type": "artifact"},
        {"name": "ü¶Ö –ü–µ—Ä–æ —Ñ–µ–Ω—ñ–∫—Å–∞", "price": 420, "probability": 0.009, "type": "artifact"},
        {"name": "üê∫ –ó—É–± –≤–æ–≤–∫—É–ª–∞–∫–∏", "price": 140, "probability": 0.05, "type": "artifact"},
        {"name": "üï∑Ô∏è –ü–∞–≤—É—Ç–∏–Ω–Ω—è –∞—Ä–∞—Ö–Ω—ñ–¥–∞", "price": 55, "probability": 0.095, "type": "magic"},
        {"name": "üçÑ –Ø—Å–∫—Ä–∞–≤–∞ –ø–æ–≥–∞–Ω–∫–∞", "price": 30, "probability": 0.125, "type": "potion"},
        {"name": "üå∫ –ï–∫–∑–æ—Ç–∏—á–Ω–∞ –∫–≤—ñ—Ç–∫–∞", "price": 70, "probability": 0.088, "type": "potion"},
        {"name": "üé™ –¶–∏—Ä–∫–æ–≤–∏–π –∞—Ç—Ä–∏–±—É—Ç", "price": 40, "probability": 0.115, "type": "misc"},
        {"name": "üé≤ –ó–∞—á–∞—Ä–æ–≤–∞–Ω—ñ –∫—ñ—Å—Ç–∫–∏", "price": 85, "probability": 0.072, "type": "misc"},
        {"name": "ü™Ñ –ü–∞–ª–∏—á–∫–∞ —á–∞—Ä–æ–¥—ñ—è", "price": 250, "probability": 0.028, "type": "weapon"},
        {"name": "üìñ –ö–Ω–∏–≥–∞ –∑–∞–∫–ª—è—Ç—å", "price": 170, "probability": 0.042, "type": "magic"},
        {"name": "‚öóÔ∏è –ê–ª—Ö—ñ–º—ñ—á–Ω–∞ –∫–æ–ª–±–∞", "price": 120, "probability": 0.058, "type": "potion"},
        {"name": "üî¨ –ú—ñ–∫—Ä–æ—Å–∫–æ–ø –∞–ª—Ö—ñ–º—ñ–∫–∞", "price": 210, "probability": 0.032, "type": "misc"}
    ]

class PremiumRoulette:
    MULTIPLIERS = [
        {"multiplier": 2, "probability": 0.20, "price": 100},
        {"multiplier": 3, "probability": 0.15, "price": 200},
        {"multiplier": 4, "probability": 0.12, "price": 300},
        {"multiplier": 5, "probability": 0.10, "price": 400},
        {"multiplier": 6, "probability": 0.08, "price": 500},
        {"multiplier": 7, "probability": 0.07, "price": 600},
        {"multiplier": 8, "probability": 0.06, "price": 700},
        {"multiplier": 9, "probability": 0.05, "price": 800},
        {"multiplier": 10, "probability": 0.04, "price": 900},
        {"type": "ticket", "probability": 0.08, "description": "üé´ –ë—ñ–ª–µ—Ç –≤ –∑–≤–∏—á–∞–π–Ω—É —Ä—É–ª–µ—Ç–∫—É"},
        {"type": "nothing", "probability": 0.05, "description": "‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–≥—Ä–∞–Ω–æ"}
    ]

class TapGame:
    BOOST_LEVELS = {
        1: {"income": 1, "price": 0},
        2: {"income": 2, "price": 100},
        3: {"income": 3, "price": 250},
        4: {"income": 4, "price": 500},
        5: {"income": 5, "price": 1000},
        6: {"income": 6, "price": 2000},
        7: {"income": 7, "price": 4000},
        8: {"income": 8, "price": 8000},
        9: {"income": 9, "price": 16000},
        10: {"income": 10, "price": 32000}
    }

class FarmAnimals:
    ANIMALS = [
        {"name": "üêî –ö—É—Ä–∫–∞", "price": 100, "income": 5, "emoji": "üêî"},
        {"name": "üêÑ –ö–æ—Ä–æ–≤–∞", "price": 500, "income": 25, "emoji": "üêÑ"},
        {"name": "üêñ –°–≤–∏–Ω—è", "price": 300, "income": 15, "emoji": "üêñ"},
        {"name": "üêë –í—ñ–≤—Ü—è", "price": 200, "income": 10, "emoji": "üêë"},
        {"name": "üêé –ö—ñ–Ω—å", "price": 1000, "income": 50, "emoji": "üêé"},
        {"name": "üê´ –í–µ—Ä–±–ª—é–¥", "price": 2000, "income": 100, "emoji": "üê´"},
        {"name": "üêò –°–ª–æ–Ω", "price": 5000, "income": 250, "emoji": "üêò"},
        {"name": "ü¶í –ñ–∏—Ä–∞—Ñ–∞", "price": 3000, "income": 150, "emoji": "ü¶í"},
        {"name": "üêÖ –¢–∏–≥—Ä", "price": 8000, "income": 400, "emoji": "üêÖ"},
        {"name": "üêâ –î—Ä–∞–∫–æ–Ω", "price": 15000, "income": 750, "emoji": "üêâ"}
    ]

class RealEstate:
    PROPERTIES = [
        {"name": "üè† –ë—É–¥–∏–Ω–æ–∫", "price": 1000, "income": 50},
        {"name": "üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞", "price": 500, "income": 25},
        {"name": "üè¨ –û—Ñ—ñ—Å", "price": 3000, "income": 150},
        {"name": "üè™ –ú–∞–≥–∞–∑–∏–Ω", "price": 2000, "income": 100},
        {"name": "üè® –ì–æ—Ç–µ–ª—å", "price": 10000, "income": 500},
        {"name": "üè≠ –ó–∞–≤–æ–¥", "price": 25000, "income": 1250},
        {"name": "üèõÔ∏è –ë–∞–Ω–∫", "price": 50000, "income": 2500},
        {"name": "üóº –í–µ–∂–∞", "price": 100000, "income": 5000}
    ]

class DailyTasks:
    TASKS = [
        {"type": "spin_roulette", "target": 2, "reward": 50, "description": "–ü—Ä–æ–∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É 2 —Ä–∞–∑–∏"},
        {"type": "tap_count", "target": 100, "reward": 30, "description": "–ó—Ä–æ–±–∏ 100 —Ç–∞–ø—ñ–≤"},
        {"type": "play_minigames", "target": 3, "reward": 40, "description": "–ó—ñ–≥—Ä–∞–π 3 —Ä–∞–∑–∏ —É –º—ñ–Ω—ñ-—ñ–≥—Ä–∏"},
        {"type": "correct_answers", "target": 5, "reward": 60, "description": "–î–∞–π—Ç–µ 5 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"},
        {"type": "buy_animals", "target": 2, "reward": 80, "description": "–ö—É–ø–∏ 2 —Ç–≤–∞—Ä–∏–Ω–∏"}
    ]

# ========== –ë–ê–ó–û–í–Ü –§–£–ù–ö–¶–Ü–á ==========
def ensure_player(user_id: int, username: str):
    cursor.execute("SELECT user_id FROM players WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO players (user_id, username, last_active) VALUES (?, ?, ?)",
            (user_id, username, datetime.now().isoformat())
        )
        # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤–∏—Ö —Ç–≤–∞—Ä–∏–Ω
        try:
            cursor.execute(
                "INSERT INTO farm_animals (user_id, animal_type, income, count) VALUES (?, ?, ?, ?)",
                (user_id, "üêî –ö—É—Ä–∫–∞", 5, 1)
            )
        except:
            pass
        conn.commit()

def get_user_coins(user_id: int) -> int:
    cursor.execute("SELECT coins FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def get_user_level(user_id: int) -> int:
    cursor.execute("SELECT level FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 1

def add_user_coins(user_id: int, coins: int):
    cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (coins, user_id))
    conn.commit()

def get_user_farm_income(user_id: int) -> int:
    cursor.execute("SELECT SUM(income * count) FROM farm_animals WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result and result[0] else 0

def get_user_real_estate_income(user_id: int) -> int:
    cursor.execute("SELECT SUM(income) FROM user_real_estate WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result and result[0] else 0

def get_user_tap_stats(user_id: int) -> Dict:
    cursor.execute("SELECT tap_boost_level, total_taps FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        level, total_taps = result
        income = TapGame.BOOST_LEVELS.get(level, {"income": 1})["income"]
        return {"level": level, "income": income, "total_taps": total_taps}
    return {"level": 1, "income": 1, "total_taps": 0}

def get_total_passive_income(user_id: int) -> int:
    farm_income = get_user_farm_income(user_id)
    estate_income = get_user_real_estate_income(user_id)
    return farm_income + estate_income

def get_user_friends(user_id: int) -> List[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤"""
    cursor.execute("SELECT friend_id, friend_username, added_date FROM friends WHERE user_id = ? ORDER BY added_date DESC", (user_id,))
    friends = []
    for friend_id, username, added_date in cursor.fetchall():
        friends.append({
            "user_id": friend_id,
            "username": username,
            "added_date": added_date
        })
    return friends

def add_friend(user_id: int, friend_id: int, friend_username: str):
    """–î–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–∞"""
    try:
        cursor.execute(
            "INSERT INTO friends (user_id, friend_id, friend_username, added_date) VALUES (?, ?, ?, ?)",
            (user_id, friend_id, friend_username, datetime.now().isoformat())
        )
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False  # –í–∂–µ —î –≤ –¥—Ä—É–∑—è—Ö

def transfer_money(from_user_id: int, to_user_id: int, amount: int) -> bool:
    """–ü–µ—Ä–µ–∫–∞–∑ –≥—Ä–æ—à–µ–π"""
    if from_user_id == to_user_id:
        return False
    
    from_coins = get_user_coins(from_user_id)
    if from_coins < amount:
        return False
    
    # –ö–æ–º—ñ—Å—ñ—è 5%
    commission = ceil(amount * 0.05)
    final_amount = amount - commission
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–∫–∞–∑
    cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", (amount, from_user_id))
    cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (final_amount, to_user_id))
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –ø–µ—Ä–µ–∫–∞–∑
    cursor.execute(
        "INSERT INTO money_transfers (from_user_id, to_user_id, amount, transfer_date) VALUES (?, ?, ?, ?)",
        (from_user_id, to_user_id, amount, datetime.now().isoformat())
    )
    
    conn.commit()
    return True

# ========== –ú–ï–ù–Æ ==========
def build_main_menu(user_id: int):
    kb = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üéÆ –Ü–≥—Ä–∏", callback_data="menu_games"),
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="menu_profile"),
        InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥–∏", callback_data="menu_income"),
        InlineKeyboardButton("üèÜ –¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤", callback_data="menu_leaderboard"),
        InlineKeyboardButton("üìã –ó–∞–≤–¥–∞–Ω–Ω—è", callback_data="daily_tasks"),
        InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="menu_shop")
    ]
    
    # –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞
    if user_id == ADMIN_ID:
        buttons.append(InlineKeyboardButton("üëë –ê–¥–º—ñ–Ω", callback_data="admin_panel"))
    
    kb.add(*buttons)
    return kb

def build_games_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üéØ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="game_quiz"),
        InlineKeyboardButton("üëÜ Tap Game", callback_data="game_tap"),
        InlineKeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∏", callback_data="menu_roulettes"),
        InlineKeyboardButton("‚öîÔ∏è PvP –î—É–µ–ª—å", callback_data="game_pvp"),
        InlineKeyboardButton("üé≤ –ö—ñ—Å—Ç–∫–∏", callback_data="game_dice"),
        InlineKeyboardButton("üéØ –í–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="game_guess"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
    )
    return kb

def build_roulettes_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üé™ –†—É–ª–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤", callback_data="menu_item_roulette"),
        InlineKeyboardButton("üí∞ –ó–≤–∏—á–∞–π–Ω–∞ —Ä—É–ª–µ—Ç–∫–∞", callback_data="roulette_normal"),
        InlineKeyboardButton("üíé –ü—Ä–µ–º—ñ—É–º —Ä—É–ª–µ—Ç–∫–∞", callback_data="roulette_premium"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")
    )
    return kb

def build_income_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üêì –§–µ—Ä–º–∞", callback_data="income_farm"),
        InlineKeyboardButton("üèòÔ∏è –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", callback_data="income_real_estate"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
    )
    return kb

def build_shop_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üêì –§–µ—Ä–º–∞", callback_data="shop_farm"),
        InlineKeyboardButton("üèòÔ∏è –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", callback_data="shop_real_estate"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
    )
    return kb

def build_friends_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤", callback_data="friends_list"),
        InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–∞", callback_data="friends_add"),
        InlineKeyboardButton("üí∞ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥—Ä–æ—à—ñ", callback_data="friends_transfer"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_profile")
    )
    return kb

# ========== –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î ==========
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    
    ensure_player(user_id, username)
    cursor.execute("UPDATE players SET last_active = ? WHERE user_id = ?", 
                   (datetime.now().isoformat(), user_id))
    conn.commit()
    
    text = (
        f"üéÆ <b>–í—ñ—Ç–∞—é, {username}!</b>\n\n"
        f"üöÄ <b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞!</b>\n\n"
        f"üí´ <b>–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:</b>"
    )
    
    await message.answer(text, reply_markup=build_main_menu(user_id))

# ========== –û–°–ù–û–í–ù–Ü –û–ë–†–û–ë–ù–ò–ö–ò –ú–ï–ù–Æ ==========
@dp.callback_query_handler(lambda c: c.data == 'menu_games')
async def cb_menu_games(call: types.CallbackQuery):
    await call.answer()
    text = (
        "üéÆ <b>–ú–µ–Ω—é —ñ–≥–æ—Ä</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É:\n\n"
        "‚Ä¢ üéØ <b>–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞</b> - –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è\n"
        "‚Ä¢ üëÜ <b>Tap Game</b> - –ö–ª–∞—Ü–∞–π—Ç–µ —Ç–∞ –∑–∞—Ä–æ–±–ª—è–π—Ç–µ\n"
        "‚Ä¢ üé∞ <b>–†—É–ª–µ—Ç–∫–∏</b> - –í–∏–≥—Ä–∞–≤–∞–π—Ç–µ –ø—Ä–∏–∑–∏\n"
        "‚Ä¢ ‚öîÔ∏è <b>PvP –î—É–µ–ª—å</b> - –ó–º–∞–≥–∞–π—Ç–µ—Å—å –∑ –≥—Ä–∞–≤—Ü—è–º–∏\n"
        "‚Ä¢ üé≤ <b>–ö—ñ—Å—Ç–∫–∏</b> - –ö–∏–Ω—å—Ç–µ –Ω–∞ —É–¥–∞—á—É\n"
        "‚Ä¢ üéØ <b>–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ</b> - –¢–µ—Å—Ç—É–π—Ç–µ —ñ–Ω—Ç—É—ó—Ü—ñ—é"
    )
    await call.message.edit_text(text, reply_markup=build_games_menu())

@dp.callback_query_handler(lambda c: c.data == 'menu_profile')
async def cb_menu_profile(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    cursor.execute("SELECT username, level, xp, coins, role, total_taps FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if result:
        username, level, xp, coins, role, total_taps = result
        farm_income = get_user_farm_income(user_id)
        estate_income = get_user_real_estate_income(user_id)
        total_passive = farm_income + estate_income
        tap_stats = get_user_tap_stats(user_id)
        
        text = (
            f"üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å –≥—Ä–∞–≤—Ü—è</b>\n\n"
            f"üÜî <b>–Ü–º'—è:</b> {username}\n"
            f"üéØ <b>–†—ñ–≤–µ–Ω—å:</b> {level}\n"
            f"üíé <b>–ú–æ–Ω–µ—Ç–∏:</b> {coins} ‚úØ\n"
            f"üé≠ <b>–†–æ–ª—å:</b> {role}\n"
            f"üëÜ <b>–¢–∞–ø—ñ–≤:</b> {total_taps}\n\n"
            f"üí∞ <b>–ü–∞—Å–∏–≤–Ω–∏–π –¥–æ—Ö—ñ–¥:</b>\n"
            f"‚Ä¢ üêì –§–µ—Ä–º–∞: {farm_income} ‚úØ/–≥–æ–¥\n"
            f"‚Ä¢ üèòÔ∏è –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å: {estate_income} ‚úØ/–≥–æ–¥\n"
            f"‚Ä¢ üí∞ –í—Å—å–æ–≥–æ: {total_passive} ‚úØ/–≥–æ–¥\n\n"
            f"üëÜ <b>Tap Game:</b>\n"
            f"‚Ä¢ –†—ñ–≤–µ–Ω—å: {tap_stats['level']}\n"
            f"‚Ä¢ –î–æ—Ö—ñ–¥: {tap_stats['income']} ‚úØ/—Ç–∞–ø"
        )
        
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üë• –î—Ä—É–∑—ñ", callback_data="menu_friends"))
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
        await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'menu_income')
async def cb_menu_income(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    farm_income = get_user_farm_income(user_id)
    estate_income = get_user_real_estate_income(user_id)
    total_passive = farm_income + estate_income
    tap_stats = get_user_tap_stats(user_id)
    
    text = (
        f"üí∞ <b>–°–∏—Å—Ç–µ–º–∞ –¥–æ—Ö–æ–¥—ñ–≤</b>\n\n"
        f"üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {get_user_coins(user_id)} ‚úØ\n\n"
        f"üìä <b>–ü–æ—Ç–æ—á–Ω—ñ –¥–æ—Ö–æ–¥–∏:</b>\n"
        f"‚Ä¢ üëÜ Tap Game: {tap_stats['income']} ‚úØ/—Ç–∞–ø\n"
        f"‚Ä¢ üêì –§–µ—Ä–º–∞: {farm_income} ‚úØ/–≥–æ–¥\n"
        f"‚Ä¢ üèòÔ∏è –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å: {estate_income} ‚úØ/–≥–æ–¥\n"
        f"‚Ä¢ üí∞ –í—Å—å–æ–≥–æ –ø–∞—Å–∏–≤–Ω–æ: {total_passive} ‚úØ/–≥–æ–¥\n\n"
        f"üéØ <b>–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:</b>"
    )
    
    await call.message.edit_text(text, reply_markup=build_income_menu())

@dp.callback_query_handler(lambda c: c.data == 'menu_leaderboard')
async def cb_menu_leaderboard(call: types.CallbackQuery):
    await call.answer()
    cursor.execute("SELECT username, level, coins FROM players ORDER BY coins DESC LIMIT 10")
    top_players = cursor.fetchall()
    
    text = "üèÜ <b>–¢–æ–ø 10 –≥—Ä–∞–≤—Ü—ñ–≤</b>\n\n"
    
    if top_players:
        for i, (username, level, coins) in enumerate(top_players, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            text += f"{medal} {username} - {coins} ‚úØ (—Ä—ñ–≤–µ–Ω—å {level})\n"
    else:
        text += "üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≥—Ä–∞–≤—Ü—ñ–≤\n"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="menu_leaderboard"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'menu_shop')
async def cb_menu_shop(call: types.CallbackQuery):
    await call.answer()
    text = (
        "üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:\n\n"
        "‚Ä¢ üêì <b>–§–µ—Ä–º–∞</b> - –¢–≤–∞—Ä–∏–Ω–∏ –¥–ª—è –ø–∞—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥—É\n"
        "‚Ä¢ üèòÔ∏è <b>–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å</b> - –û–±'—î–∫—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ\n\n"
        "üí° <b>–ü–æ—Ä–∞–¥–∞:</b> –Ü–Ω–≤–µ—Å—Ç—É–π—Ç–µ –≤ –ø–∞—Å–∏–≤–Ω–∏–π –¥–æ—Ö—ñ–¥!"
    )
    await call.message.edit_text(text, reply_markup=build_shop_menu())

@dp.callback_query_handler(lambda c: c.data == 'menu_roulettes')
async def cb_menu_roulettes(call: types.CallbackQuery):
    await call.answer()
    text = (
        "üé∞ <b>–†—É–ª–µ—Ç–∫–∏</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä—É–ª–µ—Ç–∫–∏:\n\n"
        "‚Ä¢ üé™ <b>–†—É–ª–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</b> - –í–∏–≥—Ä–∞–≤–∞–π—Ç–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏\n"
        "‚Ä¢ üí∞ <b>–ó–≤–∏—á–∞–π–Ω–∞ —Ä—É–ª–µ—Ç–∫–∞</b> - –í–∏–≥—Ä–∞–≤–∞–π—Ç–µ –º–æ–Ω–µ—Ç–∏ (50 ‚úØ –∑–∞ —Å–ø—ñ–Ω)\n"
        "‚Ä¢ üíé <b>–ü—Ä–µ–º—ñ—É–º —Ä—É–ª–µ—Ç–∫–∞</b> - –í–µ–ª–∏–∫—ñ –≤–∏–≥—Ä–∞—à—ñ –∑ –º–Ω–æ–∂–Ω–∏–∫–∞–º–∏"
    )
    await call.message.edit_text(text, reply_markup=build_roulettes_menu())

@dp.callback_query_handler(lambda c: c.data == 'menu_friends')
async def cb_menu_friends(call: types.CallbackQuery):
    await call.answer()
    text = (
        "üë• <b>–°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑—ñ–≤</b>\n\n"
        "üìä <b>–§—É–Ω–∫—Ü—ñ—ó:</b>\n"
        "‚Ä¢ –î–æ–¥–∞–≤–∞–π—Ç–µ –¥—Ä—É–∑—ñ–≤ –∑–∞ ID\n"
        "‚Ä¢ –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –º–æ–Ω–µ—Ç–∏ –¥—Ä—É–∑—è–º\n"
        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤\n\n"
        "üí° <b>–ü–æ—Ä–∞–¥–∞:</b> ID –¥—Ä—É–≥–∞ –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –∑ –π–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é"
    )
    
    await call.message.edit_text(text, reply_markup=build_friends_menu())

@dp.callback_query_handler(lambda c: c.data.startswith('menu_back|'))
async def cb_menu_back(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    username = call.from_user.username or call.from_user.full_name
    
    ensure_player(user_id, username)
    
    text = (
        f"üéÆ <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n"
        f"üí´ <b>–í—ñ—Ç–∞—é, {username}!</b>\n\n"
        f"üöÄ <b>–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:</b>"
    )
    
    await call.message.edit_text(text, reply_markup=build_main_menu(user_id))

# ========== –°–ò–°–¢–ï–ú–ê –î–†–£–ó–Ü–í ==========
@dp.callback_query_handler(lambda c: c.data == 'friends_list')
async def cb_friends_list(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    friends = get_user_friends(user_id)
    
    text = "üë• <b>–í–∞—à—ñ –¥—Ä—É–∑—ñ</b>\n\n"
    
    if friends:
        for i, friend in enumerate(friends, 1):
            text += f"{i}. {friend['username']}\n"
            text += f"   ID: {friend['user_id']}\n\n"
    else:
        text += "‚ùå –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥—Ä—É–∑—ñ–≤!\n\n"
        text += "üí° –î–æ–¥–∞–π—Ç–µ –¥—Ä—É–≥–∞ –∑–∞ –π–æ–≥–æ ID"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–∞", callback_data="friends_add"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_friends"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'friends_add')
async def cb_friends_add(call: types.CallbackQuery):
    await call.answer()
    
    text = (
        "‚ûï <b>–î–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–∞</b>\n\n"
        "üìù <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "<code>/addfriend ID_–¥—Ä—É–≥–∞</code>\n\n"
        "üìù <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
        "<code>/addfriend 123456789</code>\n\n"
        "üí° <b>–Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å ID –¥—Ä—É–≥–∞?</b>\n"
        "1. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–≥–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ /start –±–æ—Ç—É\n"
        "2. –í—ñ–Ω –ø–æ–±–∞—á–∏—Ç—å —Å–≤—ñ–π ID —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\n"
        "3. –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ @userinfobot"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤", callback_data="friends_list"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_friends"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'friends_transfer')
async def cb_friends_transfer(call: types.CallbackQuery):
    await call.answer()
    
    text = (
        "üí∞ <b>–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥—Ä–æ—à—ñ –¥—Ä—É–≥—É</b>\n\n"
        "üìù <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "<code>/transfer ID_–¥—Ä—É–≥–∞ —Å—É–º–∞</code>\n\n"
        "üìù <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
        "<code>/transfer 123456789 100</code> - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 100 ‚úØ\n"
        "<code>/transfer 123456789 500</code> - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 500 ‚úØ\n\n"
        "‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b>\n"
        "‚Ä¢ –ö–æ–º—ñ—Å—ñ—è 5%\n"
        "‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞: 10 ‚úØ\n"
        "‚Ä¢ –ù–µ –º–æ–∂–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–æ–±—ñ"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤", callback_data="friends_list"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_friends"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.message_handler(commands=['addfriend'])
async def cmd_addfriend(message: types.Message):
    user_id = message.from_user.id
    ensure_player(user_id, message.from_user.username or message.from_user.full_name)
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addfriend ID_–¥—Ä—É–≥–∞")
            return
        
        friend_id = int(parts[1])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –¥–æ–¥–∞—î–º–æ —Å–µ–±–µ
        if friend_id == user_id:
            await message.answer("‚ùå –ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–µ–±–µ –≤ –¥—Ä—É–∑—ñ!")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –≥—Ä–∞–≤–µ—Ü—å
        cursor.execute("SELECT username FROM players WHERE user_id = ?", (friend_id,))
        friend_data = cursor.fetchone()
        
        if not friend_data:
            await message.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π! –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–≥–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ /start –±–æ—Ç—É.")
            return
        
        friend_username = friend_data[0]
        
        # –î–æ–¥–∞—î–º–æ –¥—Ä—É–≥–∞
        if add_friend(user_id, friend_id, friend_username):
            await message.answer(f"‚úÖ <b>–î—Ä—É–≥–∞ –¥–æ–¥–∞–Ω–æ!</b>\n\nüë§ {friend_username} —Ç–µ–ø–µ—Ä —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –¥—Ä—É–∑—ñ–≤!")
        else:
            await message.answer("‚ùå –¶–µ–π –≥—Ä–∞–≤–µ—Ü—å –≤–∂–µ —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –¥—Ä—É–∑—ñ–≤!")
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['transfer'])
async def cmd_transfer(message: types.Message):
    user_id = message.from_user.id
    ensure_player(user_id, message.from_user.username or message.from_user.full_name)
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /transfer ID_–¥—Ä—É–≥–∞ —Å—É–º–∞")
            return
        
        friend_id = int(parts[1])
        amount = int(parts[2])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if amount < 10:
            await message.answer("‚ùå –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: 10 ‚úØ")
            return
        
        if friend_id == user_id:
            await message.answer("‚ùå –ù–µ –º–æ–∂–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≥—Ä–æ—à—ñ —Å–∞–º–æ–º—É —Å–æ–±—ñ!")
            return
        
        user_coins = get_user_coins(user_id)
        if user_coins < amount:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç! –£ –≤–∞—Å {user_coins} ‚úØ, –ø–æ—Ç—Ä—ñ–±–Ω–æ {amount} ‚úØ")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥—Ä—É–≥
        cursor.execute("SELECT friend_username FROM friends WHERE user_id = ? AND friend_id = ?", (user_id, friend_id))
        friend_data = cursor.fetchone()
        
        if not friend_data:
            await message.answer("‚ùå –¶–µ–π –≥—Ä–∞–≤–µ—Ü—å –Ω–µ —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –¥—Ä—É–∑—ñ–≤! –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ.")
            return
        
        friend_username = friend_data[0]
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–∫–∞–∑
        if transfer_money(user_id, friend_id, amount):
            commission = ceil(amount * 0.05)
            final_amount = amount - commission
            
            await message.answer(
                f"‚úÖ <b>–ü–µ—Ä–µ–∫–∞–∑ —É—Å–ø—ñ—à–Ω–∏–π!</b>\n\n"
                f"üë§ –û—Ç—Ä–∏–º—É–≤–∞—á: {friend_username}\n"
                f"üí∞ –°—É–º–∞: {amount} ‚úØ\n"
                f"üí∏ –ö–æ–º—ñ—Å—ñ—è: {commission} ‚úØ (5%)\n"
                f"üéØ –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: {final_amount} ‚úØ\n"
                f"üíé –í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
            )
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–∞–∑—É!")
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ========== –û–ë–†–û–ë–ù–ò–ö–ò –Ü–ì–û–† ==========

@dp.callback_query_handler(lambda c: c.data == 'game_quiz')
async def cb_game_quiz(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –ø–∏—Ç–∞–Ω—å
    cursor.execute("SELECT COUNT(*) FROM quiz_answers WHERE user_id = ? AND date = ?", 
                   (user_id, datetime.now().date().isoformat()))
    answered_count = cursor.fetchone()[0]
    
    if answered_count >= DAILY_QUESTION_LIMIT:
        await call.message.edit_text(
            f"‚ùå <b>–õ—ñ–º—ñ—Ç –ø–∏—Ç–∞–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏—á–µ—Ä–ø–∞–Ω–æ!</b>\n\n"
            f"–í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ {answered_count}/{DAILY_QUESTION_LIMIT} –ø–∏—Ç–∞–Ω—å.\n"
            f"üïí –õ—ñ–º—ñ—Ç –æ–Ω–æ–≤–∏—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞!",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")
            )
        )
        return
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∑ —Ñ–∞–π–ª—É
    try:
        with open(QUESTIONS_PATH, 'r', encoding='utf-8') as f:
            questions = json.load(f)
        question = random.choice(questions)
    except:
        await call.message.edit_text(
            "‚ùå <b>–§–∞–π–ª –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!</b>\n\n"
            "–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª questions.json –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")
            )
        )
        return
    
    kb = InlineKeyboardMarkup(row_width=2)
    for i, option in enumerate(question["options"]):
        kb.insert(InlineKeyboardButton(option, callback_data=f"quiz_answer_{i}_{question['correct']}"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(
        f"‚ùì <b>–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞</b>\n\n"
        f"{question['question']}\n\n"
        f"üìä –°—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏: {answered_count}/{DAILY_QUESTION_LIMIT}",
        reply_markup=kb
    )

@dp.callback_query_handler(lambda c: c.data.startswith('quiz_answer_'))
async def cb_quiz_answer(call: types.CallbackQuery):
    user_id = call.from_user.id
    data_parts = call.data.split('_')
    answer_index = int(data_parts[2])
    correct_index = int(data_parts[3])
    
    if answer_index == correct_index:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        reward = 20
        add_user_coins(user_id, reward)
        add_user_xp(user_id, 10)
        
        cursor.execute(
            "INSERT INTO quiz_answers (user_id, date, correct) VALUES (?, ?, ?)",
            (user_id, datetime.now().date().isoformat(), 1)
        )
        conn.commit()
        
        text = (
            f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
            f"üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏ {reward} ‚úØ\n"
            f"üìà +10 –¥–æ—Å–≤—ñ–¥—É\n\n"
            f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
        )
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        cursor.execute(
            "INSERT INTO quiz_answers (user_id, date, correct) VALUES (?, ?, ?)",
            (user_id, datetime.now().date().isoformat(), 0)
        )
        conn.commit()
        
        text = (
            f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
            f"üí° –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!"
        )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéØ –©–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="game_quiz"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'game_tap')
async def cb_game_tap(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    tap_stats = get_user_tap_stats(user_id)
    next_level = tap_stats['level'] + 1
    next_boost = TapGame.BOOST_LEVELS.get(next_level)
    
    text = (
        f"üëÜ <b>Tap Game</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n"
        f"üéØ –†—ñ–≤–µ–Ω—å: {tap_stats['level']}\n"
        f"üí∞ –î–æ—Ö—ñ–¥: {tap_stats['income']} ‚úØ/—Ç–∞–ø\n"
        f"üëÜ –í—Å—å–æ–≥–æ —Ç–∞–ø—ñ–≤: {tap_stats['total_taps']}\n\n"
    )
    
    if next_boost:
        text += f"‚ö° –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å ({next_level}): {next_boost['income']} ‚úØ/—Ç–∞–ø\n"
        text += f"üíµ –¶—ñ–Ω–∞: {next_boost['price']} ‚úØ\n\n"
    
    text += "üéÆ –ù–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É —â–æ–± –∑–∞—Ä–æ–±–ª—è—Ç–∏ –º–æ–Ω–µ—Ç–∏!"
    
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton("üëÜ –¢–∞–ø–Ω—É—Ç–∏!", callback_data="tap_click"))
    if next_boost and get_user_coins(user_id) >= next_boost['price']:
        kb.add(InlineKeyboardButton(f"‚ö° –ü—Ä–æ–∫–∞—á–∞—Ç–∏ ({next_boost['price']} ‚úØ)", callback_data="tap_upgrade"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'tap_click')
async def cb_tap_click(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    tap_stats = get_user_tap_stats(user_id)
    
    add_user_coins(user_id, tap_stats['income'])
    cursor.execute("UPDATE players SET total_taps = total_taps + 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    
    update_daily_task(user_id, "tap_count")
    await cb_game_tap(call)

@dp.callback_query_handler(lambda c: c.data == 'tap_upgrade')
async def cb_tap_upgrade(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    tap_stats = get_user_tap_stats(user_id)
    next_level = tap_stats['level'] + 1
    next_boost = TapGame.BOOST_LEVELS.get(next_level)
    
    if not next_boost:
        await call.answer("üéâ –í–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è!", show_alert=True)
        return
    
    if get_user_coins(user_id) >= next_boost['price']:
        cursor.execute("UPDATE players SET coins = coins - ?, tap_boost_level = ? WHERE user_id = ?", 
                       (next_boost['price'], next_level, user_id))
        conn.commit()
        await call.answer(f"‚ö° –ü—Ä–æ–∫–∞—á–∞–Ω–æ –¥–æ {next_level} —Ä—ñ–≤–Ω—è!", show_alert=True)
        await cb_game_tap(call)
    else:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'game_pvp')
async def cb_game_pvp(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    cursor.execute("SELECT user_id, username FROM players WHERE user_id != ? ORDER BY RANDOM() LIMIT 1", (user_id,))
    opponent = cursor.fetchone()
    
    if opponent:
        opponent_id, opponent_name = opponent
        opponent_coins = get_user_coins(opponent_id)
        
        text = (
            f"‚öîÔ∏è <b>PvP –î—É–µ–ª—å</b>\n\n"
            f"üéØ <b>–í–∞—à —Å—É–ø–µ—Ä–Ω–∏–∫:</b> {opponent_name}\n"
            f"üíé –ë–∞–ª–∞–Ω—Å —Å—É–ø–µ—Ä–Ω–∏–∫–∞: {opponent_coins} ‚úØ\n"
            f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
            f"üé∞ <b>–ú–µ—Ö–∞–Ω—ñ–∫–∞:</b>\n"
            f"‚Ä¢ –ö–æ–∂–µ–Ω —Å—Ç–∞–≤–∏—Ç—å 10% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É\n"
            f"‚Ä¢ –ü–µ—Ä–µ–º–∞–≥–∞—î —Ç–æ–π, —Ö—Ç–æ –≤–∏–∫–∏–Ω–µ –±—ñ–ª—å—à–µ –Ω–∞ –∫—ñ—Å—Ç–∫–∞—Ö (1-6)\n"
            f"‚Ä¢ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º—É—î –≤–µ—Å—å –±–∞–Ω–∫!\n\n"
            f"‚ö° –ì–æ—Ç–æ–≤—ñ –¥–æ –±–∏—Ç–≤–∏?"
        )
        
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üé≤ –ü—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫!", callback_data=f"pvp_fight_{opponent_id}"))
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    else:
        text = "‚ùå –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤!"
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('pvp_fight_'))
async def cb_pvp_fight(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    opponent_id = int(call.data.split('_')[2])
    
    user_coins = get_user_coins(user_id)
    opponent_coins = get_user_coins(opponent_id)
    
    bet_user = max(10, min(1000, user_coins // 10))
    bet_opponent = max(10, min(1000, opponent_coins // 10))
    total_bet = bet_user + bet_opponent
    
    user_roll = random.randint(1, 6)
    opponent_roll = random.randint(1, 6)
    
    cursor.execute("SELECT username FROM players WHERE user_id = ?", (opponent_id,))
    opponent_name = cursor.fetchone()[0]
    
    if user_roll > opponent_roll:
        add_user_coins(user_id, total_bet)
        cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", (bet_opponent, opponent_id))
        result_text = f"üéâ <b>–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!</b>\n\n"
        reward = total_bet
    elif user_roll < opponent_roll:
        cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (total_bet, opponent_id))
        cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", (bet_user, user_id))
        result_text = f"‚ùå <b>–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!</b>\n\n"
        reward = -bet_user
    else:
        result_text = f"ü§ù <b>–ù—ñ—á–∏—è!</b>\n\n"
        reward = 0
    
    text = (
        f"{result_text}"
        f"üé≤ –í–∞—à –∫–∏–¥–æ–∫: <b>{user_roll}</b>\n"
        f"üé≤ –ö–∏–¥–æ–∫ {opponent_name}: <b>{opponent_roll}</b>\n\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_user} ‚úØ\n"
        f"üèÜ –í–∏–≥—Ä–∞—à: {reward} ‚úØ\n"
        f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚öîÔ∏è –©–µ –¥—É–µ–ª—å", callback_data="game_pvp"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)
    conn.commit()

@dp.callback_query_handler(lambda c: c.data == 'game_dice')
async def cb_game_dice(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    text = (
        f"üé≤ <b>–ì—Ä–∞ –≤ –∫—ñ—Å—Ç–∫–∏</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
        f"üéØ <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        f"‚Ä¢ –°—Ç–∞–≤–∫–∞: 50 ‚úØ\n"
        f"‚Ä¢ –ö–∏–¥–∞—î—Ç–µ –¥–≤—ñ –∫—ñ—Å—Ç–∫–∏ (2-12)\n"
        f"‚Ä¢ 7-12: x2 –≤–∏–≥—Ä–∞—à\n"
        f"‚Ä¢ 2-6: –ø—Ä–æ–≥—Ä–∞—à\n\n"
        f"üé∞ –ì–æ—Ç–æ–≤—ñ –∫–∏–Ω—É—Ç–∏ –∫—ñ—Å—Ç–∫–∏?"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé≤ –ö–∏–Ω—É—Ç–∏ –∫—ñ—Å—Ç–∫–∏ (50 ‚úØ)", callback_data="dice_roll"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'dice_roll')
async def cb_dice_roll(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    user_coins = get_user_coins(user_id)
    
    if user_coins < 50:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    dice1 = random.randint(1, 6)
    dice2 = random.randint(1, 6)
    total = dice1 + dice2
    
    if total >= 7:
        win_amount = 100
        add_user_coins(user_id, win_amount - 50)
        result = f"üéâ <b>–í–∏–≥—Ä–∞—à! +50 ‚úØ</b>"
    else:
        cursor.execute("UPDATE players SET coins = coins - 50 WHERE user_id = ?", (user_id,))
        result = f"‚ùå <b>–ü—Ä–æ–≥—Ä–∞—à! -50 ‚úØ</b>"
    
    conn.commit()
    
    text = (
        f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∏–¥–∫–∞</b>\n\n"
        f"üéØ –ö—ñ—Å—Ç–∫–∏: <b>{dice1}</b> + <b>{dice2}</b> = <b>{total}</b>\n"
        f"üí∞ {result}\n\n"
        f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé≤ –ö–∏–Ω—É—Ç–∏ —â–µ —Ä–∞–∑", callback_data="dice_roll"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="game_dice"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'game_guess')
async def cb_game_guess(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    secret_number = random.randint(1, 10)
    
    text = (
        f"üéØ <b>–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
        f"üéØ <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        f"‚Ä¢ –ó–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10\n"
        f"‚Ä¢ –°—Ç–∞–≤–∫–∞: 25 ‚úØ\n"
        f"‚Ä¢ –í–≥–∞–¥–∞–ª–∏: +75 ‚úØ (x3)\n"
        f"‚Ä¢ –ù–µ –≤–≥–∞–¥–∞–ª–∏: -25 ‚úØ\n\n"
        f"üî¢ –û–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ:"
    )
    
    kb = InlineKeyboardMarkup(row_width=5)
    buttons = []
    for i in range(1, 11):
        buttons.append(InlineKeyboardButton(str(i), callback_data=f"guess_number_{i}_{secret_number}"))
    kb.add(*buttons)
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('guess_number_'))
async def cb_guess_number(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    data_parts = call.data.split('_')
    guessed_number = int(data_parts[2])
    secret_number = int(data_parts[3])
    
    user_coins = get_user_coins(user_id)
    
    if user_coins < 25:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    if guessed_number == secret_number:
        add_user_coins(user_id, 50)
        result = f"üéâ <b>–í—ñ—Ç–∞—é! –í–∏ –≤–≥–∞–¥–∞–ª–∏!</b>\n+50 ‚úØ"
    else:
        cursor.execute("UPDATE players SET coins = coins - 25 WHERE user_id = ?", (user_id,))
        result = f"‚ùå <b>–ù–∞–∂–∞–ª—å, –Ω–µ –≤–≥–∞–¥–∞–ª–∏!</b>\n-25 ‚úØ\n–ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ: {secret_number}"
    
    conn.commit()
    
    text = (
        f"üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∏</b>\n\n"
        f"üî¢ –í–∞—à–∞ —Å–ø—Ä–æ–±–∞: <b>{guessed_number}</b>\n"
        f"üí∞ {result}\n\n"
        f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéØ –ì—Ä–∞—Ç–∏ —â–µ", callback_data="game_guess"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'daily_tasks')
async def cb_daily_tasks(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    progress = get_daily_tasks_progress(user_id)
    
    text = (
        f"üìã <b>–©–æ–¥–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è</b>\n\n"
        f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {progress['tasks_completed']}/{len(DailyTasks.TASKS)}\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
        f"üéØ <b>–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:</b>\n"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    buttons_added = False
    
    for i, task in enumerate(progress["active_tasks"]):
        status = "‚úÖ" if task["completed"] else "‚è≥"
        text += f"{i+1}. {task['description']} {status}\n"
        text += f"   –ü—Ä–æ–≥—Ä–µ—Å: {task['current']}/{task['target']} | –ù–∞–≥–æ—Ä–æ–¥–∞: {task['reward']} ‚úØ\n\n"
        
        if task["completed"]:
            kb.insert(InlineKeyboardButton(f"üéÅ –ó–∞–≤–¥.{i+1}", callback_data=f"claim_task_{i}"))
            buttons_added = True
    
    if not buttons_added:
        text += "üí° –í–∏–∫–æ–Ω–∞–π—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥–∏!"
    
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="daily_tasks"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('claim_task_'))
async def cb_claim_task(call: types.CallbackQuery):
    task_index = int(call.data.replace('claim_task_', ''))
    user_id = call.from_user.id
    
    progress = get_daily_tasks_progress(user_id)
    
    if task_index >= len(progress["active_tasks"]):
        await call.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    task = progress["active_tasks"][task_index]
    
    if not task["completed"]:
        await call.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è —â–µ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ!", show_alert=True)
        return
    
    add_user_coins(user_id, task["reward"])
    cursor.execute("UPDATE daily_tasks SET tasks_completed = tasks_completed + 1 WHERE user_id = ? AND task_date = ?", 
                   (user_id, datetime.now().date().isoformat()))
    conn.commit()
    
    await call.answer(f"üéâ –û—Ç—Ä–∏–º–∞–Ω–æ {task['reward']} ‚úØ!", show_alert=True)
    await cb_daily_tasks(call)

# ========== –ê–î–ú–Ü–ù-–§–£–ù–ö–¶–Ü–á ==========
def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

def get_all_users() -> List[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤"""
    cursor.execute("SELECT user_id, username, level, coins, last_active FROM players ORDER BY coins DESC")
    users = []
    for user_id, username, level, coins, last_active in cursor.fetchall():
        users.append({
            "user_id": user_id,
            "username": username,
            "level": level,
            "coins": coins,
            "last_active": last_active
        })
    return users

def update_user_balance(user_id: int, coins: int):
    """–ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è"""
    cursor.execute("UPDATE players SET coins = ? WHERE user_id = ?", (coins, user_id))
    conn.commit()

def update_user_level(user_id: int, level: int):
    """–ó–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –≥—Ä–∞–≤—Ü—è"""
    cursor.execute("UPDATE players SET level = ? WHERE user_id = ?", (level, user_id))
    conn.commit()

def add_coins_to_all(amount: int):
    """–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏ –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º"""
    cursor.execute("UPDATE players SET coins = coins + ?", (amount,))
    conn.commit()

def get_bot_stats() -> Dict:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    cursor.execute("SELECT COUNT(*) FROM players")
    total_players = cursor.fetchone()[0]
    
    cursor.execute("SELECT SUM(coins) FROM players")
    total_coins = cursor.fetchone()[0] or 0
    
    cursor.execute("SELECT COUNT(*) FROM players WHERE last_active > ?", 
                   ((datetime.now() - timedelta(days=1)).isoformat(),))
    active_today = cursor.fetchone()[0]
    
    return {
        "total_players": total_players,
        "total_coins": total_coins,
        "active_today": active_today
    }

# ========== –ê–î–ú–Ü–ù-–û–ë–†–û–ë–ù–ò–ö–ò ==========
@dp.callback_query_handler(lambda c: c.data == 'admin_panel')
async def cb_admin_panel(call: types.CallbackQuery):
    """–ì–æ–ª–æ–≤–Ω–∞ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(call.from_user.id):
        await call.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    await call.answer()
    stats = get_bot_stats()
    
    text = (
        f"üëë <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"
        f"‚Ä¢ üë• –ì—Ä–∞–≤—Ü—ñ–≤: {stats['total_players']}\n"
        f"‚Ä¢ üí∞ –ú–æ–Ω–µ—Ç –≤ –æ–±—ñ–≥—É: {stats['total_coins']}\n"
        f"‚Ä¢ üéØ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ: {stats['active_today']}\n\n"
        f"‚öôÔ∏è <b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:</b>"
    )
    
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤", callback_data="admin_users_list"),
        InlineKeyboardButton("üí∞ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å", callback_data="admin_edit_balance"),
        InlineKeyboardButton("üéØ –ó–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å", callback_data="admin_edit_level"),
        InlineKeyboardButton("üéÅ –ù–∞–≥–æ—Ä–æ–¥–∏—Ç–∏ –≤—Å—ñ—Ö", callback_data="admin_reward_all"),
        InlineKeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast"),
        InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
    )
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'admin_users_list')
async def cb_admin_users_list(call: types.CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤"""
    if not is_admin(call.from_user.id):
        return
    
    await call.answer()
    users = get_all_users()
    
    text = f"üìã <b>–°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤</b>\n\n"
    text += f"üë• –í—Å—å–æ–≥–æ: {len(users)} –≥—Ä–∞–≤—Ü—ñ–≤\n\n"
    
    for i, user in enumerate(users[:15], 1):
        text += f"{i}. {user['username']}\n"
        text += f"   ID: {user['user_id']} | üí∞ {user['coins']} ‚úØ | üéØ {user['level']} —Ä—ñ–≤.\n\n"
    
    if len(users) > 15:
        text += f"... —ñ —â–µ {len(users) - 15} –≥—Ä–∞–≤—Ü—ñ–≤"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_users_list"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'admin_edit_balance')
async def cb_admin_edit_balance(call: types.CallbackQuery):
    """–ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è"""
    if not is_admin(call.from_user.id):
        return
    
    await call.answer()
    
    text = (
        "üí∞ <b>–ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è</b>\n\n"
        "üìù <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "<code>/setcoins ID_–≥—Ä–∞–≤—Ü—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å</code>\n\n"
        "üìù <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
        "<code>/setcoins 123456789 1000</code> - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ 1000 –º–æ–Ω–µ—Ç\n"
        "<code>/setcoins 123456789 +500</code> - –¥–æ–¥–∞—Ç–∏ 500 –º–æ–Ω–µ—Ç\n"
        "<code>/setcoins 123456789 -200</code> - –∑–∞–±—Ä–∞—Ç–∏ 200 –º–æ–Ω–µ—Ç\n\n"
        "üí° <b>–ü–æ—Ä–∞–¥–∞:</b> ID –≥—Ä–∞–≤—Ü—è –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –∑—ñ —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤", callback_data="admin_users_list"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'admin_edit_level')
async def cb_admin_edit_level(call: types.CallbackQuery):
    """–ó–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –≥—Ä–∞–≤—Ü—è"""
    if not is_admin(call.from_user.id):
        return
    
    await call.answer()
    
    text = (
        "üéØ <b>–ó–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –≥—Ä–∞–≤—Ü—è</b>\n\n"
        "üìù <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "<code>/setlevel ID_–≥—Ä–∞–≤—Ü—è —Ä—ñ–≤–µ–Ω—å</code>\n\n"
        "üìù <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
        "<code>/setlevel 123456789 10</code> - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ 10 —Ä—ñ–≤–µ–Ω—å\n"
        "<code>/setlevel 123456789 +5</code> - –ø—ñ–¥–≤–∏—â–∏—Ç–∏ –Ω–∞ 5 —Ä—ñ–≤–Ω—ñ–≤\n"
        "<code>/setlevel 123456789 -2</code> - –∑–Ω–∏–∑–∏—Ç–∏ –Ω–∞ 2 —Ä—ñ–≤–Ω—ñ\n\n"
        "üí° ID –≥—Ä–∞–≤—Ü—è –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –∑—ñ —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤", callback_data="admin_users_list"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'admin_reward_all')
async def cb_admin_reward_all(call: types.CallbackQuery):
    """–ù–∞–≥–æ—Ä–æ–¥–∏—Ç–∏ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤"""
    if not is_admin(call.from_user.id):
        return
    
    await call.answer()
    
    text = (
        "üéÅ <b>–ù–∞–≥–æ—Ä–æ–¥–∏—Ç–∏ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤</b>\n\n"
        "üìù <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "<code>/rewardall –∫—ñ–ª—å–∫—ñ—Å—Ç—å</code>\n\n"
        "üìù <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
        "<code>/rewardall 100</code> - –¥–æ–¥–∞—Ç–∏ 100 –º–æ–Ω–µ—Ç –∫–æ–∂–Ω–æ–º—É\n"
        "<code>/rewardall 1000</code> - –¥–æ–¥–∞—Ç–∏ 1000 –º–æ–Ω–µ—Ç –∫–æ–∂–Ω–æ–º—É\n\n"
        "‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b> –¶—è –¥—ñ—è –Ω–∞—Ä–∞—Ö—É—î –º–æ–Ω–µ—Ç–∏ –í–°–Ü–ú –≥—Ä–∞–≤—Ü—è–º!"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'admin_detailed_stats')
async def cb_admin_detailed_stats(call: types.CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not is_admin(call.from_user.id):
        return
    
    await call.answer()
    users = get_all_users()
    stats = get_bot_stats()
    
    # –¢–æ–ø 10 –≥—Ä–∞–≤—Ü—ñ–≤
    top_players = users[:10]
    
    text = (
        f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë• <b>–ó–∞–≥–∞–ª—å–Ω–∞:</b>\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ –≥—Ä–∞–≤—Ü—ñ–≤: {stats['total_players']}\n"
        f"‚Ä¢ –ú–æ–Ω–µ—Ç –≤ –æ–±—ñ–≥—É: {stats['total_coins']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ: {stats['active_today']}\n\n"
        f"üèÜ <b>–¢–æ–ø 10 –≥—Ä–∞–≤—Ü—ñ–≤:</b>\n"
    )
    
    for i, user in enumerate(top_players, 1):
        text += f"{i}. {user['username']} - {user['coins']} ‚úØ (—Ä—ñ–≤–µ–Ω—å {user['level']})\n"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_detailed_stats"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    await call.message.edit_text(text, reply_markup=kb)

# ========== –ê–î–ú–Ü–ù-–ö–û–ú–ê–ù–î–ò ==========
@dp.message_handler(commands=['setcoins'])
async def cmd_setcoins(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setcoins ID –∫—ñ–ª—å–∫—ñ—Å—Ç—å")
            return
        
        user_id = int(parts[1])
        amount_str = parts[2]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –≥—Ä–∞–≤–µ—Ü—å
        cursor.execute("SELECT username, coins FROM players WHERE user_id = ?", (user_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            await message.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
            return
        
        username, current_coins = user_data
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ amount (+100, -50, –∞–±–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ)
        if amount_str.startswith('+'):
            new_coins = current_coins + int(amount_str[1:])
            action = "–¥–æ–¥–∞–Ω–æ"
        elif amount_str.startswith('-'):
            new_coins = current_coins - int(amount_str[1:])
            action = "–∑–Ω—è—Ç–æ"
        else:
            new_coins = int(amount_str)
            action = "–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        if new_coins < 0:
            new_coins = 0
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
        cursor.execute("UPDATE players SET coins = ? WHERE user_id = ?", (new_coins, user_id))
        conn.commit()
        
        await message.answer(
            f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üë§ –ì—Ä–∞–≤–µ—Ü—å: {username}\n"
            f"üí∞ {action}: {abs(int(amount_str))} ‚úØ\n"
            f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_coins} ‚úØ"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['setlevel'])
async def cmd_setlevel(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setlevel ID —Ä—ñ–≤–µ–Ω—å")
            return
        
        user_id = int(parts[1])
        level_str = parts[2]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –≥—Ä–∞–≤–µ—Ü—å
        cursor.execute("SELECT username, level FROM players WHERE user_id = ?", (user_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            await message.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
            return
        
        username, current_level = user_data
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ level (+5, -2, –∞–±–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ)
        if level_str.startswith('+'):
            new_level = current_level + int(level_str[1:])
            action = "–ø—ñ–¥–≤–∏—â–µ–Ω–æ"
        elif level_str.startswith('-'):
            new_level = current_level - int(level_str[1:])
            action = "–∑–Ω–∏–∂–µ–Ω–æ"
        else:
            new_level = int(level_str)
            action = "–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        if new_level < 1:
            new_level = 1
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ–≤–µ–Ω—å
        cursor.execute("UPDATE players SET level = ? WHERE user_id = ?", (new_level, user_id))
        conn.commit()
        
        await message.answer(
            f"‚úÖ <b>–†—ñ–≤–µ–Ω—å –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üë§ –ì—Ä–∞–≤–µ—Ü—å: {username}\n"
            f"üéØ {action}: {abs(int(level_str))} —Ä—ñ–≤–Ω—ñ–≤\n"
            f"üåü –ù–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å: {new_level}"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['rewardall'])
async def cmd_rewardall(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–≥–æ—Ä–æ–¥–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /rewardall –∫—ñ–ª—å–∫—ñ—Å—Ç—å")
            return
        
        amount = int(parts[1])
        
        if amount <= 0:
            await message.answer("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—å–æ—é!")
            return
        
        # –ù–∞–≥–æ—Ä–æ–¥–∂—É—î–º–æ –≤—Å—ñ—Ö
        cursor.execute("UPDATE players SET coins = coins + ?", (amount,))
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤
        cursor.execute("SELECT COUNT(*) FROM players")
        total_players = cursor.fetchone()[0]
        
        conn.commit()
        
        await message.answer(
            f"‚úÖ <b>–í—Å—ñ –≥—Ä–∞–≤—Ü—ñ –Ω–∞–≥–æ—Ä–æ–¥–∂–µ–Ω—ñ!</b>\n\n"
            f"üéÅ –ö–æ–∂–µ–Ω –æ—Ç—Ä–∏–º–∞–≤: {amount} ‚úØ\n"
            f"üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤: {total_players}\n"
            f"üí∞ –í—Å—å–æ–≥–æ –≤–∏–¥–∞–Ω–æ: {amount * total_players} ‚úØ"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['broadcast'])
async def cmd_broadcast(message: types.Message):
    """–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    if len(message.text.split()) < 2:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /broadcast –≤–∞—à_—Ç–µ–∫—Å—Ç")
        return
    
    broadcast_text = message.text.split(' ', 1)[1]
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
        cursor.execute("SELECT user_id FROM players")
        users = cursor.fetchall()
        
        total_users = len(users)
        success_count = 0
        fail_count = 0
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏
        progress_msg = await message.answer(
            f"üì§ <b>–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏...</b>\n\n"
            f"üë• –ì—Ä–∞–≤—Ü—ñ–≤: {total_users}\n"
            f"‚è≥ –¢—Ä–∏–≤–∞—î –≤—ñ–¥–ø—Ä–∞–≤–∫–∞..."
        )
        
        for i, (user_id,) in enumerate(users):
            try:
                await bot.send_message(
                    user_id,
                    f"üì¢ <b>–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó</b>\n\n"
                    f"{broadcast_text}\n\n"
                    f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                    parse_mode="HTML"
                )
                success_count += 1
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                if i % 10 == 0:
                    await progress_msg.edit_text(
                        f"üì§ <b>–†–æ–∑—Å–∏–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ...</b>\n\n"
                        f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{total_users}\n"
                        f"‚ùå –ü–æ–º–∏–ª–æ–∫: {fail_count}\n"
                        f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å: {i}/{total_users}"
                    )
                
                await asyncio.sleep(0.1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ –ª—ñ–º—ñ—Ç–∏ Telegram
                
            except Exception as e:
                fail_count += 1
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")
        
        # –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await progress_msg.edit_text(
            f"‚úÖ <b>–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:</b>\n"
            f"‚Ä¢ üë• –í—Å—å–æ–≥–æ –≥—Ä–∞–≤—Ü—ñ–≤: {total_users}\n"
            f"‚Ä¢ ‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚Ä¢ ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å: {fail_count}\n"
            f"‚Ä¢ üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {(success_count/total_users)*100:.1f}%\n\n"
            f"üí¨ <b>–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n"
            f"{broadcast_text}"
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ========== –ê–î–ú–Ü–ù-–§–£–ù–ö–¶–Ü–á ==========
def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

def get_all_users() -> List[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤"""
    cursor.execute("SELECT user_id, username, level, coins, last_active FROM players ORDER BY coins DESC")
    users = []
    for user_id, username, level, coins, last_active in cursor.fetchall():
        users.append({
            "user_id": user_id,
            "username": username,
            "level": level,
            "coins": coins,
            "last_active": last_active
        })
    return users

def get_bot_stats() -> Dict:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    cursor.execute("SELECT COUNT(*) FROM players")
    total_players = cursor.fetchone()[0]
    
    cursor.execute("SELECT SUM(coins) FROM players")
    total_coins = cursor.fetchone()[0] or 0
    
    cursor.execute("SELECT COUNT(*) FROM players WHERE last_active > ?", 
                   ((datetime.now() - timedelta(days=1)).isoformat(),))
    active_today = cursor.fetchone()[0]
    
    return {
        "total_players": total_players,
        "total_coins": total_coins,
        "active_today": active_today
    }

# ========== –Ü–ù–®–Ü –§–£–ù–ö–¶–Ü–á ==========
def add_user_xp(user_id: int, xp: int):
    cursor.execute("UPDATE players SET xp = xp + ? WHERE user_id = ?", (xp, user_id))
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
    current_level = get_user_level(user_id)
    current_xp = get_user_xp(user_id)
    xp_needed = current_level * XP_PER_LEVEL
    
    if current_xp >= xp_needed:
        new_level = current_level + 1
        cursor.execute("UPDATE players SET level = ? WHERE user_id = ?", (new_level, user_id))
        conn.commit()
        return new_level
    return current_level

def get_user_xp(user_id: int) -> int:
    cursor.execute("SELECT xp FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def create_progress_bar(percentage: float, length: int = 20) -> str:
    filled = int(length * percentage / 100)
    empty = length - filled
    return f"[{'‚ñà' * filled}{'‚ñë' * empty}] {percentage:.1f}%"
# ========== –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø –í–°–Ü–• –ö–ù–û–ü–û–ö ==========

@dp.callback_query_handler(lambda c: c.data == 'income_farm')
async def cb_income_farm(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    farm_income = get_user_farm_income(user_id)
    
    cursor.execute("SELECT animal_type, income, count FROM farm_animals WHERE user_id = ?", (user_id,))
    user_animals = cursor.fetchall()
    
    text = (
        f"üêì <b>–í–∞—à–∞ —Ñ–µ—Ä–º–∞</b>\n\n"
        f"üí∞ –î–æ—Ö—ñ–¥: {farm_income} ‚úØ/–≥–æ–¥\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
    )
    
    if user_animals:
        text += "üè† <b>–í–∞—à—ñ —Ç–≤–∞—Ä–∏–Ω–∏:</b>\n"
        for animal_type, income, count in user_animals:
            text += f"‚Ä¢ {animal_type}: {count} —à—Ç. ({income * count} ‚úØ/–≥–æ–¥)\n"
    else:
        text += "‚ùå –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ç–≤–∞—Ä–∏–Ω!\n"
    
    text += "\nüõçÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–≤–∞—Ä–∏–Ω–∏:</b>\n"
    for animal in FarmAnimals.ANIMALS[:3]:
        text += f"‚Ä¢ {animal['emoji']} {animal['name']}: {animal['price']} ‚úØ ({animal['income']} ‚úØ/–≥–æ–¥)\n"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üõçÔ∏è –ö—É–ø–∏—Ç–∏ —Ç–≤–∞—Ä–∏–Ω", callback_data="shop_farm"))
    kb.add(InlineKeyboardButton("üí∞ –ó—ñ–±—Ä–∞—Ç–∏ –¥–æ—Ö—ñ–¥", callback_data="farm_collect"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'income_real_estate')
async def cb_income_real_estate(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    estate_income = get_user_real_estate_income(user_id)
    
    cursor.execute("SELECT type, income FROM user_real_estate WHERE user_id = ?", (user_id,))
    user_estates = cursor.fetchall()
    
    text = (
        f"üèòÔ∏è <b>–í–∞—à–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å</b>\n\n"
        f"üí∞ –î–æ—Ö—ñ–¥: {estate_income} ‚úØ/–≥–æ–¥\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
    )
    
    if user_estates:
        text += "üè† <b>–í–∞—à—ñ –æ–±'—î–∫—Ç–∏:</b>\n"
        for estate_type, income in user_estates:
            text += f"‚Ä¢ {estate_type}: {income} ‚úØ/–≥–æ–¥\n"
    else:
        text += "‚ùå –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ!\n"
    
    text += "\nüõçÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å:</b>\n"
    for estate in RealEstate.PROPERTIES[:3]:
        text += f"‚Ä¢ {estate['name']}: {estate['price']} ‚úØ ({estate['income']} ‚úØ/–≥–æ–¥)\n"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üõçÔ∏è –ö—É–ø–∏—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", callback_data="shop_real_estate"))
    kb.add(InlineKeyboardButton("üí∞ –ó—ñ–±—Ä–∞—Ç–∏ –¥–æ—Ö—ñ–¥", callback_data="estate_collect"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'farm_collect')
async def cb_farm_collect(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    farm_income = get_user_farm_income(user_id)
    
    if farm_income == 0:
        await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Ö–æ–¥—É –¥–ª—è –∑–±–æ—Ä—É!", show_alert=True)
        return
    
    add_user_coins(user_id, farm_income)
    
    text = (
        f"üêì <b>–ó–±—ñ—Ä –¥–æ—Ö–æ–¥—É –∑ —Ñ–µ—Ä–º–∏</b>\n\n"
        f"üí∞ –ó—ñ–±—Ä–∞–Ω–æ: {farm_income} ‚úØ\n"
        f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
        f"üïí –ù–∞—Å—Ç—É–ø–Ω–∏–π –¥–æ—Ö—ñ–¥ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="income_farm"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'estate_collect')
async def cb_estate_collect(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    estate_income = get_user_real_estate_income(user_id)
    
    if estate_income == 0:
        await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Ö–æ–¥—É –¥–ª—è –∑–±–æ—Ä—É!", show_alert=True)
        return
    
    add_user_coins(user_id, estate_income)
    
    text = (
        f"üèòÔ∏è <b>–ó–±—ñ—Ä –¥–æ—Ö–æ–¥—É –∑ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ</b>\n\n"
        f"üí∞ –ó—ñ–±—Ä–∞–Ω–æ: {estate_income} ‚úØ\n"
        f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
        f"üïí –ù–∞—Å—Ç—É–ø–Ω–∏–π –¥–æ—Ö—ñ–¥ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="income_real_estate"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'shop_farm')
async def cb_shop_farm(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    user_coins = get_user_coins(user_id)
    farm_income = get_user_farm_income(user_id)
    
    text = (
        f"üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω —Ñ–µ—Ä–º–∏</b>\n\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –¥–æ—Ö—ñ–¥: {farm_income} ‚úØ/–≥–æ–¥\n\n"
        f"üêì <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–≤–∞—Ä–∏–Ω–∏:</b>\n"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    
    for animal in FarmAnimals.ANIMALS:
        text += f"‚Ä¢ {animal['emoji']} {animal['name']}: {animal['price']} ‚úØ ({animal['income']} ‚úØ/–≥–æ–¥)\n"
        if user_coins >= animal['price']:
            kb.insert(InlineKeyboardButton(
                f"{animal['emoji']} {animal['price']}‚úØ", 
                callback_data=f"buy_animal_{animal['name']}"
            ))
    
    text += f"\nüí° <b>–ü–æ—Ä–∞–¥–∞:</b> –¢–≤–∞—Ä–∏–Ω–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç—å –ø–∞—Å–∏–≤–Ω–∏–π –¥–æ—Ö—ñ–¥ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É!"
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="income_farm"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('buy_animal_'))
async def cb_buy_animal(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    animal_name = call.data.replace('buy_animal_', '')
    
    animal = next((a for a in FarmAnimals.ANIMALS if a['name'] == animal_name), None)
    if not animal:
        await call.answer("‚ùå –¢–≤–∞—Ä–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    user_coins = get_user_coins(user_id)
    
    if user_coins < animal['price']:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", 
                   (animal['price'], user_id))
    
    cursor.execute("SELECT count FROM farm_animals WHERE user_id = ? AND animal_type = ?", 
                   (user_id, animal['name']))
    result = cursor.fetchone()
    
    if result:
        cursor.execute("UPDATE farm_animals SET count = count + 1 WHERE user_id = ? AND animal_type = ?", 
                       (user_id, animal['name']))
    else:
        cursor.execute(
            "INSERT INTO farm_animals (user_id, animal_type, income, count) VALUES (?, ?, ?, ?)",
            (user_id, animal['name'], animal['income'], 1)
        )
    
    conn.commit()
    update_daily_task(user_id, "buy_animals")
    
    await call.answer(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {animal['emoji']} {animal['name']}!", show_alert=True)
    await cb_shop_farm(call)

@dp.callback_query_handler(lambda c: c.data == 'shop_real_estate')
async def cb_shop_real_estate(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    user_coins = get_user_coins(user_id)
    estate_income = get_user_real_estate_income(user_id)
    
    text = (
        f"üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ</b>\n\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –¥–æ—Ö—ñ–¥: {estate_income} ‚úØ/–≥–æ–¥\n\n"
        f"üèòÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å:</b>\n"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    
    for estate in RealEstate.PROPERTIES:
        text += f"‚Ä¢ {estate['name']}: {estate['price']} ‚úØ ({estate['income']} ‚úØ/–≥–æ–¥)\n"
        if user_coins >= estate['price']:
            kb.insert(InlineKeyboardButton(
                f"{estate['name']} {estate['price']}‚úØ", 
                callback_data=f"buy_estate_{estate['name']}"
            ))
    
    text += f"\nüí° <b>–ü–æ—Ä–∞–¥–∞:</b> –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å –ø—Ä–∏–Ω–æ—Å–∏—Ç—å —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –ø–∞—Å–∏–≤–Ω–∏–π –¥–æ—Ö—ñ–¥!"
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="income_real_estate"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('buy_estate_'))
async def cb_buy_estate(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    estate_name = call.data.replace('buy_estate_', '')
    
    estate = next((e for e in RealEstate.PROPERTIES if e['name'] == estate_name), None)
    if not estate:
        await call.answer("‚ùå –û–±'—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!", show_alert=True)
        return
    
    user_coins = get_user_coins(user_id)
    
    if user_coins < estate['price']:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", 
                   (estate['price'], user_id))
    
    cursor.execute(
        "INSERT INTO user_real_estate (user_id, type, income, price, last_collect_time) VALUES (?, ?, ?, ?, ?)",
        (user_id, estate['name'], estate['income'], estate['price'], datetime.now().isoformat())
    )
    
    conn.commit()
    
    await call.answer(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {estate['name']}!", show_alert=True)
    await cb_shop_real_estate(call)

@dp.callback_query_handler(lambda c: c.data == 'menu_item_roulette')
async def cb_menu_item_roulette(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    user_coins = get_user_coins(user_id)
    can_spin = get_user_level(user_id) >= 3 and user_coins >= 200
    
    text = (
        f"üé™ <b>–†—É–ª–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üéØ –í–∞—Ä—Ç—ñ—Å—Ç—å: 200 ‚úØ\n"
        f"üìä –î–æ—Å—Ç—É–ø–Ω–æ: {'‚úÖ' if can_spin else '‚ùå'}\n\n"
    )
    
    if not can_spin:
        if get_user_level(user_id) < 3:
            text += "‚ùå –†—É–ª–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –∑ 3 —Ä—ñ–≤–Ω—è!\n\n"
        else:
            text += "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 200 ‚úØ\n\n"
    
    text += "üèÜ <b>–¢–æ–ø –ø—Ä–∏–∑–∏:</b>\n"
    top_prizes = sorted(ItemRoulettePrizes.PRIZES, key=lambda x: x['price'], reverse=True)[:5]
    for prize in top_prizes:
        text += f"‚Ä¢ {prize['name']} - {prize['price']} ‚úØ\n"
    
    kb = InlineKeyboardMarkup(row_width=2)
    if can_spin:
        kb.add(InlineKeyboardButton("üé™ –ö—Ä—É—Ç–∏—Ç–∏ (200 ‚úØ)", callback_data="item_roulette_spin"))
    kb.add(
        InlineKeyboardButton("üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_roulettes")
    )
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'item_roulette_spin')
async def cb_item_roulette_spin(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    if get_user_coins(user_id) < 200:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    cursor.execute("UPDATE players SET coins = coins - 200 WHERE user_id = ?", (user_id,))
    
    r = random.random()
    cumulative_probability = 0.0
    
    for prize in ItemRoulettePrizes.PRIZES:
        cumulative_probability += prize["probability"]
        if r <= cumulative_probability:
            cursor.execute(
                "INSERT INTO user_inventory (user_id, item_name, item_price, obtained_date) VALUES (?, ?, ?, ?)",
                (user_id, prize["name"], prize["price"], datetime.now().isoformat())
            )
            conn.commit()
            
            update_daily_task(user_id, "spin_roulette")
            
            text = (
                f"üé™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏</b>\n\n"
                f"üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏: {prize['name']}!\n"
                f"üíé –¶—ñ–Ω–∞: {prize['price']} ‚úØ\n\n"
                f"üíº –ü—Ä–µ–¥–º–µ—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è!\n"
                f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
            )
            
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view"))
            kb.add(InlineKeyboardButton("üé™ –ö—Ä—É—Ç–∏—Ç–∏ —â–µ", callback_data="item_roulette_spin"))
            kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_item_roulette"))
            
            await call.message.edit_text(text, reply_markup=kb)
            return
    
    await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä—É–ª–µ—Ç–∫–∏", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'inventory_view')
async def cb_inventory_view(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    cursor.execute(
        "SELECT item_name, item_price, obtained_date FROM user_inventory WHERE user_id = ? ORDER BY obtained_date DESC",
        (user_id,)
    )
    items = cursor.fetchall()
    
    if not items:
        text = "üì¶ <b>–í–∞—à —ñ–Ω–≤–µ–Ω—Ç–∞—Ä</b>\n\n‚ùå –Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π!\nüé™ –ö—Ä—É—Ç—ñ—Ç—å —Ä—É–ª–µ—Ç–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏."
    else:
        total_value = sum(item[1] for item in items)
        text = f"üì¶ <b>–í–∞—à —ñ–Ω–≤–µ–Ω—Ç–∞—Ä</b>\n\nüìä –ü—Ä–µ–¥–º–µ—Ç—ñ–≤: {len(items)}\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_value} ‚úØ\n\n"
        
        for i, (name, price, date) in enumerate(items[:10], 1):
            text += f"{i}. {name} - {price} ‚úØ\n"
        
        if len(items) > 10:
            text += f"\n... —ñ —â–µ {len(items) - 10} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé™ –†—É–ª–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤", callback_data="menu_item_roulette"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_roulettes"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'roulette_normal')
async def cb_roulette_normal(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    user_coins = get_user_coins(user_id)
    
    text = (
        f"üí∞ <b>–ó–≤–∏—á–∞–π–Ω–∞ —Ä—É–ª–µ—Ç–∫–∞</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üéØ –í–∞—Ä—Ç—ñ—Å—Ç—å: 50 ‚úØ\n\n"
        f"üèÜ <b>–ú–æ–∂–ª–∏–≤—ñ –≤–∏–≥—Ä–∞—à—ñ:</b>\n"
        f"‚Ä¢ 10 ‚úØ (30% —à–∞–Ω—Å)\n"
        f"‚Ä¢ 25 ‚úØ (25% —à–∞–Ω—Å)\n"
        f"‚Ä¢ 50 ‚úØ (20% —à–∞–Ω—Å)\n"
        f"‚Ä¢ 100 ‚úØ (15% —à–∞–Ω—Å)\n"
        f"‚Ä¢ 200 ‚úØ (10% —à–∞–Ω—Å)\n\n"
        f"üé∞ –ì–æ—Ç–æ–≤—ñ –∫—Ä—É—Ç–∏—Ç–∏?"
    )
    
    kb = InlineKeyboardMarkup()
    if user_coins >= 50:
        kb.add(InlineKeyboardButton("üí∞ –ö—Ä—É—Ç–∏—Ç–∏ (50 ‚úØ)", callback_data="normal_roulette_spin"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_roulettes"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'normal_roulette_spin')
async def cb_normal_roulette_spin(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    if get_user_coins(user_id) < 50:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    cursor.execute("UPDATE players SET coins = coins - 50 WHERE user_id = ?", (user_id,))
    
    r = random.random()
    if r < 0.30:
        win = 10
    elif r < 0.55:
        win = 25
    elif r < 0.75:
        win = 50
    elif r < 0.90:
        win = 100
    else:
        win = 200
    
    add_user_coins(user_id, win)
    update_daily_task(user_id, "spin_roulette")
    
    text = (
        f"üí∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏</b>\n\n"
        f"üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏: {win} ‚úØ!\n\n"
        f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üí∞ –ö—Ä—É—Ç–∏—Ç–∏ —â–µ", callback_data="normal_roulette_spin"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="roulette_normal"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'roulette_premium')
async def cb_roulette_premium(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    user_coins = get_user_coins(user_id)
    
    text = (
        f"üíé <b>–ü—Ä–µ–º—ñ—É–º —Ä—É–ª–µ—Ç–∫–∞</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üéØ –í–∞—Ä—Ç—ñ—Å—Ç—å: 500 ‚úØ\n\n"
        f"üèÜ <b>–ú–æ–∂–ª–∏–≤—ñ –≤–∏–≥—Ä–∞—à—ñ:</b>\n"
    )
    
    for multiplier in PremiumRoulette.MULTIPLIERS:
        if 'multiplier' in multiplier:
            text += f"‚Ä¢ x{multiplier['multiplier']} ({multiplier['probability']*100}%)\n"
        else:
            text += f"‚Ä¢ {multiplier['description']} ({multiplier['probability']*100}%)\n"
    
    text += f"\nüí° <b>–ü—Ä–∏–∫–ª–∞–¥:</b> –ü—Ä–∏ –±–∞–ª–∞–Ω—Å—ñ 1000 ‚úØ –º–æ–∂–Ω–∞ –≤–∏–≥—Ä–∞—Ç–∏ –¥–æ 10000 ‚úØ!"
    
    kb = InlineKeyboardMarkup()
    if user_coins >= 500:
        kb.add(InlineKeyboardButton("üíé –ö—Ä—É—Ç–∏—Ç–∏ (500 ‚úØ)", callback_data="premium_roulette_spin"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_roulettes"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'premium_roulette_spin')
async def cb_premium_roulette_spin(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    user_coins = get_user_coins(user_id)
    
    if user_coins < 500:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    cursor.execute("UPDATE players SET coins = coins - 500 WHERE user_id = ?", (user_id,))
    
    r = random.random()
    cumulative_probability = 0.0
    
    for multiplier in PremiumRoulette.MULTIPLIERS:
        cumulative_probability += multiplier['probability']
        if r <= cumulative_probability:
            if 'multiplier' in multiplier:
                win = user_coins * multiplier['multiplier']
                add_user_coins(user_id, win)
                result_text = f"üéâ <b>–î–ñ–ï–ö–ü–û–¢! x{multiplier['multiplier']}</b>\n–í–∏–≥—Ä–∞—à: {win} ‚úØ"
            elif multiplier['type'] == 'ticket':
                result_text = "üé´ <b>–ë—ñ–ª–µ—Ç –≤ –∑–≤–∏—á–∞–π–Ω—É —Ä—É–ª–µ—Ç–∫—É</b>\n–í–∏ –º–æ–∂–µ—Ç–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –ø–æ–∫—Ä—É—Ç–∏—Ç–∏ –∑–≤–∏—á–∞–π–Ω—É —Ä—É–ª–µ—Ç–∫—É!"
            else:
                result_text = "‚ùå <b>–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–≥—Ä–∞–Ω–æ</b>\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!"
            break
    
    conn.commit()
    
    text = (
        f"üíé <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–º—ñ—É–º —Ä—É–ª–µ—Ç–∫–∏</b>\n\n"
        f"{result_text}\n\n"
        f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üíé –ö—Ä—É—Ç–∏—Ç–∏ —â–µ", callback_data="premium_roulette_spin"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="roulette_premium"))
    
    await call.message.edit_text(text, reply_markup=kb)

# –î–æ–¥–∞–π —Ç–∞–∫–æ–∂ —Ü—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î:
def update_daily_task(user_id: int, task_type: str, increment: int = 1):
    today = datetime.now().date().isoformat()
    
    cursor.execute("SELECT id FROM daily_tasks WHERE user_id = ? AND task_date = ?", (user_id, today))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO daily_tasks (user_id, task_date) VALUES (?, ?)",
            (user_id, today)
        )
    
    if task_type == "spin_roulette":
        cursor.execute("UPDATE daily_tasks SET spin_roulette_count = spin_roulette_count + ? WHERE user_id = ? AND task_date = ?", 
                       (increment, user_id, today))
    elif task_type == "tap_count":
        cursor.execute("UPDATE daily_tasks SET tap_count = tap_count + ? WHERE user_id = ? AND task_date = ?", 
                       (increment, user_id, today))
    elif task_type == "play_minigames":
        cursor.execute("UPDATE daily_tasks SET play_minigames_count = play_minigames_count + ? WHERE user_id = ? AND task_date = ?", 
                       (increment, user_id, today))
    elif task_type == "correct_answers":
        cursor.execute("UPDATE daily_tasks SET correct_answers_count = correct_answers_count + ? WHERE user_id = ? AND task_date = ?", 
                       (increment, user_id, today))
    elif task_type == "buy_animals":
        cursor.execute("UPDATE daily_tasks SET tasks_completed = tasks_completed + ? WHERE user_id = ? AND task_date = ?", 
                       (increment, user_id, today))
    
    conn.commit()



# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
if __name__ == "__main__":
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä—É–ª–µ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    cursor.execute("SELECT COUNT(*) FROM item_roulette_prizes")
    if cursor.fetchone()[0] == 0:
        for prize in ItemRoulettePrizes.PRIZES:
            cursor.execute(
                "INSERT INTO item_roulette_prizes (name, price, probability, item_type) VALUES (?, ?, ?, ?)",
                (prize["name"], prize["price"], prize["probability"], prize["type"])
            )
        conn.commit()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    log.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        log.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
    finally:
        conn.close()
