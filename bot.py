import asyncio
import json
import random
import sqlite3
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional, List, Dict

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

# ========== –ö–û–ù–§–ò–ì ==========
BOT_TOKEN = "8259900558:AAHQVUzKQBtKF7N-Xp8smLmAiAf0Hu-hQHw"
XP_PER_LEVEL = 100
INACTIVE_DAYS = 7
DB_PATH = "data.db"
QUESTIONS_PATH = "questions.json"
DAILY_QUESTION_LIMIT = 10
# ============================

logging.basicConfig(level=logging.INFO, format="%(asynctime)s [%(levelname)s] %(message)s")
log = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
cursor.execute("""
CREATE TABLE IF NOT EXISTS players (
    user_id INTEGER PRIMARY KEY,
    username TEXT DEFAULT '',
    level INTEGER DEFAULT 1,
    xp INTEGER DEFAULT 0,
    coins INTEGER DEFAULT 0,
    last_play TEXT,
    correct_streak INTEGER DEFAULT 0,
    last_task_date TEXT DEFAULT '',
    daily_questions INTEGER DEFAULT 0,
    last_question_date TEXT DEFAULT '',
    prefix TEXT DEFAULT '',
    role TEXT DEFAULT '',
    pvp_rating INTEGER DEFAULT 1000,
    pvp_wins INTEGER DEFAULT 0,
    pvp_losses INTEGER DEFAULT 0,
    language TEXT DEFAULT 'ru'
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_friends (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    friend_id INTEGER,
    friend_username TEXT,
    added_date TEXT,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_real_estate (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    estate_type TEXT,
    purchase_price INTEGER,
    purchase_date TEXT,
    income_per_hour INTEGER,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS pvp_duels (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    player1_id INTEGER,
    player2_id INTEGER,
    winner_id INTEGER,
    bet_amount INTEGER,
    duel_date TEXT,
    FOREIGN KEY (player1_id) REFERENCES players (user_id),
    FOREIGN KEY (player2_id) REFERENCES players (user_id)
)
""")

# –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
cursor.execute("""
CREATE TABLE IF NOT EXISTS roulette_prizes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    prize_type TEXT NOT NULL,
    value INTEGER NOT NULL,
    probability REAL NOT NULL
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS roulette_spins (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    prize_id INTEGER NOT NULL,
    spin_date TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES players (user_id),
    FOREIGN KEY (prize_id) REFERENCES roulette_prizes (id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_farm (
    user_id INTEGER PRIMARY KEY,
    animals INTEGER DEFAULT 0,
    last_collect_time TEXT,
    total_earned INTEGER DEFAULT 0
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_tap_boost (
    user_id INTEGER PRIMARY KEY,
    boost_level INTEGER DEFAULT 1,
    tap_income REAL DEFAULT 1.24,
    total_taps INTEGER DEFAULT 0,
    total_earned INTEGER DEFAULT 0
)
""")
conn.commit()

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø 2.1.0 ==========
class Prefixes:
    BOSS = {"name": "–ë–æ—Å—Å", "price": 350}
    FAT = {"name": "–¢–æ–ª—Å—Ç—É–Ω", "price": 320}
    PROGRAMMER = {"name": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "price": 560}
    LEGEND = {"name": "–õ–µ–≥–µ–Ω–¥–∞", "price": 720}
    EMPEROR = {"name": "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "price": 1300}
    ASSASSIN = {"name": "–ê—Å—Å–∞—Å–∏–Ω", "price": 2200}
    OVERSEER = {"name": "–ù–∞–¥–∑–∏—Ä–∞—Ç–µ–ª—å", "price": 4500}
    
    ALL_PREFIXES = [BOSS, FAT, PROGRAMMER, LEGEND, EMPEROR, ASSASSIN, OVERSEER]

class Roles:
    FARMER = {"name": "–§–µ—Ä–º–µ—Ä", "price": 500, "bonus": "farm_income"}
    SMART = {"name": "–£–º–Ω–∏–∫", "price": 800, "bonus": "question_limit"}
    TAPPER = {"name": "–î—Ä–æ—á–µ—Ä", "price": 600, "bonus": "tap_income"}
    
    ALL_ROLES = [FARMER, SMART, TAPPER]

class RealEstate:
    SMALL_HOUSE = {"name": "üè† –ú–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–º", "price": 2000, "income": 125}
    APARTMENT = {"name": "üè° –ö–≤–∞—Ä—Ç–∏—Ä–∞", "price": 4500, "income": 300}
    TOWNHOUSE = {"name": "üèòÔ∏è –¢–∞—É–Ω—Ö–∞—É—Å", "price": 8000, "income": 600}
    OFFICE = {"name": "üè¢ –û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ", "price": 12000, "income": 950}
    BUSINESS_CENTER = {"name": "üèõÔ∏è –ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä", "price": 17000, "income": 1400}
    
    ALL_ESTATES = [SMALL_HOUSE, APARTMENT, TOWNHOUSE, OFFICE, BUSINESS_CENTER]

class Languages:
    RU = "ru"
    UA = "ua"
    EN = "en"

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    "ru": {
        "main_menu": "üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "profile": "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
        "play": "üéØ –ò–≥—Ä–∞—Ç—å",
        "roulette": "üé∞ –†—É–ª–µ—Ç–∫–∞", 
        "income": "üí∞ –î–æ—Ö–æ–¥—ã",
        "leaderboard": "üèÜ –õ–∏–¥–µ—Ä—ã",
        "tasks": "üìÖ –ó–∞–¥–∞–Ω–∏—è",
        "shop": "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω",
        "friends": "üë• –î—Ä—É–∑—å—è",
        "pvp": "‚öîÔ∏è PvP –ê—Ä–µ–Ω–∞",
        "real_estate": "üèòÔ∏è –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
    },
    "ua": {
        "main_menu": "üéÆ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        "profile": "üë§ –ü—Ä–æ—Ñ—ñ–ª—å", 
        "play": "üéØ –ì—Ä–∞—Ç–∏",
        "roulette": "üé∞ –†—É–ª–µ—Ç–∫–∞",
        "income": "üí∞ –î–æ—Ö–æ–¥–∏",
        "leaderboard": "üèÜ –õ—ñ–¥–µ—Ä–∏",
        "tasks": "üìÖ –ó–∞–≤–¥–∞–Ω–Ω—è",
        "shop": "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω",
        "friends": "üë• –î—Ä—É–∑—ñ",
        "pvp": "‚öîÔ∏è PvP –ê—Ä–µ–Ω–∞",
        "real_estate": "üèòÔ∏è –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å"
    },
    "en": {
        "main_menu": "üéÆ Main Menu",
        "profile": "üë§ Profile",
        "play": "üéØ Play", 
        "roulette": "üé∞ Roulette",
        "income": "üí∞ Income",
        "leaderboard": "üèÜ Leaders",
        "tasks": "üìÖ Tasks",
        "shop": "üõçÔ∏è Shop",
        "friends": "üë• Friends",
        "pvp": "‚öîÔ∏è PvP Arena",
        "real_estate": "üèòÔ∏è Real Estate"
    }
}

# ========== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–õ–ê–°–°–´ –ò –§–£–ù–ö–¶–ò–ò ==========
# [–ó–¥–µ—Å—å –≤–µ—Å—å –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∫–ª–∞—Å—Å–æ–≤ Roulette, FarmManager, TapGame, Shop...]
# –Ø —Å–æ—Ö—Ä–∞–Ω—è—é –≤—Å–µ –≤–∞—à–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–æ –¥–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–µ

class Roulette:
    def __init__(self):
        self.cost = 4000
        self.prizes = []
        self._load_prizes()
    
    def _load_prizes(self):
        cursor.execute("SELECT id, name, prize_type, value, probability FROM roulette_prizes")
        prizes_data = cursor.fetchall()
        
        if not prizes_data:
            self._create_default_prizes()
            cursor.execute("SELECT id, name, prize_type, value, probability FROM roulette_prizes")
            prizes_data = cursor.fetchall()
        
        for prize_id, name, prize_type, value, probability in prizes_data:
            self.prizes.append({
                'id': prize_id,
                'name': name,
                'type': prize_type,
                'value': value,
                'probability': probability
            })
    
    def _create_default_prizes(self):
        default_prizes = [
            ("üéØ –î–∂–µ–∫–ø–æ—Ç!", "jackpot", 10000, 0.02),
            ("üí∞ –ë–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à", "coins", 5000, 0.05),
            ("üíµ –°—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à", "coins", 2000, 0.10),
            ("ü™ô –ú–∞–ª—ã–π –≤—ã–∏–≥—Ä—ã—à", "coins", 1000, 0.15),
            ("üé´ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω", "free_spin", 1, 0.20),
            ("‚≠ê –û–ø—ã—Ç", "experience", 200, 0.25),
            ("üîÆ –ù–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–∑", "coins", 500, 0.23)
        ]
        
        for name, prize_type, value, probability in default_prizes:
            cursor.execute(
                "INSERT INTO roulette_prizes (name, prize_type, value, probability) VALUES (?, ?, ?, ?)",
                (name, prize_type, value, probability)
            )
        conn.commit()
    
    def spin(self):
        r = random.random()
        cumulative_probability = 0.0
        
        for prize in self.prizes:
            cumulative_probability += prize['probability']
            if r <= cumulative_probability:
                return prize
        
        return self.prizes[-1]

roulette = Roulette()

class FarmManager:
    @staticmethod
    def get_animal_income(animals_count: int, role_bonus: bool = False) -> float:
        base_income = animals_count * 11.25
        if role_bonus:
            base_income *= 1.05  # +5% –±–æ–Ω—É—Å —Ñ–µ—Ä–º–µ—Ä–∞
        return base_income
    
    @staticmethod
    def calculate_earnings(animals_count: int, hours_passed: float, role_bonus: bool = False) -> int:
        income_per_hour = FarmManager.get_animal_income(animals_count, role_bonus)
        return int(income_per_hour * hours_passed)

class TapGame:
    BOOST_LEVELS = {
        1: {"income": 1.24, "price": 0},
        2: {"income": 1.89, "price": 322},
        3: {"income": 2.00, "price": 422},
        4: {"income": 2.11, "price": 490},
        5: {"income": 2.65, "price": 530},
        6: {"income": 3.00, "price": 600}
    }
    
    @staticmethod
    def get_next_boost_level(current_level: int) -> dict:
        next_level = current_level + 1
        if next_level in TapGame.BOOST_LEVELS:
            return {
                "level": next_level,
                "income": TapGame.BOOST_LEVELS[next_level]["income"],
                "price": TapGame.BOOST_LEVELS[next_level]["price"]
            }
        return None

class Shop:
    ANIMAL_PRICE = 300
    MAX_ANIMALS = 10

# ========== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø 2.1.0 ==========
def get_user_language(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cursor.execute("SELECT language FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else "ru"

def get_text(key: str, user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = get_user_language(user_id)
    return TEXTS.get(lang, {}).get(key, key)

def ensure_player(user_id: int, username: Optional[str]):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
    cursor.execute("SELECT user_id FROM players WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            """INSERT INTO players 
            (user_id, username, last_play, level, xp, coins, correct_streak, 
             last_task_date, daily_questions, last_question_date, prefix, role, language) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (user_id, username or "", datetime.now().isoformat(), 1, 0, 0, 0, "", 0, "", "", "", "ru")
        )
        conn.commit()
        log.info(f"Created new player: {user_id} ({username})")
    else:
        cursor.execute("UPDATE players SET username = ? WHERE user_id = ?", (username or "", user_id))
        conn.commit()

def get_user_prefix(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cursor.execute("SELECT prefix FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else ""

def get_user_role(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cursor.execute("SELECT role FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else ""

def get_user_real_estate(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cursor.execute(
        "SELECT estate_type, purchase_price, income_per_hour FROM user_real_estate WHERE user_id = ?",
        (user_id,)
    )
    estates = []
    for estate_type, price, income in cursor.fetchall():
        estates.append({
            "type": estate_type,
            "price": price,
            "income": income
        })
    return estates

def get_total_real_estate_income(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    estates = get_user_real_estate(user_id)
    return sum(estate["income"] for estate in estates)

def buy_prefix(user_id: int, prefix_name: str) -> bool:
    """–ö—É–ø–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å"""
    prefix_data = next((p for p in Prefixes.ALL_PREFIXES if p["name"] == prefix_name), None)
    if not prefix_data:
        return False
    
    user_coins = get_user_coins(user_id)
    if user_coins < prefix_data["price"]:
        return False
    
    cursor.execute("UPDATE players SET coins = coins - ?, prefix = ? WHERE user_id = ?",
                   (prefix_data["price"], prefix_name, user_id))
    conn.commit()
    return True

def buy_role(user_id: int, role_name: str) -> bool:
    """–ö—É–ø–∏—Ç—å —Ä–æ–ª—å"""
    role_data = next((r for r in Roles.ALL_ROLES if r["name"] == role_name), None)
    if not role_data:
        return False
    
    user_coins = get_user_coins(user_id)
    if user_coins < role_data["price"]:
        return False
    
    cursor.execute("UPDATE players SET coins = coins - ?, role = ? WHERE user_id = ?",
                   (role_data["price"], role_name, user_id))
    conn.commit()
    return True

def buy_real_estate(user_id: int, estate_type: str) -> bool:
    """–ö—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"""
    estate_data = next((e for e in RealEstate.ALL_ESTATES if e["name"] == estate_type), None)
    if not estate_data:
        return False
    
    user_coins = get_user_coins(user_id)
    if user_coins < estate_data["price"]:
        return False
    
    cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?",
                   (estate_data["price"], user_id))
    
    cursor.execute(
        """INSERT INTO user_real_estate 
        (user_id, estate_type, purchase_price, purchase_date, income_per_hour) 
        VALUES (?, ?, ?, ?, ?)""",
        (user_id, estate_type, estate_data["price"], datetime.now().isoformat(), estate_data["income"])
    )
    conn.commit()
    return True

def get_user_friends(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π"""
    cursor.execute(
        """SELECT f.friend_id, f.friend_username, p.level, p.prefix, p.role 
        FROM user_friends f 
        LEFT JOIN players p ON f.friend_id = p.user_id 
        WHERE f.user_id = ?""",
        (user_id,)
    )
    friends = []
    for friend_id, username, level, prefix, role in cursor.fetchall():
        friends.append({
            "id": friend_id,
            "username": username,
            "level": level or 1,
            "prefix": prefix or "",
            "role": role or ""
        })
    return friends

def add_friend(user_id: int, friend_id: int, friend_username: str) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
    cursor.execute("SELECT id FROM user_friends WHERE user_id = ? AND friend_id = ?", (user_id, friend_id))
    if cursor.fetchone():
        return False
    
    cursor.execute(
        "INSERT INTO user_friends (user_id, friend_id, friend_username, added_date) VALUES (?, ?, ?, ?)",
        (user_id, friend_id, friend_username, datetime.now().isoformat())
    )
    conn.commit()
    return True

def get_user_inventory(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    prefix = get_user_prefix(user_id)
    role = get_user_role(user_id)
    estates = get_user_real_estate(user_id)
    
    return {
        "prefix": prefix,
        "role": role,
        "real_estate": estates,
        "total_estate_income": get_total_real_estate_income(user_id),
        "estate_count": len(estates)
    }

# ========== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def build_main_menu(user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    lang = get_user_language(user_id)
    kb = InlineKeyboardMarkup(row_width=2)
    
    texts = TEXTS[lang]
    
    kb.add(
        InlineKeyboardButton(texts["play"], callback_data="menu_play"),
        InlineKeyboardButton(texts["profile"], callback_data="menu_profile"),
        InlineKeyboardButton(texts["roulette"], callback_data="menu_roulette"),
        InlineKeyboardButton(texts["income"], callback_data="menu_income"),
        InlineKeyboardButton(texts["leaderboard"], callback_data="menu_leaderboard"),
        InlineKeyboardButton(texts["pvp"], callback_data="menu_pvp"),
        InlineKeyboardButton(texts["friends"], callback_data="menu_friends"),
        InlineKeyboardButton(texts["real_estate"], callback_data="menu_real_estate"),
        InlineKeyboardButton(texts["shop"], callback_data="menu_shop"),
        InlineKeyboardButton(texts["tasks"], callback_data="menu_tasks")
    )
    return kb

def build_shop_menu():
    """–ú–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üè∑Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å—ã", callback_data="shop_prefixes"),
        InlineKeyboardButton("üé≠ –†–æ–ª–∏", callback_data="shop_roles"),
        InlineKeyboardButton("üèòÔ∏è –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", callback_data="shop_real_estate"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
    )
    return kb

def build_friends_menu(user_id: int):
    """–ú–µ–Ω—é –¥—Ä—É–∑–µ–π"""
    friends = get_user_friends(user_id)
    kb = InlineKeyboardMarkup(row_width=1)
    
    if friends:
        for friend in friends[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 –¥—Ä—É–∑–µ–π
            display_name = f"{friend['prefix']} {friend['username']}" if friend['prefix'] else friend['username']
            kb.add(InlineKeyboardButton(
                f"üë§ {display_name} (–£—Ä. {friend['level']})", 
                callback_data=f"friend_view_{friend['id']}"
            ))
    
    kb.add(
        InlineKeyboardButton("üîç –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="friends_add"),
        InlineKeyboardButton("üìä –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π", callback_data="friends_list"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
    )
    return kb

def build_pvp_menu():
    """–ú–µ–Ω—é PvP"""
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("‚öîÔ∏è –ë—ã—Å—Ç—Ä–∞—è –¥—É—ç–ª—å", callback_data="pvp_quick"),
        InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π –±–æ–π", callback_data="pvp_rated"),
        InlineKeyboardButton("üë• –í—ã–∑–æ–≤ –¥—Ä—É–≥–∞", callback_data="pvp_friend"),
        InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="pvp_stats"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
    )
    return kb

# ========== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def format_profile_row(user_row, user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏ —Ä–æ–ª—å—é"""
    if not user_row:
        return "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    if len(user_row) >= 6:
        level, xp, coins, last_play, streak, daily_questions = user_row[:6]
    else:
        level, xp, coins, last_play, streak = user_row
        daily_questions = 0
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ None –∑–Ω–∞—á–µ–Ω–∏—è
    if level is None: level = 1
    if xp is None: xp = 0
    if coins is None: coins = 0
    if streak is None: streak = 0
    if daily_questions is None: daily_questions = 0
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ —Ä–æ–ª—å
    prefix = get_user_prefix(user_id)
    role = get_user_role(user_id)
    total_estate_income = get_total_real_estate_income(user_id)
    
    try:
        lp = datetime.fromisoformat(last_play).strftime("%d.%m.%Y %H:%M") if last_play else "‚Äî"
    except Exception:
        lp = last_play or "‚Äî"
    
    profile_text = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    
    if prefix:
        profile_text += f"üè∑Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å: <b>[{prefix}]</b>\n"
    if role:
        profile_text += f"üé≠ –†–æ–ª—å: <b>{role}</b>\n"
    
    profile_text += (
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å: <b>{level}</b>\n"
        f"‚ú® –û–ø—ã—Ç: <b>{xp}/{XP_PER_LEVEL}</b>\n"
        f"üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{coins} ‚úØ</b>\n"
    )
    
    if total_estate_income > 0:
        profile_text += f"üèòÔ∏è –î–æ—Ö–æ–¥ –æ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: <b>{total_estate_income} ‚úØ/—á–∞—Å</b>\n"
    
    profile_text += (
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: <b>{lp}</b>\n"
        f"üî• –°–µ—Ä–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {streak}\n"
        f"üéØ –í–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {daily_questions}/{DAILY_QUESTION_LIMIT}"
    )
    
    return profile_text

def get_user_coins(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cursor.execute("SELECT coins FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

# ========== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò ==========
# [–ó–¥–µ—Å—å –≤—Å–µ –≤–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ensure_player, update_last_play, cleanup_inactive_players –∏ —Ç.–¥.]
# –Ø —Å–æ—Ö—Ä–∞–Ω—è—é –∏—Ö, –Ω–æ –¥–æ–±–∞–≤–ª—è—é –≤—ã–∑–æ–≤—ã ensure_player –≥–¥–µ –Ω—É–∂–Ω–æ

# ========== –ù–û–í–´–ï –•–ï–ù–î–õ–ï–†–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø 2.1.0 ==========
@dp.callback_query_handler(lambda c: c.data == "menu_shop")
async def cb_menu_shop(call: types.CallbackQuery):
    """–ú–∞–≥–∞–∑–∏–Ω"""
    await call.answer()
    ensure_player(call.from_user.id, call.from_user.username or call.from_user.full_name)
    
    user_coins = get_user_coins(call.from_user.id)
    text = f"üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω</b>\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user_coins} ‚úØ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    
    await call.message.edit_text(text, reply_markup=build_shop_menu())

@dp.callback_query_handler(lambda c: c.data == "shop_prefixes")
async def cb_shop_prefixes(call: types.CallbackQuery):
    """–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤"""
    await call.answer()
    user_id = call.from_user.id
    user_coins = get_user_coins(user_id)
    current_prefix = get_user_prefix(user_id)
    
    text = f"üè∑Ô∏è <b>–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤</b>\n\nüíµ –ë–∞–ª–∞–Ω—Å: <b>{user_coins} ‚úØ</b>\n"
    text += f"üìå –¢–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å: <b>{current_prefix if current_prefix else '–ù–µ—Ç'}</b>\n\n"
    
    kb = InlineKeyboardMarkup(row_width=1)
    for prefix in Prefixes.ALL_PREFIXES:
        if user_coins >= prefix["price"]:
            kb.add(InlineKeyboardButton(
                f"[{prefix['name']}] - {prefix['price']} ‚úØ", 
                callback_data=f"buy_prefix_{prefix['name']}"
            ))
        else:
            kb.add(InlineKeyboardButton(
                f"[{prefix['name']}] - {prefix['price']} ‚úØ ‚ùå", 
                callback_data="not_enough_coins"
            ))
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_shop"))
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("buy_prefix_"))
async def cb_buy_prefix(call: types.CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞"""
    await call.answer()
    user_id = call.from_user.id
    prefix_name = call.data.replace("buy_prefix_", "")
    
    if buy_prefix(user_id, prefix_name):
        await call.answer(f"‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å [{prefix_name}] –∫—É–ø–ª–µ–Ω!", show_alert=True)
        await cb_shop_prefixes(call)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    else:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "shop_roles")
async def cb_shop_roles(call: types.CallbackQuery):
    """–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π"""
    await call.answer()
    user_id = call.from_user.id
    user_coins = get_user_coins(user_id)
    current_role = get_user_role(user_id)
    
    text = f"üé≠ <b>–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π</b>\n\nüíµ –ë–∞–ª–∞–Ω—Å: <b>{user_coins} ‚úØ</b>\n"
    text += f"üéØ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: <b>{current_role if current_role else '–ù–µ—Ç'}</b>\n\n"
    
    # –û–ø–∏—Å–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
    bonuses = {
        "–§–µ—Ä–º–µ—Ä": "+5% –∫ –¥–æ—Ö–æ–¥—É —Ñ–µ—Ä–º—ã",
        "–£–º–Ω–∏–∫": "–õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤: 15 ‚Üí 25/–¥–µ–Ω—å", 
        "–î—Ä–æ—á–µ—Ä": "+2% –∫ –¥–æ—Ö–æ–¥—É –∑–∞ —Ç–∞–ø"
    }
    
    kb = InlineKeyboardMarkup(row_width=1)
    for role in Roles.ALL_ROLES:
        bonus_text = bonuses.get(role["name"], "")
        if user_coins >= role["price"]:
            kb.add(InlineKeyboardButton(
                f"{role['name']} - {role['price']} ‚úØ\n{bonus_text}", 
                callback_data=f"buy_role_{role['name']}"
            ))
        else:
            kb.add(InlineKeyboardButton(
                f"{role['name']} - {role['price']} ‚úØ ‚ùå\n{bonus_text}", 
                callback_data="not_enough_coins"
            ))
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_shop"))
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("buy_role_"))
async def cb_buy_role(call: types.CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ —Ä–æ–ª–∏"""
    await call.answer()
    user_id = call.from_user.id
    role_name = call.data.replace("buy_role_", "")
    
    if buy_role(user_id, role_name):
        await call.answer(f"‚úÖ –†–æ–ª—å {role_name} –∫—É–ø–ª–µ–Ω–∞!", show_alert=True)
        await cb_shop_roles(call)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    else:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "shop_real_estate")
async def cb_shop_real_estate(call: types.CallbackQuery):
    """–ú–∞–≥–∞–∑–∏–Ω –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    await call.answer()
    user_id = call.from_user.id
    user_coins = get_user_coins(user_id)
    user_estates = get_user_real_estate(user_id)
    
    text = f"üèòÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</b>\n\nüíµ –ë–∞–ª–∞–Ω—Å: <b>{user_coins} ‚úØ</b>\n"
    text += f"üè† –í–∞—à–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å: <b>{len(user_estates)} –æ–±—ä–µ–∫—Ç–æ–≤</b>\n"
    text += f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{get_total_real_estate_income(user_id)} ‚úØ/—á–∞—Å</b>\n\n"
    
    kb = InlineKeyboardMarkup(row_width=1)
    for estate in RealEstate.ALL_ESTATES:
        payback_time = estate["price"] / estate["income"]
        if user_coins >= estate["price"]:
            kb.add(InlineKeyboardButton(
                f"{estate['name']} - {estate['price']} ‚úØ\n–î–æ—Ö–æ–¥: {estate['income']} ‚úØ/—á–∞—Å (–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {payback_time:.1f}—á)", 
                callback_data=f"buy_estate_{estate['name']}"
            ))
        else:
            kb.add(InlineKeyboardButton(
                f"{estate['name']} - {estate['price']} ‚úØ ‚ùå\n–î–æ—Ö–æ–¥: {estate['income']} ‚úØ/—á–∞—Å", 
                callback_data="not_enough_coins"
            ))
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_shop"))
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("buy_estate_"))
async def cb_buy_estate(call: types.CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    await call.answer()
    user_id = call.from_user.id
    estate_name = call.data.replace("buy_estate_", "")
    
    if buy_real_estate(user_id, estate_name):
        await call.answer(f"‚úÖ {estate_name} –∫—É–ø–ª–µ–Ω!", show_alert=True)
        await cb_shop_real_estate(call)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    else:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "menu_friends")
async def cb_menu_friends(call: types.CallbackQuery):
    """–ú–µ–Ω—é –¥—Ä—É–∑–µ–π"""
    await call.answer()
    ensure_player(call.from_user.id, call.from_user.username or call.from_user.full_name)
    
    friends = get_user_friends(call.from_user.id)
    text = f"üë• <b>–î—Ä—É–∑—å—è</b>\n\nüìä –í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: <b>{len(friends)}</b>\n\n"
    
    if friends:
        text += "<b>–ù–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ:</b>\n"
        for friend in friends[:3]:
            display_name = f"{friend['prefix']} {friend['username']}" if friend['prefix'] else friend['username']
            text += f"‚Ä¢ {display_name} (–£—Ä. {friend['level']})\n"
    
    await call.message.edit_text(text, reply_markup=build_friends_menu(call.from_user.id))

@dp.callback_query_handler(lambda c: c.data == "friends_add")
async def cb_friends_add(call: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞"""
    await call.answer()
    text = (
        "üîç <b>–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞</b>\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞, –≤–∞–º –Ω—É–∂–Ω–æ:\n"
        "1. –£–∑–Ω–∞—Ç—å –µ–≥–æ ID –≤ –±–æ—Ç–µ (/id)\n"
        "2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —Å–≤–æ–π ID\n"
        "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/addfriend ID_–¥—Ä—É–≥–∞</code>\n\n"
        "–í–∞—à ID: " + str(call.from_user.id)
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_friends"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("friend_view_"))
async def cb_friend_view(call: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–∞"""
    await call.answer()
    friend_id = int(call.data.replace("friend_view_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∞
    cursor.execute(
        "SELECT level, xp, coins, last_play, correct_streak, daily_questions FROM players WHERE user_id = ?", 
        (friend_id,)
    )
    friend_data = cursor.fetchone()
    
    if not friend_data:
        await call.answer("‚ùå –î—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥—Ä—É–≥–∞
    inventory = get_user_inventory(friend_id)
    
    text = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–∞</b>\n\n"
    
    if inventory["prefix"]:
        text += f"üè∑Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å: <b>[{inventory['prefix']}]</b>\n"
    if inventory["role"]:
        text += f"üé≠ –†–æ–ª—å: <b>{inventory['role']}</b>\n"
    
    level, xp, coins, last_play, streak, daily_questions = friend_data
    text += (
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å: <b>{level}</b>\n"
        f"üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{coins} ‚úØ</b>\n"
        f"üèòÔ∏è –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å: <b>{inventory['estate_count']} –æ–±—ä–µ–∫—Ç–æ–≤</b>\n"
        f"üíµ –î–æ—Ö–æ–¥ –æ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: <b>{inventory['total_estate_income']} ‚úØ/—á–∞—Å</b>\n"
        f"üî• –°–µ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤: <b>{streak}</b>"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚öîÔ∏è –í—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å", callback_data=f"pvp_challenge_{friend_id}"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_friends"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "menu_pvp")
async def cb_menu_pvp(call: types.CallbackQuery):
    """–ú–µ–Ω—é PvP"""
    await call.answer()
    ensure_player(call.from_user.id, call.from_user.username or call.from_user.full_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É PvP
    cursor.execute(
        "SELECT pvp_rating, pvp_wins, pvp_losses FROM players WHERE user_id = ?", 
        (call.from_user.id,)
    )
    rating, wins, losses = cursor.fetchone() or (1000, 0, 0)
    
    total = wins + losses
    win_rate = (wins / total * 100) if total > 0 else 0
    
    text = (
        f"‚öîÔ∏è <b>PvP –ê—Ä–µ–Ω–∞</b>\n\n"
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üèÜ –†–µ–π—Ç–∏–Ω–≥: <b>{rating}</b>\n"
        f"‚úÖ –ü–æ–±–µ–¥: <b>{wins}</b>\n"
        f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: <b>{losses}</b>\n"
        f"üìà –í–∏–Ω—Ä–µ–π—Ç: <b>{win_rate:.1f}%</b>"
    )
    
    await call.message.edit_text(text, reply_markup=build_pvp_menu())

@dp.callback_query_handler(lambda c: c.data == "menu_real_estate")
async def cb_menu_real_estate(call: types.CallbackQuery):
    """–ú–µ–Ω—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    estates = get_user_real_estate(user_id)
    total_income = get_total_real_estate_income(user_id)
    
    text = f"üèòÔ∏è <b>–ú–æ—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</b>\n\n"
    text += f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{total_income} ‚úØ/—á–∞—Å</b>\n"
    text += f"üè† –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: <b>{len(estates)}</b>\n\n"
    
    if estates:
        text += "<b>–í–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã:</b>\n"
        for estate in estates:
            text += f"‚Ä¢ {estate['type']} - {estate['income']} ‚úØ/—á–∞—Å\n"
    else:
        text += "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\nüõçÔ∏è –ü–æ—Å–µ—Ç–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏!"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üõçÔ∏è –ö—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", callback_data="shop_real_estate"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "not_enough_coins")
async def cb_not_enough_coins(call: types.CallbackQuery):
    """–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"""
    await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", show_alert=True)

# ========== –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ ==========
@dp.message_handler(commands=["id"])
async def cmd_id(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = (
        f"üÜî <b>–í–∞—à ID:</b> <code>{message.from_user.id}</code>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è.\n"
        "–î—Ä—É–≥ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –∫–æ–º–∞–Ω–¥–æ–π:\n"
        f"<code>/addfriend {message.from_user.id}</code>"
    )
    await message.answer(text)

@dp.message_handler(commands=["addfriend"])
async def cmd_add_friend(message: types.Message):
    """–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞ –ø–æ ID"""
    try:
        if len(message.text.split()) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addfriend <ID_–¥—Ä—É–≥–∞>")
            return
        
        friend_id = int(message.text.split()[1])
        
        # –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è
        if friend_id == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫
        cursor.execute("SELECT username FROM players WHERE user_id = ?", (friend_id,))
        friend_data = cursor.fetchone()
        
        if not friend_data:
            await message.answer("‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        friend_username = friend_data[0] or f"–ò–≥—Ä–æ–∫ {friend_id}"
        
        if add_friend(message.from_user.id, friend_id, friend_username):
            await message.answer(f"‚úÖ –ò–≥—Ä–æ–∫ {friend_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è!")
        else:
            await message.answer("‚ùå –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ —É –≤–∞—Å –≤ –¥—Ä—É–∑—å—è—Ö!")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

@dp.message_handler(commands=["inventory"])
async def cmd_inventory(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
    ensure_player(message.from_user.id, message.from_user.username or message.from_user.full_name)
    inventory = get_user_inventory(message.from_user.id)
    
    text = "üéí <b>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</b>\n\n"
    
    if inventory["prefix"]:
        text += f"üè∑Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å: <b>[{inventory['prefix']}]</b>\n"
    else:
        text += "üè∑Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å: <b>–ù–µ—Ç</b>\n"
    
    if inventory["role"]:
        text += f"üé≠ –†–æ–ª—å: <b>{inventory['role']}</b>\n"
    else:
        text += "üé≠ –†–æ–ª—å: <b>–ù–µ—Ç</b>\n"
    
    text += f"\nüèòÔ∏è –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å: <b>{inventory['estate_count']} –æ–±—ä–µ–∫—Ç–æ–≤</b>\n"
    text += f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{inventory['total_estate_income']} ‚úØ/—á–∞—Å</b>\n"
    
    if inventory["real_estate"]:
        text += "\n<b>–í–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã:</b>\n"
        for estate in inventory["real_estate"]:
            text += f"‚Ä¢ {estate['type']}\n"
    
    await message.answer(text)

# ========== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –•–ï–ù–î–õ–ï–†–´ ==========
# [–ó–¥–µ—Å—å –≤—Å–µ –≤–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, –Ω–æ —è –æ–±–Ω–æ–≤–ª—è—é –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ]

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    cleanup_inactive_players()
    ensure_player(message.from_user.id, message.from_user.username or message.from_user.full_name)
    update_last_play(message.from_user.id)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! üéÆ\n\n"
        "‚ú® <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 2.1.0</b> ‚ú®\n"
        "‚Ä¢ üè∑Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å—ã –∏ —Ä–æ–ª–∏\n" 
        "‚Ä¢ üë• –°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑–µ–π\n"
        "‚Ä¢ ‚öîÔ∏è PvP –¥—É—ç–ª–∏\n"
        "‚Ä¢ üèòÔ∏è –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å\n"
        "‚Ä¢ üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:"
    )
    
    await message.answer(text, reply_markup=build_main_menu(message.from_user.id))

@dp.callback_query_handler(lambda c: c.data == "menu_profile")
async def cb_menu_profile(call: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
    await call.answer()
    ensure_player(call.from_user.id, call.from_user.username or call.from_user.full_name)
    update_last_play(call.from_user.id)
    
    cursor.execute(
        "SELECT level, xp, coins, last_play, correct_streak, daily_questions FROM players WHERE user_id = ?", 
        (call.from_user.id,)
    )
    user = cursor.fetchone()
    
    await call.message.edit_text(
        format_profile_row(user, call.from_user.id), 
        reply_markup=build_back_button("main")
    )

# ========== –ú–û–ò –î–û–ü–û–õ–ù–ï–ù–ò–Ø ==========
@dp.message_handler(commands=["language"])
async def cmd_language(message: types.Message):
    """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞"""
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_ua"), 
        InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en")
    )
    
    await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("lang_"))
async def cb_language(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    lang = call.data.replace("lang_", "")
    cursor.execute("UPDATE players SET language = ? WHERE user_id = ?", (lang, call.from_user.id))
    conn.commit()
    
    await call.answer("‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω!" if lang == "ru" else 
                     "‚úÖ Language changed!" if lang == "en" else 
                     "‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ!", show_alert=True)
    
    await call.message.edit_text(
        TEXTS[lang]["main_menu"], 
        reply_markup=build_main_menu(call.from_user.id)
    )

# ========== –§–û–ù ==========
async def periodic_cleanup():
    while True:
        try:
            cleanup_inactive_players()
        except Exception:
            log.exception("periodic_cleanup")
        await asyncio.sleep(60 * 60 * 24)

# ========== –°–¢–ê–†–¢ ==========
if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(periodic_cleanup())
    executor.start_polling(dp, skip_updates=True)
