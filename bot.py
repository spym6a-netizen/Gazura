# bot.py ‚Äî –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å –ª–∏–º–∏—Ç–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤, –¥—Ä—É–∑—å—è–º–∏ –∏ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π
import asyncio
import json
import random
import sqlite3
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

# ========== –ö–û–ù–§–ò–ì ==========
BOT_TOKEN = "8259900558:AAHQVUzKQBtKF7N-Xp8smLmAiAf0Hu-hQHw"
XP_PER_LEVEL = 100
INACTIVE_DAYS = 7
DB_PATH = "data.db"
QUESTIONS_PATH = "questions.json"
DAILY_QUESTION_LIMIT = 10  # –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
# ============================

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ========== –ë–î ==========
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ö–û–î - –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´
try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    cursor.execute("PRAGMA table_info(players)")
    existing_columns = [column[1] for column in cursor.fetchall()]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    if 'daily_questions' not in existing_columns:
        cursor.execute("ALTER TABLE players ADD COLUMN daily_questions INTEGER DEFAULT 0")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ daily_questions")
    
    if 'last_question_date' not in existing_columns:
        cursor.execute("ALTER TABLE players ADD COLUMN last_question_date TEXT DEFAULT ''")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ last_question_date")
    
    if 'last_task_date' not in existing_columns:
        cursor.execute("ALTER TABLE players ADD COLUMN last_task_date TEXT DEFAULT ''")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ last_task_date")
        
    conn.commit()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {e}")

# –ü–û–¢–û–ú –ò–î–ï–¢ –°–¢–ê–†–´–ô –ö–û–î –°–û–ó–î–ê–ù–ò–Ø –¢–ê–ë–õ–ò–¶
cursor.execute("""
CREATE TABLE IF NOT EXISTS players (
    user_id INTEGER PRIMARY KEY,
    username TEXT DEFAULT '',
    level INTEGER DEFAULT 1,
    xp INTEGER DEFAULT 0,
    coins INTEGER DEFAULT 0,
    last_play TEXT,
    correct_streak INTEGER DEFAULT 0,
    last_task_date TEXT DEFAULT '',
    daily_questions INTEGER DEFAULT 0,  -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è
    last_question_date TEXT DEFAULT ''  -- –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
)
""")

# –î–æ–¥–∞–π —Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
cursor.execute("""
CREATE TABLE IF NOT EXISTS roulette_prizes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    prize_type TEXT NOT NULL,
    value INTEGER NOT NULL,
    probability REAL NOT NULL
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS roulette_spins (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    prize_id INTEGER NOT NULL,
    spin_date TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES players (user_id),
    FOREIGN KEY (prize_id) REFERENCES roulette_prizes (id)
)
""")

# –î–æ–¥–∞–π —Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è —Ñ–µ—Ä–º–∏ —Ç–∞ tap game
cursor.execute("""
CREATE TABLE IF NOT EXISTS user_farm (
    user_id INTEGER PRIMARY KEY,
    animals INTEGER DEFAULT 0,
    last_collect_time TEXT,
    total_earned INTEGER DEFAULT 0
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_tap_boost (
    user_id INTEGER PRIMARY KEY,
    boost_level INTEGER DEFAULT 1,
    tap_income REAL DEFAULT 1.24,
    total_taps INTEGER DEFAULT 0,
    total_earned INTEGER DEFAULT 0
)
""")
conn.commit()

# ========== –í–û–ü–†–û–°–´ ==========
QUESTIONS: list = []
questions_file = Path(QUESTIONS_PATH)
if not questions_file.exists():
    log.warning(f"{QUESTIONS_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.")
else:
    try:
        with questions_file.open("r", encoding="utf-8") as f:
            QUESTIONS = json.load(f)
            if not isinstance(QUESTIONS, list):
                log.error("questions.json –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.")
                QUESTIONS = []
    except Exception:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å questions.json")
        QUESTIONS = []

# ========== –†–£–õ–ï–¢–ö–ê ==========
class RoulettePrizeType:
    COINS = "coins"
    FREE_SPIN = "free_spin"
    EXPERIENCE = "experience"
    JACKPOT = "jackpot"

class Roulette:
    def __init__(self):
        self.cost = 4000
        self.prizes = []
        self._load_prizes()
    
    def _load_prizes(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–∏–∑–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        cursor.execute("SELECT id, name, prize_type, value, probability FROM roulette_prizes")
        prizes_data = cursor.fetchall()
        
        if not prizes_data:
            # –Ø–∫—â–æ –ø—Ä–∏–∑—ñ–≤ –Ω–µ–º–∞—î - —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ
            self._create_default_prizes()
            cursor.execute("SELECT id, name, prize_type, value, probability FROM roulette_prizes")
            prizes_data = cursor.fetchall()
        
        for prize_id, name, prize_type, value, probability in prizes_data:
            self.prizes.append({
                'id': prize_id,
                'name': name,
                'type': prize_type,
                'value': value,
                'probability': probability
            })
    
    def _create_default_prizes(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø—Ä–∏–∑–∏"""
        default_prizes = [
            ("üéØ –î–∂–µ–∫–ø–æ—Ç!", RoulettePrizeType.JACKPOT, 10000, 0.02),      # 2%
            ("üí∞ –í–µ–ª–∏–∫–∏–π –≤—ã–∏–≥—Ä—ã—à", RoulettePrizeType.COINS, 5000, 0.05),   # 5%
            ("üíµ –°—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à", RoulettePrizeType.COINS, 2000, 0.10),  # 10%
            ("ü™ô –ú–∞–ª—ã–π –≤—ã–∏–≥—Ä—ã—à", RoulettePrizeType.COINS, 1000, 0.15),     # 15%
            ("üé´ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω", RoulettePrizeType.FREE_SPIN, 1, 0.20), # 20%
            ("‚≠ê –û–ø—ã—Ç", RoulettePrizeType.EXPERIENCE, 200, 0.25),       # 25%
            ("üîÆ –ù–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–∑", RoulettePrizeType.COINS, 500, 0.23)     # 23%
        ]
        
        for name, prize_type, value, probability in default_prizes:
            cursor.execute(
                "INSERT INTO roulette_prizes (name, prize_type, value, probability) VALUES (?, ?, ?, ?)",
                (name, prize_type, value, probability)
            )
        conn.commit()
    
    def spin(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ —Ä—É–ª–µ—Ç–∫—É"""
        r = random.random()
        cumulative_probability = 0.0
        
        for prize in self.prizes:
            cumulative_probability += prize['probability']
            if r <= cumulative_probability:
                return prize
        
        return self.prizes[-1]  # –ù–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–∏–∑

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Ä—É–ª–µ—Ç–∫–∏
roulette = Roulette()

# ========== –§–ï–†–ú–ê –Ü TAP GAME ==========
class FarmManager:
    @staticmethod
    def get_animal_income(animals_count: int) -> float:
        """–î–æ—Ö—ñ–¥ –∑–∞ –≥–æ–¥–∏–Ω—É –≤—ñ–¥ —Ç–≤–∞—Ä–∏–Ω"""
        return animals_count * 11.25
    
    @staticmethod
    def calculate_earnings(animals_count: int, hours_passed: float) -> int:
        """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–∏–π —á–∞—Å"""
        income_per_hour = FarmManager.get_animal_income(animals_count)
        return int(income_per_hour * hours_passed)

class TapGame:
    BOOST_LEVELS = {
        1: {"income": 1.24, "price": 0},
        2: {"income": 1.89, "price": 322},
        3: {"income": 2.00, "price": 422},
        4: {"income": 2.11, "price": 490},
        5: {"income": 2.65, "price": 530},
        6: {"income": 3.00, "price": 600}
    }
    
    @staticmethod
    def get_next_boost_level(current_level: int) -> dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –±—É—Å—Ç–∞"""
        next_level = current_level + 1
        if next_level in TapGame.BOOST_LEVELS:
            return {
                "level": next_level,
                "income": TapGame.BOOST_LEVELS[next_level]["income"],
                "price": TapGame.BOOST_LEVELS[next_level]["price"]
            }
        return None

class Shop:
    ANIMAL_PRICE = 300
    MAX_ANIMALS = 10

# ========== –§–£–ù–ö–¶–ò–ò ==========
def ensure_player(user_id: int, username: Optional[str]):
    cursor.execute("SELECT user_id FROM players WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO players (user_id, username, last_play, level, xp, coins, correct_streak, last_task_date, daily_questions, last_question_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, username or "", datetime.now().isoformat(), 1, 0, 0, 0, "", 0, "")
        )
        conn.commit()
        log.info(f"Created new player: {user_id} ({username})")
    else:
        # –û–Ω–æ–≤–∏—Ç–∏ username, —è–∫—â–æ –≤—ñ–Ω –∑–º—ñ–Ω–∏–≤—Å—è
        cursor.execute("UPDATE players SET username = ? WHERE user_id = ?", (username or "", user_id))
        conn.commit()

def update_last_play(user_id: int):
    cursor.execute("UPDATE players SET last_play = ? WHERE user_id = ?", (datetime.now().isoformat(), user_id))
    conn.commit()

def cleanup_inactive_players():
    now = datetime.now()
    cutoff = now - timedelta(days=INACTIVE_DAYS)
    cursor.execute("SELECT user_id, last_play FROM players")
    to_delete = []
    for uid, last_play in cursor.fetchall():
        if last_play:
            try:
                last_dt = datetime.fromisoformat(last_play)
            except Exception:
                last_dt = now - timedelta(days=INACTIVE_DAYS + 1)
            if last_dt < cutoff:
                to_delete.append(uid)
    for uid in to_delete:
        cursor.execute("DELETE FROM players WHERE user_id = ?", (uid,))
    if to_delete:
        conn.commit()
        log.info(f"Removed {len(to_delete)} inactive players")

def reset_daily_limits():
    """–°–∫–∏–¥–∞–Ω–Ω—è –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –ø–∏—Ç–∞–Ω—å –¥–ª—è –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤"""
    today = datetime.now().date()
    cursor.execute("SELECT user_id, last_question_date FROM players WHERE daily_questions > 0")
    for user_id, last_date_str in cursor.fetchall():
        if last_date_str:
            try:
                last_date = datetime.fromisoformat(last_date_str).date()
                if last_date != today:
                    cursor.execute("UPDATE players SET daily_questions = 0 WHERE user_id = ?", (user_id,))
            except:
                cursor.execute("UPDATE players SET daily_questions = 0 WHERE user_id = ?", (user_id,))
    conn.commit()

def can_answer_questions(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –º–æ–∂–µ –≥—Ä–∞–≤–µ—Ü—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è"""
    today = datetime.now().date()
    cursor.execute("SELECT daily_questions, last_question_date FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if not result:
        return True
    
    daily_questions, last_date_str = result
    if last_date_str:
        try:
            last_date = datetime.fromisoformat(last_date_str).date()
            if last_date != today:
                # –ù–æ–≤–∏–π –¥–µ–Ω—å - —Å–∫–∏–¥–∞—î–º–æ –ª—ñ–º—ñ—Ç
                cursor.execute("UPDATE players SET daily_questions = 0 WHERE user_id = ?", (user_id,))
                conn.commit()
                return True
        except:
            pass
    
    return daily_questions < DAILY_QUESTION_LIMIT

def increment_question_count(user_id: int):
    """–ó–±—ñ–ª—å—à–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–∏—Ç–∞–Ω—å"""
    cursor.execute("UPDATE players SET daily_questions = daily_questions + 1, last_question_date = ? WHERE user_id = ?", 
                   (datetime.now().isoformat(), user_id))
    conn.commit()

def add_xp_and_reward(user_id: int, xp_gain: int, coins_gain: int = 0):
    ensure_player(user_id, "")
    cursor.execute("SELECT level, xp, coins, correct_streak FROM players WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row:
        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ), —Å–æ–∑–¥–∞–µ–º —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        return 1, xp_gain, coins_gain, 0
    
    level, xp, coins, streak = row
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ None –∑–Ω–∞—á–µ–Ω–∏—è
    if xp is None:
        xp = 0
    if coins is None:
        coins = 0
    if level is None:
        level = 1
    if streak is None:
        streak = 0
    
    xp += xp_gain
    leveled = 0
    while xp >= XP_PER_LEVEL:
        xp -= XP_PER_LEVEL
        level += 1
        leveled += 1
    coins += coins_gain
    
    cursor.execute(
        "UPDATE players SET level = ?, xp = ?, coins = ? WHERE user_id = ?",
        (level, xp, coins, user_id)
    )
    conn.commit()
    return level, xp, coins, leveled

def build_main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üéØ –ò–≥—Ä–∞—Ç—å", callback_data="menu_play"),
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile"),
        InlineKeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∞", callback_data="menu_roulette"),
        InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥—ã", callback_data="menu_income"),
        InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="menu_leaderboard"),
        InlineKeyboardButton("üìÖ –ó–∞–¥–∞–Ω–∏—è –¥–Ω—è", callback_data="menu_tasks")
    )
    return kb

def build_back_button(dest="main"):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"menu_back|{dest}"))
    return kb

def format_profile_row(user_row):
    if not user_row:
        return "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏ /start"
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: —Ç–µ–ø–µ—Ä—å 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ 5
    if len(user_row) == 6:
        level, xp, coins, last_play, streak, daily_questions = user_row
    else:
        # –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        level, xp, coins, last_play, streak = user_row
        daily_questions = 0
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ None –∑–Ω–∞—á–µ–Ω–∏—è
    if level is None: level = 1
    if xp is None: xp = 0
    if coins is None: coins = 0
    if streak is None: streak = 0
    if daily_questions is None: daily_questions = 0
    
    try:
        lp = datetime.fromisoformat(last_play).strftime("%d.%m.%Y %H:%M") if last_play else "‚Äî"
    except Exception:
        lp = last_play or "‚Äî"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É —Å —Å–∏–º–≤–æ–ª–æ–º ‚úØ
    coins_formatted = f"{coins} ‚úØ"
    
    return (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å: <b>{level}</b>\n"
        f"‚ú® –û–ø—ã—Ç: <b>{xp}/{XP_PER_LEVEL}</b>\n"
        f"üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{coins_formatted}</b>\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: <b>{lp}</b>\n"
        f"üî• –°–µ—Ä–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {streak}\n"
        f"üéØ –í–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {daily_questions}/{DAILY_QUESTION_LIMIT}"
    )

async def send_random_question(chat_id: int, user_id: int, edit_message: Optional[types.Message] = None):
    if not QUESTIONS:
        text = "‚ùó –í–æ–ø—Ä–æ—Å—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        if edit_message:
            await edit_message.edit_text(text)
        else:
            await bot.send_message(chat_id, text)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    if not can_answer_questions(user_id):
        text = (
            f"‚ùå <b>–õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>\n\n"
            f"–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {DAILY_QUESTION_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è.\n"
            f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤! üéØ"
        )
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back|main"))
        
        if edit_message:
            await edit_message.edit_text(text, reply_markup=kb)
        else:
            await bot.send_message(chat_id, text, reply_markup=kb)
        return

    q_index = random.randrange(len(QUESTIONS))
    q = QUESTIONS[q_index]
    qtext = f"‚ùì <b>{q['question']}</b>\n\n"
    for i, opt in enumerate(q["options"], start=1):
        qtext += f"{i}. {opt}\n"

    kb = InlineKeyboardMarkup(row_width=2)
    for i, _opt in enumerate(q["options"], start=1):
        kb.add(InlineKeyboardButton(str(i), callback_data=f"ans|{i}|{q_index}"))

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ –∑–Ω–∞—é"
    kb.add(InlineKeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é", callback_data=f"ans|0|{q_index}"))
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"
    kb.add(InlineKeyboardButton("üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back|main"))

    if edit_message:
        await edit_message.edit_text(qtext, reply_markup=kb)
    else:
        await bot.send_message(chat_id, qtext, reply_markup=kb)

# ========== –§–£–ù–ö–¶–ò–ò –†–£–õ–ï–¢–ö–ò ==========
def can_spin_roulette(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫—Ä—É—Ç–∏—Ç–∏ —Ä—É–ª–µ—Ç–∫—É"""
    cursor.execute("SELECT coins FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        return False
    coins = result[0]
    return coins >= 4000

def charge_roulette_cost(user_id: int) -> bool:
    """–°–ø–∏—Å–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç—É"""
    if not can_spin_roulette(user_id):
        return False
    
    cursor.execute("UPDATE players SET coins = coins - 4000 WHERE user_id = ?", (user_id,))
    conn.commit()
    return True

def apply_roulette_prize(user_id: int, prize: dict):
    """–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –≤–∏–≥—Ä–∞–Ω–∏–π –ø—Ä–∏–∑"""
    prize_type = prize['type']
    value = prize['value']
    
    if prize_type == RoulettePrizeType.COINS:
        cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (value, user_id))
    elif prize_type == RoulettePrizeType.EXPERIENCE:
        add_xp_and_reward(user_id, xp_gain=value, coins_gain=0)
    elif prize_type == RoulettePrizeType.JACKPOT:
        cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (value, user_id))
    
    # –ó–∞–ø–∏—Å–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ–∫—Ä—É—Ç—ñ–≤
    cursor.execute(
        "INSERT INTO roulette_spins (user_id, prize_id, spin_date) VALUES (?, ?, ?)",
        (user_id, prize['id'], datetime.now().isoformat())
    )
    conn.commit()

def get_roulette_info_text():
    """–¢–µ–∫—Å—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø—Ä–∏–∑–∏ —Ä—É–ª–µ—Ç–∫–∏"""
    text = "üé∞ <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä—É–ª–µ—Ç–∫—É</b>\n\n"
    text += f"üíµ –í–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç—É: <b>4000 ‚úØ</b>\n\n"
    text += "<b>–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏–∑–∏:</b>\n"
    
    for prize in roulette.prizes:
        percentage = prize['probability'] * 100
        if prize['type'] == RoulettePrizeType.COINS:
            text += f"‚Ä¢ {prize['name']}: <b>{prize['value']} ‚úØ</b> ({percentage:.1f}%)\n"
        elif prize['type'] == RoulettePrizeType.EXPERIENCE:
            text += f"‚Ä¢ {prize['name']}: <b>{prize['value']} –¥–æ—Å–≤—ñ–¥—É</b> ({percentage:.1f}%)\n"
        elif prize['type'] == RoulettePrizeType.FREE_SPIN:
            text += f"‚Ä¢ {prize['name']}: <b>{prize['value']} –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Å–ø—ñ–Ω</b> ({percentage:.1f}%)\n"
        elif prize['type'] == RoulettePrizeType.JACKPOT:
            text += f"‚Ä¢ {prize['name']}: <b>{prize['value']} ‚úØ</b> ({percentage:.1f}%)\n"
    
    return text

# ========== –§–£–ù–ö–¶–Ü–á –§–ï–†–ú–ò –¢–ê TAP GAME ==========
def get_user_farm(user_id: int) -> dict:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–µ—Ä–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    cursor.execute("SELECT animals, last_collect_time, total_earned FROM user_farm WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å, —è–∫—â–æ –Ω–µ–º–∞—î
        cursor.execute(
            "INSERT INTO user_farm (user_id, animals, last_collect_time) VALUES (?, ?, ?)",
            (user_id, 0, datetime.now().isoformat())
        )
        conn.commit()
        return {"animals": 0, "last_collect_time": datetime.now().isoformat(), "total_earned": 0}
    
    animals, last_collect_time, total_earned = result
    return {
        "animals": animals,
        "last_collect_time": last_collect_time,
        "total_earned": total_earned or 0
    }

def get_user_tap_stats(user_id: int) -> dict:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–ø-–≥–µ–π–º—É"""
    cursor.execute("SELECT boost_level, tap_income, total_taps, total_earned FROM user_tap_boost WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å, —è–∫—â–æ –Ω–µ–º–∞—î
        cursor.execute(
            "INSERT INTO user_tap_boost (user_id, boost_level, tap_income) VALUES (?, ?, ?)",
            (user_id, 1, 1.24)
        )
        conn.commit()
        return {"boost_level": 1, "tap_income": 1.24, "total_taps": 0, "total_earned": 0}
    
    boost_level, tap_income, total_taps, total_earned = result
    return {
        "boost_level": boost_level,
        "tap_income": tap_income,
        "total_taps": total_taps or 0,
        "total_earned": total_earned or 0
    }

def collect_farm_income(user_id: int) -> dict:
    """–ó—ñ–±—Ä–∞—Ç–∏ –¥–æ—Ö—ñ–¥ –∑ —Ñ–µ—Ä–º–∏ (–¢–ï–ü–ï–† –¢–Ü–õ–¨–ö–ò –ü–†–ò –ù–ê–¢–ò–°–ö–ê–ù–ù–Ü –ö–ù–û–ü–ö–ò)"""
    farm_data = get_user_farm(user_id)
    animals = farm_data["animals"]
    
    if animals == 0:
        return {"success": False, "message": "–£ –≤–∞—Å –Ω–µ–º–∞—î —Ç–≤–∞—Ä–∏–Ω –Ω–∞ —Ñ–µ—Ä–º—ñ!"}
    
    last_collect = datetime.fromisoformat(farm_data["last_collect_time"])
    now = datetime.now()
    hours_passed = (now - last_collect).total_seconds() / 3600
    
    # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å –º—ñ–∂ –∑–±–æ—Ä–∞–º–∏ - 1 –≥–æ–¥–∏–Ω–∞
    if hours_passed < 1:
        time_left = 60 - int((hours_passed * 60))  # —Ö–≤–∏–ª–∏–Ω –∑–∞–ª–∏—à–∏–ª–æ—Å—å
        return {"success": False, "message": f"–©–µ —Ä–∞–Ω–æ –∑–±–∏—Ä–∞—Ç–∏ –¥–æ—Ö—ñ–¥! –ü—Ä–∏—Ö–æ–¥—å—Ç–µ —á–µ—Ä–µ–∑ {time_left} —Ö–≤."}
    
    earnings = FarmManager.calculate_earnings(animals, hours_passed)
    
    # –û–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å —Ç–∞ —á–∞—Å –∑–±–æ—Ä—É
    cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (earnings, user_id))
    cursor.execute(
        "UPDATE user_farm SET last_collect_time = ?, total_earned = total_earned + ? WHERE user_id = ?",
        (now.isoformat(), earnings, user_id)
    )
    conn.commit()
    
    return {"success": True, "earnings": earnings, "hours_passed": hours_passed}

def get_available_farm_income(user_id: int) -> dict:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∑–±–æ—Ä—É –¥–æ—Ö—ñ–¥ (–±–µ–∑ –∑–±–æ—Ä—É)"""
    farm_data = get_user_farm(user_id)
    animals = farm_data["animals"]
    
    if animals == 0:
        return {"available": False, "message": "–ù–µ–º–∞—î —Ç–≤–∞—Ä–∏–Ω"}
    
    last_collect = datetime.fromisoformat(farm_data["last_collect_time"])
    now = datetime.now()
    hours_passed = (now - last_collect).total_seconds() / 3600
    
    earnings = FarmManager.calculate_earnings(animals, hours_passed)
    
    can_collect = hours_passed >= 1
    time_left = max(0, 60 - int((hours_passed * 60))) if hours_passed < 1 else 0
    
    return {
        "available": can_collect,
        "earnings": earnings,
        "hours_passed": hours_passed,
        "time_left": time_left,
        "animals": animals,
        "income_per_hour": FarmManager.get_animal_income(animals)
    }

def process_tap(user_id: int) -> dict:
    """–û–±—Ä–æ–±–∏—Ç–∏ —Ç–∞–ø (–∫–ª—ñ–∫)"""
    tap_stats = get_user_tap_stats(user_id)
    income = tap_stats["tap_income"]
    
    # –î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏
    cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (income, user_id))
    
    # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor.execute(
        "UPDATE user_tap_boost SET total_taps = total_taps + 1, total_earned = total_earned + ? WHERE user_id = ?",
        (income, user_id)
    )
    conn.commit()
    
    return {"income": income, "new_balance": get_user_coins(user_id)}

def buy_animal(user_id: int) -> dict:
    """–ö—É–ø–∏—Ç–∏ —Ç–≤–∞—Ä–∏–Ω—É"""
    farm_data = get_user_farm(user_id)
    current_animals = farm_data["animals"]
    
    if current_animals >= Shop.MAX_ANIMALS:
        return {"success": False, "message": f"–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º —Ç–≤–∞—Ä–∏–Ω ({Shop.MAX_ANIMALS})!"}
    
    user_coins = get_user_coins(user_id)
    if user_coins < Shop.ANIMAL_PRICE:
        return {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!"}
    
    # –°–ø–∏—Å–∞—Ç–∏ –∫–æ—à—Ç–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∏ —Ç–≤–∞—Ä–∏–Ω—É
    cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", (Shop.ANIMAL_PRICE, user_id))
    cursor.execute("UPDATE user_farm SET animals = animals + 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    
    return {"success": True, "message": f"–¢–≤–∞—Ä–∏–Ω–∫—É –∫—É–ø–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä —É –≤–∞—Å {current_animals + 1} —Ç–≤–∞—Ä–∏–Ω."}

def buy_tap_boost(user_id: int) -> dict:
    """–ö—É–ø–∏—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è —Ç–∞–ø-–≥–µ–π–º—É"""
    tap_stats = get_user_tap_stats(user_id)
    current_level = tap_stats["boost_level"]
    
    next_boost = TapGame.get_next_boost_level(current_level)
    if not next_boost:
        return {"success": False, "message": "–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –±—É—Å—Ç–∞!"}
    
    user_coins = get_user_coins(user_id)
    if user_coins < next_boost["price"]:
        return {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!"}
    
    # –°–ø–∏—Å–∞—Ç–∏ –∫–æ—à—Ç–∏ —Ç–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –±—É—Å—Ç
    cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", (next_boost["price"], user_id))
    cursor.execute(
        "UPDATE user_tap_boost SET boost_level = ?, tap_income = ? WHERE user_id = ?",
        (next_boost["level"], next_boost["income"], user_id)
    )
    conn.commit()
    
    return {
        "success": True, 
        "message": f"–ë—É—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–æ –¥–æ {next_boost['level']} —Ä—ñ–≤–Ω—è! –î–æ—Ö—ñ–¥ –∑–∞ —Ç–∞–ø: {next_boost['income']} ‚úØ",
        "new_level": next_boost["level"],
        "new_income": next_boost["income"]
    }

def get_user_coins(user_id: int) -> int:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    cursor.execute("SELECT coins FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def build_income_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üè† –ü–∞—Å—Å–∏–≤–Ω–∞—è —Ñ–µ—Ä–º–∞", callback_data="income_farm"),
        InlineKeyboardButton("üëÜ Tap to Money", callback_data="income_tap"),
        InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="income_shop"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
    )
    return kb

# ========== –•–≠–ù–î–õ–ï–†–´ ==========
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    cleanup_inactive_players()
    reset_daily_limits()  # –°–∫–∏–¥–∞—î–º–æ –¥–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    ensure_player(message.from_user.id, message.from_user.username or message.from_user.full_name)
    update_last_play(message.from_user.id)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! üéÆ\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:", reply_markup=build_main_menu())

@dp.message_handler(commands=["profile"])
async def cmd_profile(message: types.Message):
    ensure_player(message.from_user.id, message.from_user.username or message.from_user.full_name)
    update_last_play(message.from_user.id)
    cursor.execute("SELECT level, xp, coins, last_play, correct_streak, daily_questions FROM players WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    await message.answer(format_profile_row(user), reply_markup=build_back_button("main"))

@dp.message_handler(commands=["leaderboard"])
async def cmd_leaderboard(message: types.Message):
    cleanup_inactive_players()
    update_last_play(message.from_user.id)
    cursor.execute("SELECT username, level, xp FROM players ORDER BY level DESC, xp DESC LIMIT 10")
    rows = cursor.fetchall()
    text = "üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
    for i, (username, level, xp) in enumerate(rows, start=1):
        display = f"@{username}" if username else f"–ò–≥—Ä–æ–∫ {i}"
        text += f"{i}. {display} ‚Äî {level} lvl ({xp} XP)\n"
    await message.answer(text, reply_markup=build_back_button("main"))

@dp.callback_query_handler(lambda c: c.data == "menu_play")
async def cb_menu_play(call: types.CallbackQuery):
    await call.answer()
    ensure_player(call.from_user.id, call.from_user.username or call.from_user.full_name)
    update_last_play(call.from_user.id)
    await send_random_question(call.message.chat.id, call.from_user.id, edit_message=call.message)

@dp.callback_query_handler(lambda c: c.data.startswith("ans|"))
async def cb_answer(call: types.CallbackQuery):
    await call.answer()
    try:
        _, chosen_s, qindex_s = call.data.split("|")
        chosen = int(chosen_s)
        q_index = int(qindex_s)
    except Exception:
        await call.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        return

    if q_index < 0 or q_index >= len(QUESTIONS):
        await send_random_question(call.message.chat.id, call.from_user.id, edit_message=call.message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    if not can_answer_questions(call.from_user.id):
        text = (
            f"‚ùå <b>–õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>\n\n"
            f"–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {DAILY_QUESTION_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è.\n"
            f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤! üéØ"
        )
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back|main"))
        await call.message.edit_text(text, reply_markup=kb)
        return

    q = QUESTIONS[q_index]
    correct = int(q.get("answer", 0))
    ensure_player(call.from_user.id, call.from_user.username or call.from_user.full_name)
    update_last_play(call.from_user.id)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    increment_question_count(call.from_user.id)

    # –≤–∞—Ä–∏–∞–Ω—Ç "–ù–µ –∑–Ω–∞—é"
    if chosen == 0:
        cursor.execute("UPDATE players SET correct_streak = 0 WHERE user_id = ?", (call.from_user.id,))
        conn.commit()
        correct_text = q["options"][correct - 1] if correct else "‚Äî"
        text = f"üòÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> {correct_text}\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∂–¥—ë—Ç —Ç–µ–±—è."
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back|main"))
        await call.message.edit_text(text, reply_markup=kb)
        await asyncio.sleep(1.5)
        await send_random_question(call.message.chat.id, call.from_user.id, edit_message=call.message)
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if chosen == correct:
        res = add_xp_and_reward(call.from_user.id, xp_gain=15, coins_gain=5)
        cursor.execute("UPDATE players SET correct_streak = correct_streak + 1 WHERE user_id = ?", (call.from_user.id,))
        conn.commit()
        streak = cursor.execute("SELECT correct_streak FROM players WHERE user_id = ?", (call.from_user.id,)).fetchone()[0]
        bonus_text = ""
        if streak % 5 == 0:
            add_xp_and_reward(call.from_user.id, xp_gain=50, coins_gain=25)
            bonus_text = f"\nüî• –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é {streak}: +50 XP, +25 ‚úØ"
        level, xp, coins, _ = res
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É —Å —Å–∏–º–≤–æ–ª–æ–º ‚úØ
        coins_formatted = f"{coins} ‚úØ"
        
        text = f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n+15 XP, +5 ‚úØ\nüèÜ –£—Ä–æ–≤–µ–Ω—å: {level} ({xp}/{XP_PER_LEVEL})\nüí∞ –ë–∞–ª–∞–Ω—Å: {coins_formatted}{bonus_text}"
        await call.message.edit_text(text)
        await asyncio.sleep(1.2)
        await send_random_question(call.message.chat.id, call.from_user.id, edit_message=call.message)
    else:
        cursor.execute("UPDATE players SET correct_streak = 0 WHERE user_id = ?", (call.from_user.id,))
        conn.commit()
        correct_text = q["options"][correct - 1] if correct else "‚Äî"
        text = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}"
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back|main"))
        await call.message.edit_text(text, reply_markup=kb)
        await asyncio.sleep(1.5)
        await send_random_question(call.message.chat.id, call.from_user.id, edit_message=call.message)

@dp.callback_query_handler(lambda c: c.data.startswith("menu_back|"))
async def cb_menu_back(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu())

@dp.callback_query_handler(lambda c: c.data == "menu_profile")
async def cb_menu_profile(call: types.CallbackQuery):
    await call.answer()
    cursor.execute("SELECT level, xp, coins, last_play, correct_streak, daily_questions FROM players WHERE user_id = ?", (call.from_user.id,))
    user = cursor.fetchone()
    await call.message.edit_text(format_profile_row(user), reply_markup=build_back_button("main"))

@dp.callback_query_handler(lambda c: c.data == "menu_leaderboard")
async def cb_menu_leaderboard(call: types.CallbackQuery):
    await call.answer()
    cursor.execute("SELECT username, level, xp FROM players ORDER BY level DESC, xp DESC LIMIT 10")
    rows = cursor.fetchall()
    text = "üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
    for i, (username, level, xp) in enumerate(rows, start=1):
        display = f"@{username}" if username else f"–ò–≥—Ä–æ–∫ {i}"
        text += f"{i}. {display} ‚Äî {level} lvl ({xp} XP)\n"
    await call.message.edit_text(text, reply_markup=build_back_button("main"))

@dp.callback_query_handler(lambda c: c.data == "menu_tasks")
async def cb_menu_tasks(call: types.CallbackQuery):
    await call.answer()
    today = datetime.now().date()
    cursor.execute("SELECT last_task_date FROM players WHERE user_id = ?", (call.from_user.id,))
    last_date_str = cursor.fetchone()[0] or ""
    last_date = datetime.fromisoformat(last_date_str).date() if last_date_str else None
    new_day = last_date != today
    tasks_text = (
        "üìã <b>–ó–∞–¥–∞–Ω–∏—è –¥–Ω—è</b>\n\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—å –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞ ‚Äî +30 XP\n"
        "‚Ä¢ –í–µ—Ä–Ω–∏—Å—å –∑–∞–≤—Ç—Ä–∞ ‚Äî +20 XP\n"
        "‚Ä¢ 5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥—Ä—è–¥ ‚Äî –±–æ–Ω—É—Å +50 XP\n\n"
        "–ù–∞–∂–º–∏ ¬´–ò–≥—Ä–∞—Ç—å¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."
    )
    if new_day:
        cursor.execute("UPDATE players SET last_task_date = ? WHERE user_id = ?", (today.isoformat(), call.from_user.id))
        conn.commit()
    await call.message.edit_text(tasks_text, reply_markup=build_back_button("main"))

#INFO
@dp.message_handler(commands=['info'])
async def cmd_info(message: types.Message):
    text = (
        'üìç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b> üìç\n\n'
        '‚ú® <b>–ß—Ç–æ —Å–µ–π—á–∞—Å –µ—Å—Ç—å –≤ –±–æ—Ç–µ:</b>\n\n'
        '‚Ä¢ <b>üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞</b> ‚Äî –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞–π –æ–ø—ã—Ç –∏ –º–æ–Ω–µ—Ç—ã ‚úØ\n'
        f'‚Ä¢ <b>üìä –õ–∏–º–∏—Ç:</b> {DAILY_QUESTION_LIMIT} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n\n'
        '‚Ä¢ <b>üé∞ –†—É–ª–µ—Ç–∫–∞</b> ‚Äî –∫—Ä—É—Ç–∏ –∑–∞ 4000 ‚úØ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑—ã\n'
        '‚Ä¢ <b>üí∞ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Ö–æ–¥–æ–≤</b> ‚Äî –ø–∞—Å—Å–∏–≤–Ω—ã–π –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫\n'
        '‚Ä¢ <b>üè† –§–µ—Ä–º–∞</b> ‚Äî –ø–æ–∫—É–ø–∞–π –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ —Å–æ–±–∏—Ä–∞–π –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–π —á–∞—Å\n'
        '‚Ä¢ <b>üëÜ Tap Game</b> ‚Äî –Ω–∞–∂–∏–º–∞–π –∏ –ø–æ–ª—É—á–∞–π –º–æ–Ω–µ—Ç—ã, —É–ª—É—á—à–∞–π –±—É—Å—Ç—ã\n'
        '‚Ä¢ <b>üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</b> ‚Äî –ø–æ–∫—É–ø–∞–π –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ —É–ª—É—á—à–µ–Ω–∏—è\n\n'
        '‚Ä¢ <b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b> ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n'
        '‚Ä¢ <b>üèÜ –†–µ–π—Ç–∏–Ω–≥</b> ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n'
        '‚Ä¢ <b>üìÖ –ó–∞–¥–∞–Ω–∏—è</b> ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ü–µ–ª–∏\n\n'
        '<b>üí´ –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞:</b> ‚úØ (–∑–≤–µ–∑–¥–æ—á–∫–∏)\n\n'
        '<code>–í–µ—Ä—Å–∏—è: 2.0.1</code>\n\n'
        '<b>–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:</b>\n'
        '<a href="https://t.me/+q7SmgHCfUBpkOWJi">‚â• –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ ‚â§</a>\n'
        '<a href="https://t.me/+EfXBYlQYHl43N2E6">‚â• –ù–∞—à –∫–∞–Ω–∞–ª ‚â§</a>'
    )
    await message.answer(text)

# ========== –•–ï–ù–î–õ–ï–†–ò –†–£–õ–ï–¢–ö–ò ==========
@dp.callback_query_handler(lambda c: c.data == "menu_roulette")
async def cb_menu_roulette(call: types.CallbackQuery):
    await call.answer()
    ensure_player(call.from_user.id, call.from_user.username or call.from_user.full_name)
    
    cursor.execute("SELECT coins FROM players WHERE user_id = ?", (call.from_user.id,))
    coins = cursor.fetchone()[0]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É —Å —Å–∏–º–≤–æ–ª–æ–º ‚úØ
    coins_formatted = f"{coins} ‚úØ"
    
    text = (
        f"üé∞ <b>–†—É–ª–µ—Ç–∫–∞ —É–¥–∞—á—ñ</b> üé∞\n\n"
        f"üíµ –¢–≤–æ—ó –º–æ–Ω–µ—Ç–∏: <b>{coins_formatted}</b>\n"
        f"üéØ –í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç—É: <b>4000 ‚úØ</b>\n\n"
        f"–ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É —Ç–∞ –≤–∏–≥—Ä–∞–π –∫—Ä—É—Ç—ñ –ø—Ä–∏–∑–∏!\n"
        f"–í—ñ–¥ —Å–∫—Ä–æ–º–Ω–∏—Ö –º–æ–Ω–µ—Ç –¥–æ –≤–µ–ª–∏–∫–æ–≥–æ –¥–∂–µ–∫–ø–æ—Ç—É! üéÅ"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç–∏ —Ä—É–ª–µ—Ç–∫—É (4000 ‚úØ)", callback_data="roulette_spin"),
        InlineKeyboardButton("üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–∏–∑–∏", callback_data="roulette_info"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
    )
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "roulette_info")
async def cb_roulette_info(call: types.CallbackQuery):
    await call.answer()
    text = get_roulette_info_text()
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé∞ –î–æ —Ä—É–ª–µ—Ç–∫–∏", callback_data="menu_roulette"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "roulette_spin")
async def cb_roulette_spin(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    if not can_spin_roulette(user_id):
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç—É —Ä—É–ª–µ—Ç–∫–∏!", show_alert=True)
        return
    
    # –°–ø–∏—Å–∞—Ç–∏ –∫–æ—à—Ç–∏
    charge_roulette_cost(user_id)
    
    # –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ —Ä—É–ª–µ—Ç–∫—É
    prize = roulette.spin()
    
    # –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø—Ä–∏–∑
    apply_roulette_prize(user_id, prize)
    
    # –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è
    cursor.execute("SELECT coins FROM players WHERE user_id = ?", (user_id,))
    new_coins = cursor.fetchone()[0]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É —Å —Å–∏–º–≤–æ–ª–æ–º ‚úØ
    new_coins_formatted = f"{new_coins} ‚úØ"
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫—Ä–∞—Å–∏–≤e –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–≥—Ä–∞—à
    prize_text = ""
    if prize['type'] == RoulettePrizeType.COINS:
        prize_text = f"üéâ –¢–∏ –≤–∏–≥—Ä–∞–≤ <b>{prize['value']} ‚úØ</b>!"
    elif prize['type'] == RoulettePrizeType.EXPERIENCE:
        prize_text = f"‚≠ê –¢–∏ –≤–∏–≥—Ä–∞–≤ <b>{prize['value']} –¥–æ—Å–≤—ñ–¥—É</b>!"
    elif prize['type'] == RoulettePrizeType.FREE_SPIN:
        prize_text = f"üé´ –¢–∏ –≤–∏–≥—Ä–∞–≤ <b>–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Å–ø—ñ–Ω</b>!"
    elif prize['type'] == RoulettePrizeType.JACKPOT:
        prize_text = f"üéØ <b>–î–ñ–ï–ö–ü–û–¢!</b> –¢–∏ –≤–∏–≥—Ä–∞–≤ <b>{prize['value']} ‚úØ</b>! üéØ"
    
    text = (
        f"üé∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏</b> üé∞\n\n"
        f"{prize_text}\n\n"
        f"üíµ –ó–∞–ª–∏—à–æ–∫ –º–æ–Ω–µ—Ç: <b>{new_coins_formatted}</b>\n"
        f"üéÅ –ü—Ä–∏–∑: {prize['name']}"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data="roulette_spin"),
        InlineKeyboardButton("üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="roulette_info"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
    )
    
    await call.message.edit_text(text, reply_markup=kb)

# ========== –•–ï–ù–î–õ–ï–†–ò –î–û–•–û–î–Ü–í ==========
@dp.callback_query_handler(lambda c: c.data == "menu_income")
async def cb_menu_income(call: types.CallbackQuery):
    await call.answer()
    ensure_player(call.from_user.id, call.from_user.username or call.from_user.full_name)
    
    user_coins = get_user_coins(call.from_user.id)
    farm_data = get_user_farm(call.from_user.id)
    tap_stats = get_user_tap_stats(call.from_user.id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É —Å —Å–∏–º–≤–æ–ª–æ–º ‚úØ
    coins_formatted = f"{user_coins} ‚úØ"
    
    text = (
        f"üí∞ <b>–°–∏—Å—Ç–µ–º–∞ –¥–æ—Ö–æ–¥–æ–≤</b> üí∞\n\n"
        f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{coins_formatted}</b>\n\n"
        f"üè† <b>–§–µ—Ä–º–∞:</b> {farm_data['animals']} —Ç–≤–∞—Ä–∏–Ω\n"
        f"üëÜ <b>Tap Game:</b> {tap_stats['boost_level']} —É—Ä. ({tap_stats['tap_income']} ‚úØ/—Ç–∞–ø)\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –∑–∞—Ä–æ–±—ñ—Ç–∫—É:"
    )
    
    await call.message.edit_text(text, reply_markup=build_income_menu())

@dp.callback_query_handler(lambda c: c.data == "income_farm")
async def cb_income_farm(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    farm_info = get_available_farm_income(user_id)
    
    if farm_info["animals"] == 0:
        text = (
            "üè† <b>–ü–∞—Å—Å–∏–≤–Ω–∞—è —Ñ–µ—Ä–º–∞</b>\n\n"
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ω–∞ —Ñ–µ—Ä–º–µ!\n\n"
            "üõçÔ∏è –ü–æ—Å–µ—Ç–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö.\n"
            "üí∞ –ö–∞–∂–¥–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç 11.25 ‚úØ –≤ —á–∞—Å!"
        )
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üõçÔ∏è –í –º–∞–≥–∞–∑–∏–Ω", callback_data="income_shop"))
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
    else:
        if farm_info["available"]:
            text = (
                f"üè† <b>–ü–∞—Å—Å–∏–≤–Ω–∞—è —Ñ–µ—Ä–º–∞</b>\n\n"
                f"üí∞ <b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–±–æ—Ä–∞: {farm_info['earnings']} ‚úØ!</b>\n"
                f"‚è∞ –ù–∞–∫–æ–ø–ª–µ–Ω–æ –∑–∞: {farm_info['hours_passed']:.1f} —á–∞—Å–æ–≤\n\n"
                f"üê∑ –ñ–∏–≤–æ—Ç–Ω—ã—Ö: <b>{farm_info['animals']}</b>\n"
                f"üìà –î–æ—Ö–æ–¥ –≤ —á–∞—Å: <b>{farm_info['income_per_hour']} ‚úØ</b>\n"
                f"üíµ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{get_user_farm(user_id)['total_earned']} ‚úØ</b>"
            )
            
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(InlineKeyboardButton("üí∞ –ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏", callback_data="farm_collect"))
            kb.add(InlineKeyboardButton("üõçÔ∏è –ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö", callback_data="shop_animals"))
            kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
        else:
            text = (
                f"üè† <b>–ü–∞—Å—Å–∏–≤–Ω–∞—è —Ñ–µ—Ä–º–∞</b>\n\n"
                f"‚è≥ –î–æ—Ö–æ–¥ –µ—â–µ –∫–æ–ø–∏—Ç—Å—è...\n"
                f"üïê –î–æ —Å–±–æ—Ä–∞: <b>{farm_info['time_left']} –º–∏–Ω—É—Ç</b>\n"
                f"üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–æ: ~{farm_info['earnings']} ‚úØ\n\n"
                f"üê∑ –ñ–∏–≤–æ—Ç–Ω—ã—Ö: <b>{farm_info['animals']}</b>\n"
                f"üìà –î–æ—Ö–æ–¥ –≤ —á–∞—Å: <b>{farm_info['income_per_hour']} ‚úØ</b>\n"
                f"üíµ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{get_user_farm(user_id)['total_earned']} ‚úØ</b>"
            )
            
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="income_farm"))
            kb.add(InlineKeyboardButton("üõçÔ∏è –ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö", callback_data="shop_animals"))
            kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "farm_collect")
async def cb_farm_collect(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Ö–æ–¥
    collect_result = collect_farm_income(user_id)
    
    if collect_result["success"]:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–µ—Ä–º–µ
        farm_data = get_user_farm(user_id)
        
        text = (
            f"üè† <b>–ü–∞—Å—Å–∏–≤–Ω–∞—è —Ñ–µ—Ä–º–∞</b>\n\n"
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ: {collect_result['earnings']} ‚úØ!</b> üéâ\n"
            f"‚è∞ –ó–∞ –ø–µ—Ä–∏–æ–¥: {collect_result['hours_passed']:.1f} —á–∞—Å–æ–≤\n\n"
            f"üê∑ –ñ–∏–≤–æ—Ç–Ω—ã—Ö: <b>{farm_data['animals']}</b>\n"
            f"üìà –î–æ—Ö–æ–¥ –≤ —á–∞—Å: <b>{FarmManager.get_animal_income(farm_data['animals'])} ‚úØ</b>\n"
            f"üíµ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{farm_data['total_earned']} ‚úØ</b>"
        )
        
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="income_farm"))
        kb.add(InlineKeyboardButton("üõçÔ∏è –ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö", callback_data="shop_animals"))
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
        
        await call.message.edit_text(text, reply_markup=kb)
    else:
        await call.answer(collect_result["message"], show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–µ—Ä–º—É —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await cb_income_farm(call)

@dp.callback_query_handler(lambda c: c.data == "income_tap")
async def cb_income_tap(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    tap_stats = get_user_tap_stats(user_id)
    
    text = (
        f"üëÜ <b>Tap to Money</b> üëÜ\n\n"
        f"üíµ –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª—É—á–∞–π –º–æ–Ω–µ—Ç—ã!\n"
        f"üéØ –¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ —Ç–∞–ø: <b>{tap_stats['tap_income']} ‚úØ</b>\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å –±—É—Å—Ç–∞: <b>{tap_stats['boost_level']}</b>\n"
        f"üëÜ –í—Å–µ–≥–æ —Ç–∞–ø–æ–≤: <b>{tap_stats['total_taps']}</b>\n"
        f"üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{tap_stats['total_earned']} ‚úØ</b>"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton("üëÜ TAP!", callback_data="tap_click"))
    kb.add(InlineKeyboardButton("üõçÔ∏è –£–ª—É—á—à–∏—Ç—å –±—É—Å—Ç", callback_data="shop_boosts"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "tap_click")
async def cb_tap_click(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    tap_result = process_tap(user_id)
    
    # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ—Å–ª—è —Ç–∞–ø—É
    tap_stats = get_user_tap_stats(user_id)
    
    text = (
        f"üëÜ <b>+{tap_result['income']} ‚úØ!</b> üéâ\n\n"
        f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{tap_result['new_balance']} ‚úØ</b>\n"
        f"üéØ –î–æ—Ö–æ–¥ –∑–∞ —Ç–∞–ø: <b>{tap_stats['tap_income']} ‚úØ</b>\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å –±—É—Å—Ç–∞: <b>{tap_stats['boost_level']}</b>\n"
        f"üëÜ –í—Å–µ–≥–æ —Ç–∞–ø–æ–≤: <b>{tap_stats['total_taps']}</b>"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton("üëÜ TAP!", callback_data="tap_click"))
    kb.add(InlineKeyboardButton("üõçÔ∏è –£–ª—É—á—à–∏—Ç—å –±—É—Å—Ç", callback_data="shop_boosts"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "income_shop")
async def cb_income_shop(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    user_coins = get_user_coins(user_id)
    farm_data = get_user_farm(user_id)
    tap_stats = get_user_tap_stats(user_id)
    next_boost = TapGame.get_next_boost_level(tap_stats["boost_level"])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É —Å —Å–∏–º–≤–æ–ª–æ–º ‚úØ
    coins_formatted = f"{user_coins} ‚úØ"
    
    text = (
        f"üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω –¥–æ—Ö–æ–¥–æ–≤</b> üõçÔ∏è\n\n"
        f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{coins_formatted}</b>\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n\n"
        f"üê∑ <b>–ñ–∏–≤–æ—Ç–Ω–æ–µ –¥–ª—è —Ñ–µ—Ä–º—ã</b>\n"
        f"üí∞ –¶–µ–Ω–∞: {Shop.ANIMAL_PRICE} ‚úØ\n"
        f"üìà –î–æ—Ö–æ–¥: 11.25 ‚úØ/—á–∞—Å\n"
        f"üéØ –ö—É–ø–ª–µ–Ω–æ: {farm_data['animals']}/{Shop.MAX_ANIMALS}\n\n"
    )
    
    if next_boost:
        text += (
            f"‚ö° <b>–ë—É—Å—Ç –¥–ª—è Tap Game (–£—Ä. {next_boost['level']})</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {next_boost['price']} ‚úØ\n"
            f"üìà –ù–æ–≤—ã–π –¥–æ—Ö–æ–¥: {next_boost['income']} ‚úØ/—Ç–∞–ø\n"
        )
    else:
        text += f"‚ö° <b>–ë—É—Å—Ç –¥–ª—è Tap Game</b> - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! üéâ\n"
    
    kb = InlineKeyboardMarkup(row_width=1)
    if farm_data["animals"] < Shop.MAX_ANIMALS:
        kb.add(InlineKeyboardButton(f"üê∑ –ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ ({Shop.ANIMAL_PRICE} ‚úØ)", callback_data="shop_buy_animal"))
    if next_boost:
        kb.add(InlineKeyboardButton(f"‚ö° –£–ª—É—á—à–∏—Ç—å –±—É—Å—Ç ({next_boost['price']} ‚úØ)", callback_data="shop_buy_boost"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "shop_buy_animal")
async def cb_shop_buy_animal(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    result = buy_animal(user_id)
    
    if result["success"]:
        await call.answer(result["message"], show_alert=True)
        # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω
        await cb_income_shop(call)
    else:
        await call.answer(result["message"], show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "shop_buy_boost")
async def cb_shop_buy_boost(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    result = buy_tap_boost(user_id)
    
    if result["success"]:
        await call.answer(result["message"], show_alert=True)
        # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω
        await cb_income_shop(call)
    else:
        await call.answer(result["message"], show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "shop_animals")
async def cb_shop_animals(call: types.CallbackQuery):
    await call.answer()
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–∞–≥–∞–∑–∏–Ω
    await cb_income_shop(call)

@dp.callback_query_handler(lambda c: c.data == "shop_boosts")
async def cb_shop_boosts(call: types.CallbackQuery):
    await call.answer()
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–∞–≥–∞–∑–∏–Ω
    await cb_income_shop(call)

# ========== –§–û–ù ==========
async def periodic_cleanup():
    while True:
        try:
            cleanup_inactive_players()
            reset_daily_limits()  # –°–∫–∏–¥—É—î–º–æ –¥–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç–∏ –∫–æ–∂–µ–Ω –¥–µ–Ω—å
        except Exception:
            log.exception("periodic_cleanup")
        await asyncio.sleep(60 * 60 * 24)  # –†–∞–∑ –≤ –¥–µ–Ω—å

# ========== –°–¢–ê–†–¢ ==========
if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(periodic_cleanup())
    executor.start_polling(dp, skip_updates=True)