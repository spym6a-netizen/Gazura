import asyncio
import json
import random
import sqlite3
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional, List, Dict
from math import ceil

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

# ========== –ö–û–ù–§–ò–ì ==========
BOT_TOKEN = "8259900558:AAHQVUzKQBtKF7N-Xp8smLmAiAf0Hu-hQHw"
XP_PER_LEVEL = 100
INACTIVE_DAYS = 7
DB_PATH = "data.db"
QUESTIONS_PATH = "questions.json"
DAILY_QUESTION_LIMIT = 10
DAILY_TAP_LIMIT_BASE = 1500  # –õ—ñ–º—ñ—Ç —Ç–∞–ø—ñ–≤ –¥–ª—è —Ä—ñ–≤–Ω—ñ–≤ >5
DAILY_TAP_LIMIT_ACTIVE = 2500  # –õ—ñ–º—ñ—Ç –¥–ª—è —Ä–æ–ª—ñ –ê–∫—Ç–∏–≤–Ω–∏–π

ADMIN_ID = 5672490558

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ========== –ë–ê–ó–ê –î–ê–ù–ù–ò–• ==========
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# –û–°–ù–û–í–ù–ê –¢–ê–ë–õ–ò–¶–Ø –ì–†–ê–í–¶–Ü–í
cursor.execute("""
CREATE TABLE IF NOT EXISTS players (
    user_id INTEGER PRIMARY KEY,
    username TEXT NOT NULL,
    level INTEGER DEFAULT 1,
    xp INTEGER DEFAULT 0,
    coins INTEGER DEFAULT 0,
    role TEXT DEFAULT '–ù–æ–≤–∞—á–æ–∫',
    prefix TEXT DEFAULT '',
    last_active TEXT,
    animals INTEGER DEFAULT 0,
    tap_boost_level INTEGER DEFAULT 1,
    farm_income INTEGER DEFAULT 0,
    total_taps INTEGER DEFAULT 0,
    daily_taps INTEGER DEFAULT 0,
    last_tap_reset TEXT
)
""")

# –¢–í–ê–†–ò–ù–ò –§–ï–†–ú–ò
cursor.execute("""
CREATE TABLE IF NOT EXISTS farm_animals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    animal_type TEXT NOT NULL,
    income INTEGER NOT NULL,
    count INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

# –ù–ï–†–£–•–û–ú–Ü–°–¢–¨
cursor.execute("""
CREATE TABLE IF NOT EXISTS user_real_estate (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    type TEXT NOT NULL,
    income INTEGER NOT NULL,
    price INTEGER NOT NULL,
    last_collect_time TEXT,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

# –î–†–£–ó–Ü
cursor.execute("""
CREATE TABLE IF NOT EXISTS friends (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    friend_username TEXT NOT NULL,
    added_date TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES players (user_id),
    UNIQUE(user_id, friend_id)
)
""")

# –ü–ï–†–ï–ö–ê–ó–ò
cursor.execute("""
CREATE TABLE IF NOT EXISTS money_transfers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    from_user_id INTEGER NOT NULL,
    to_user_id INTEGER NOT NULL,
    amount INTEGER NOT NULL,
    transfer_date TEXT NOT NULL,
    FOREIGN KEY (from_user_id) REFERENCES players (user_id),
    FOREIGN KEY (to_user_id) REFERENCES players (user_id)
)
""")

# –Ü–ù–®–Ü –¢–ê–ë–õ–ò–¶–Ü
cursor.execute("""
CREATE TABLE IF NOT EXISTS item_roulette_prizes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    price INTEGER NOT NULL,
    probability REAL NOT NULL,
    item_type TEXT NOT NULL
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_inventory (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    item_name TEXT NOT NULL,
    item_price INTEGER NOT NULL,
    item_type TEXT NOT NULL,
    obtained_date TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

#AUCTION
cursor.execute("""
CREATE TABLE IF NOT EXISTS auction_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    item_name TEXT NOT NULL,
    item_type TEXT NOT NULL,
    original_price INTEGER NOT NULL,
    auction_price INTEGER NOT NULL,
    listed_date TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS daily_tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    task_date TEXT NOT NULL,
    tasks_completed INTEGER DEFAULT 0,
    spin_roulette_count INTEGER DEFAULT 0,
    tap_count INTEGER DEFAULT 0,
    play_minigames_count INTEGER DEFAULT 0,
    correct_answers_count INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS bank_income (
    user_id INTEGER PRIMARY KEY,
    total_commission INTEGER DEFAULT 0,
    last_collect_date TEXT,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS quiz_answers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    date TEXT NOT NULL,
    correct INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

# –ù–û–í–Ü –¢–ê–ë–õ–ò–¶–Ü –î–õ–Ø –û–ù–û–í–õ–ï–ù–¨
cursor.execute("""
CREATE TABLE IF NOT EXISTS user_roles (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    role_id INTEGER NOT NULL,
    role_name TEXT NOT NULL,
    purchased_date TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS user_prefixes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    prefix_id INTEGER NOT NULL,
    prefix_name TEXT NOT NULL,
    purchased_date TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS auction_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    item_name TEXT NOT NULL,
    item_type TEXT NOT NULL,
    original_price INTEGER NOT NULL,
    auction_price INTEGER NOT NULL,
    listed_date TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES players (user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS pending_sales (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    seller_id INTEGER NOT NULL,
    buyer_id INTEGER NOT NULL,
    item_name TEXT NOT NULL,
    item_type TEXT NOT NULL,
    price INTEGER NOT NULL,
    created_date TEXT NOT NULL,
    FOREIGN KEY (seller_id) REFERENCES players (user_id),
    FOREIGN KEY (buyer_id) REFERENCES players (user_id)
)
""")

conn.commit()

# ========== –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–†–£–ö–¢–£–†–ò –¢–ê–ë–õ–ò–¶–¨ ==========
try:
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ–ª–æ–Ω–∫–∞ income –≤ user_real_estate
    cursor.execute("PRAGMA table_info(user_real_estate)")
    columns = [column[1] for column in cursor.fetchall()]
    
    if 'income' not in columns:
        print("üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ user_real_estate...")
        cursor.execute("DROP TABLE IF EXISTS user_real_estate")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_real_estate (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            type TEXT NOT NULL,
            income INTEGER NOT NULL,
            price INTEGER NOT NULL,
            last_collect_time TEXT,
            FOREIGN KEY (user_id) REFERENCES players (user_id)
        )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—é user_real_estate –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ players
    cursor.execute("PRAGMA table_info(players)")
    player_columns = [column[1] for column in cursor.fetchall()]
    
    if 'daily_taps' not in player_columns:
        print("üîÑ –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ players...")
        cursor.execute("ALTER TABLE players ADD COLUMN daily_taps INTEGER DEFAULT 0")
        cursor.execute("ALTER TABLE players ADD COLUMN last_tap_reset TEXT")
        cursor.execute("ALTER TABLE players ADD COLUMN prefix TEXT DEFAULT ''")
        print("‚úÖ –¢–∞–±–ª–∏—Ü—é players –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    
    # üî• –î–û–î–ê–Ñ–ú–û –û–ù–û–í–õ–ï–ù–ù–Ø –î–õ–Ø USER_INVENTORY üî•
    cursor.execute("PRAGMA table_info(user_inventory)")
    inventory_columns = [column[1] for column in cursor.fetchall()]
    
    if 'item_type' not in inventory_columns:
        print("üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ user_inventory...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_inventory_new (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            item_name TEXT NOT NULL,
            item_price INTEGER NOT NULL,
            item_type TEXT NOT NULL,
            obtained_date TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES players (user_id)
        )
        """)
        
        # –ö–æ–ø—ñ—é—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞—Ä–æ—ó —Ç–∞–±–ª–∏—Ü—ñ (—è–∫—â–æ –≤–æ–Ω–∏ —î)
        try:
            cursor.execute("""
            INSERT INTO user_inventory_new (user_id, item_name, item_price, item_type, obtained_date)
            SELECT user_id, item_name, item_price, 'mineral', obtained_date 
            FROM user_inventory
            """)
            print("‚úÖ –î–∞–Ω—ñ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –¥–æ –Ω–æ–≤–æ—ó —Ç–∞–±–ª–∏—Ü—ñ!")
        except sqlite3.OperationalError:
            print("‚ÑπÔ∏è –°—Ç–∞—Ä–∞ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î")
        
        # –ó–∞–º—ñ–Ω—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
        cursor.execute("DROP TABLE IF EXISTS user_inventory")
        cursor.execute("ALTER TABLE user_inventory_new RENAME TO user_inventory")
        print("‚úÖ –¢–∞–±–ª–∏—Ü—é user_inventory –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    
    conn.commit()
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")

# ========== –ö–û–ù–°–¢–ê–ù–¢–ò ==========
class ItemRoulettePrizes:
    PRIZES = [
        {"name": "üíé –ê–ª–º–∞–∑", "price": 500, "probability": 0.01, "type": "mineral", "id": 22},
        {"name": "üîÆ –ú—ñ—Å—Ç–∏—á–Ω–∏–π –∫—Ä–∏—Å—Ç–∞–ª", "price": 300, "probability": 0.03, "type": "magic", "id": 55},
        {"name": "ü™® –ö–∞–º—ñ–Ω—å", "price": 7, "probability": 0.15, "type": "mineral", "id": 11},
        {"name": "‚õèÔ∏è –ó–∞–ª—ñ–∑–Ω–∞ —Ä—É–¥–∞", "price": 45, "probability": 0.12, "type": "mineral", "id": 33},
        {"name": "ü™ô –ó–æ–ª–æ—Ç–∞ —Ä—É–¥–∞", "price": 120, "probability": 0.08, "type": "mineral", "id": 44},
        {"name": "üìú –°—Ç–∞—Ä–æ–≤–∏–Ω–Ω–∏–π —Å—É–≤—ñ–π", "price": 80, "probability": 0.10, "type": "magic", "id": 66},
        {"name": "üß™ –ï–ª—ñ–∫—Å–∏—Ä —Å–∏–ª–∏", "price": 200, "probability": 0.05, "type": "potion", "id": 77},
        {"name": "üåø –¶—ñ–ª—é—â–∞ —Ç—Ä–∞–≤–∞", "price": 25, "probability": 0.14, "type": "potion", "id": 88},
        {"name": "‚öîÔ∏è –ú–µ—á –≤–æ—ó–Ω–∞", "price": 350, "probability": 0.02, "type": "weapon", "id": 99},
        # –ù–æ–≤—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –¥–ª—è –º–∞—à–∏–Ω
        {"name": "üöó –ö—É–∑–æ–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è", "price": 900, "probability": 0.015, "type": "car_part", "id": 100},
        {"name": "‚öôÔ∏è –î–≤–∏–≥—É–Ω –∞–≤—Ç–æ–º–æ–±—ñ–ª—è", "price": 1200, "probability": 0.012, "type": "car_part", "id": 101},
        {"name": "üõû –ö–æ–ª–µ—Å–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è", "price": 800, "probability": 0.018, "type": "car_part", "id": 102},
    ]

class CraftingRecipes:
    RECIPES = [
        {
            "id": 1,
            "name": "üíé –ö–∞–ª—å—î –∑ –∞–ª–º–∞–∑—É",
            "result": "üíé –ö–∞–ª—å—î –∑ –∞–ª–º–∞–∑—É",
            "result_price": 1200,
            "result_type": "jewelry",
            "cost": 200,
            "ingredients": [
                {"name": "üíé –ê–ª–º–∞–∑", "quantity": 1},
                {"name": "üîÆ –ú—ñ—Å—Ç–∏—á–Ω–∏–π –∫—Ä–∏—Å—Ç–∞–ª", "quantity": 1}
            ]
        },
        {
            "id": 2,
            "name": "üöó –í–∏–ø–∞–¥–∫–æ–≤–∞ –º–∞—à–∏–Ω–∞",
            "result": "random_car",
            "result_type": "car",
            "cost": 500,
            "ingredients": [
                {"name": "üöó –ö—É–∑–æ–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è", "quantity": 1},
                {"name": "‚öôÔ∏è –î–≤–∏–≥—É–Ω –∞–≤—Ç–æ–º–æ–±—ñ–ª—è", "quantity": 1},
                {"name": "üõû –ö–æ–ª–µ—Å–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è", "quantity": 1}
            ]
        }
    ]
class Cars:
    CARS = [
        # –ï–∫–æ–Ω–æ–º –∫–ª–∞—Å—Å
        {"name": "Hyundai Solaris", "class": "economy", "price": 4000, "probability": 0.4},
        {"name": "Kia Rio", "class": "economy", "price": 6000, "probability": 0.3},
        {"name": "Renault Logan", "class": "economy", "price": 7000, "probability": 0.3},
        # –ö–æ–º—Ñ–æ—Ä—Ç –∫–ª–∞—Å—Å
        {"name": "Toyota Camry", "class": "comfort", "price": 11000, "probability": 0.5},
        {"name": "Passat B7", "class": "comfort", "price": 15000, "probability": 0.5},
        # –ë—ñ–∑–Ω–µ—Å –∫–ª–∞—Å—Å
        {"name": "Mercedes-Benz E-Class", "class": "business", "price": 22000, "probability": 0.34},
        {"name": "BMW 5 Series", "class": "business", "price": 22000, "probability": 0.33},
        {"name": "Audi A6", "class": "business", "price": 25000, "probability": 0.33},
    ]
class TapGame:
    BOOST_LEVELS = {
        1: {"income": 1, "price": 0},
        2: {"income": 2, "price": 100},
        3: {"income": 3, "price": 250},
        4: {"income": 4, "price": 500},
        5: {"income": 5, "price": 1000},
        6: {"income": 6, "price": 2000},
        7: {"income": 7, "price": 4000},
        8: {"income": 8, "price": 8000},
        9: {"income": 9, "price": 16000},
        10: {"income": 10, "price": 32000}
    }

class FarmAnimals:
    ANIMALS = [
        {"name": "üêî –ö—É—Ä–∫–∞", "price": 100, "income": 5, "emoji": "üêî", "max_count": 4},
        {"name": "üêÑ –ö–æ—Ä–æ–≤–∞", "price": 500, "income": 25, "emoji": "üêÑ", "max_count": 4},
        {"name": "üêñ –°–≤–∏–Ω—è", "price": 300, "income": 15, "emoji": "üêñ", "max_count": 4},
        {"name": "üêë –í—ñ–≤—Ü—è", "price": 200, "income": 10, "emoji": "üêë", "max_count": 4},
        {"name": "üêé –ö—ñ–Ω—å", "price": 1000, "income": 50, "emoji": "üêé", "max_count": 4},
        {"name": "üê´ –í–µ—Ä–±–ª—é–¥", "price": 2000, "income": 100, "emoji": "üê´", "max_count": 4},
        {"name": "üêò –°–ª–æ–Ω", "price": 5000, "income": 250, "emoji": "üêò", "max_count": 4},
        {"name": "ü¶í –ñ–∏—Ä–∞—Ñ–∞", "price": 3000, "income": 150, "emoji": "ü¶í", "max_count": 4},
        {"name": "üêÖ –¢–∏–≥—Ä", "price": 8000, "income": 400, "emoji": "üêÖ", "max_count": 4},
        {"name": "üêâ –î—Ä–∞–∫–æ–Ω", "price": 15000, "income": 750, "emoji": "üêâ", "max_count": 4}
    ]

class RealEstate:
    PROPERTIES = [
        {"name": "üè† –ë—É–¥–∏–Ω–æ–∫", "price": 1000, "income": 50, "max_count": 2},
        {"name": "üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞", "price": 500, "income": 25, "max_count": 2},
        {"name": "üè¨ –û—Ñ—ñ—Å", "price": 3000, "income": 150, "max_count": 2},
        {"name": "üè™ –ú–∞–≥–∞–∑–∏–Ω", "price": 2000, "income": 100, "max_count": 2},
        {"name": "üè® –ì–æ—Ç–µ–ª—å", "price": 10000, "income": 500, "max_count": 2},
        {"name": "üè≠ –ó–∞–≤–æ–¥", "price": 25000, "income": 1250, "max_count": 2},
        {"name": "üèõÔ∏è –ë–∞–Ω–∫", "price": 50000, "income": 2500, "max_count": 2},
        {"name": "üóº –í–µ–∂–∞", "price": 100000, "income": 5000, "max_count": 2}
    ]

class Roles:
    ROLES = [
        {"id": 1, "name": "–§–µ—Ä–º–µ—Ä", "price": 550, "description": "–î–æ–∑–≤–æ–ª—è—î –∫—É–ø–ª—è—Ç–∏ 6 –æ–¥–∏–Ω–∏—Ü—å –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É, +6% –¥–æ –ø–∞—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥—É"},
        {"id": 2, "name": "–ö–æ–ª–µ–∫—Ç–æ—Ä", "price": 890, "description": "–î–æ–∑–≤–æ–ª—è—î –∫—É–ø—É–≤–∞—Ç–∏ 4 –æ–¥–∏–Ω–∏—Ü—ñ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ, +5% –¥–æ –ø–∞—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥—É"},
        {"id": 3, "name": "–°—Ç—É–¥–µ–Ω—Ç", "price": 920, "description": "+5% –¥–æ XP, –ª—ñ–º—ñ—Ç –ø–∏—Ç–∞–Ω—å –¥–æ 25 –≤ –¥–µ–Ω—å"},
        {"id": 4, "name": "–ê–∫—Ç–∏–≤–Ω–∏–π", "price": 980, "description": "+3% –¥–æ —Ç–∞–ø—ñ–≤, –ª—ñ–º—ñ—Ç —Ç–∞–ø—ñ–≤ –¥–æ 2500 –≤ –¥–µ–Ω—å"},
        {"id": 5, "name": "–©–∞—Å–ª–∏–≤—á–∏–∫", "price": 1100, "description": "–ë–æ–Ω—É—Å 60 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤–∏–≥—Ä–∞—à—ñ –≤ —Ä—É–ª–µ—Ç—Ü—ñ"},
        {"id": 6, "name": "–í–æ—ó–Ω", "price": 1300, "description": "–ë–æ–Ω—É—Å 50 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤–∏–≥—Ä–∞—à—ñ –≤ PvP"},
        {"id": 7, "name": "–ë–ê–ù–ö–Ü–†", "price": 7300, "description": "–û—Ç—Ä–∏–º—É—î –∫–æ–º—ñ—Å—ñ—ó, –±–µ–∑ –∫–æ–º—ñ—Å—ñ–π —É –ø—Ä–æ–¥–∞–∂–∞—Ö, +25 –º–æ–Ω–µ—Ç/6 –≥–æ–¥–∏–Ω"}
    ]

class Prefixes:
    PREFIXES = [
        {"id": 371, "name": "–ö—ñ—Ç", "price": 800},
        {"id": 482, "name": "–ë–∞–Ω–¥–∏—Ç", "price": 910},
        {"id": 228, "name": "–í–æ—Ä", "price": 1230},
        {"id": 567, "name": "–õ–µ–≥–µ–Ω–¥–∞", "price": 1400},
        {"id": 566, "name": "–ë–æ—Å—Å", "price": 1450},
        {"id": 577, "name": "–ì–µ–π–º–µ—Ä", "price": 1500},
        {"id": 666, "name": "–û–ø–∞—Å–Ω–∏–π", "price": 1670},
        {"id": 888, "name": "–ù–∞–¥–∑–∏—Ä–∞—Ç–µ–ª—å‚öúÔ∏è", "price": 2100},
        {"id": 999, "name": "‚ôªÔ∏è", "price": 3200},
        {"id": 987, "name": "‚ö†Ô∏è", "price": 4500},
        {"id": 876, "name": "üî±", "price": 5600}
    ]

class DailyTasks:
    TASKS = [
        {"type": "spin_roulette", "target": 2, "reward": 50, "description": "–ü—Ä–æ–∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É 2 —Ä–∞–∑–∏"},
        {"type": "tap_count", "target": 500, "reward": 30, "description": "–ó—Ä–æ–±–∏ 500 —Ç–∞–ø—ñ–≤"},
        {"type": "tap_count", "target": 1000, "reward": 60, "description": "–ó—Ä–æ–±–∏ 1000 —Ç–∞–ø—ñ–≤"},
        {"type": "play_minigames", "target": 3, "reward": 40, "description": "–ó—ñ–≥—Ä–∞–π 3 —Ä–∞–∑–∏ —É –º—ñ–Ω—ñ-—ñ–≥—Ä–∏"},
        {"type": "correct_answers", "target": 5, "reward": 60, "description": "–î–∞–π—Ç–µ 5 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"},
        {"type": "buy_animals", "target": 2, "reward": 80, "description": "–ö—É–ø–∏ 2 —Ç–≤–∞—Ä–∏–Ω–∏"}
    ]

# ========== –ë–ê–ó–û–í–Ü –§–£–ù–ö–¶–Ü–á ==========
#------====== PASS =======-------
def can_get_passport(user_id: int) -> Dict:
    level = get_user_level(user_id)
    coins = get_user_coins(user_id)
    
    if level < 2:
        return {"can": False, "reason": "‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω 2 —Ä—ñ–≤–µ–Ω—å!"}
    if coins < 1000:
        return {"can": False, "reason": f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 1000 ‚úØ (—É –≤–∞—Å {coins} ‚úØ)"}
    return {"can": True, "reason": "‚úÖ –ú–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç!"}

def buy_passport(user_id: int) -> bool:
    check = can_get_passport(user_id)
    if not check["can"]:
        return False
    
    cursor.execute("UPDATE players SET coins = coins - 1000, has_passport = TRUE WHERE user_id = ?", (user_id,))
    conn.commit()
    return True

def create_progress_bar(percentage: float, length: int = 10) -> str:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä"""
    filled = int(length * percentage / 100)
    empty = length - filled
    return f"‚ñà" * filled + "‚ñë" * empty
#===================== craft
def get_user_craftable_items(user_id: int) -> List[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –∫—Ä–∞—Ñ—Ç—É –ø—Ä–µ–¥–º–µ—Ç–∏"""
    user_items = get_user_inventory(user_id)
    craftable = []
    
    for recipe in CraftingRecipes.RECIPES:
        can_craft = True
        missing_ingredients = []
        
        for ingredient in recipe["ingredients"]:
            # –†–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
            required_count = ingredient["quantity"]
            user_count = sum(1 for item in user_items if item["name"] == ingredient["name"])
            
            if user_count < required_count:
                can_craft = False
                missing_ingredients.append(f"{ingredient['name']} ({user_count}/{required_count})")
        
        craftable.append({
            "recipe": recipe,
            "can_craft": can_craft,
            "missing_ingredients": missing_ingredients
        })
    
    return craftable

def craft_item(user_id: int, recipe_id: int) -> Dict:
    """–í–∏–∫–æ–Ω–∞—Ç–∏ –∫—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞"""
    recipe = next((r for r in CraftingRecipes.RECIPES if r["id"] == recipe_id), None)
    if not recipe:
        return {"success": False, "message": "‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"}
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    user_items = get_user_inventory(user_id)
    user_coins = get_user_coins(user_id)
    
    if user_coins < recipe["cost"]:
        return {"success": False, "message": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –∫—Ä–∞—Ñ—Ç—É!"}
    
    for ingredient in recipe["ingredients"]:
        required_count = ingredient["quantity"]
        user_count = sum(1 for item in user_items if item["name"] == ingredient["name"])
        
        if user_count < required_count:
            return {"success": False, "message": f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ {ingredient['name']}!"}
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏
    for ingredient in recipe["ingredients"]:
        for _ in range(ingredient["quantity"]):
            remove_from_inventory(user_id, ingredient["name"])
    
    # –°–ø–∏—Å—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫—Ä–∞—Ñ—Ç—É
    cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", (recipe["cost"], user_id))
    
    # –î–æ–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if recipe["result"] == "random_car":
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –º–∞—à–∏–Ω—É
        car = get_random_car()
        add_to_inventory(user_id, car["name"], car["price"], "car")
        result_message = f"üéâ –í–∏ —Å–∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞–ª–∏: {car['name']} ({car['class']} –∫–ª–∞—Å—Å)!"
    else:
        add_to_inventory(user_id, recipe["result"], recipe["result_price"], recipe["result_type"])
        result_message = f"üéâ –í–∏ —Å–∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞–ª–∏: {recipe['result']}!"
    
    conn.commit()
    return {"success": True, "message": result_message}

def get_random_car() -> Dict:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É –º–∞—à–∏–Ω—É –∑–≥—ñ–¥–Ω–æ –∑ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—è–º–∏"""
    r = random.random()
    cumulative_prob = 0.0
    
    for car in Cars.CARS:
        cumulative_prob += car["probability"]
        if r <= cumulative_prob:
            return car
    
    return Cars.CARS[0]  # fallback

# –î–æ–¥–∞—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Ü–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π:
def check_passport_required(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–∞—Å–ø–æ—Ä—Ç"""
    cursor.execute("SELECT has_passport FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else False

# –í –∫–æ–∂–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –ø–æ—á–∞—Ç–∫—É:
@dp.callback_query_handler(lambda c: c.data in ['shop_farm', 'shop_real_estate', 'shop_roles', 'shop_prefixes', 'menu_income', 'menu_friends', 'inventory_view'])
async def check_passport_access(call: types.CallbackQuery):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π, —â–æ –≤–∏–º–∞–≥–∞—é—Ç—å –ø–∞—Å–ø–æ—Ä—Ç"""
    user_id = call.from_user.id
    
    if not check_passport_required(user_id):
        await call.answer("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∑ –ø–∞—Å–ø–æ—Ä—Ç–æ–º! –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ.", show_alert=True)
        return
    
    # –Ø–∫—â–æ –ø–∞—Å–ø–æ—Ä—Ç —î - –ø–µ—Ä–µ–¥–∞—î–º–æ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞
    if call.data == 'shop_farm':
        await cb_shop_farm(call)
    elif call.data == 'shop_real_estate':
        await cb_shop_real_estate(call)
    elif call.data == 'shop_roles':
        await cb_shop_roles(call)
    elif call.data == 'shop_prefixes':
        await cb_shop_prefixes(call)
    elif call.data == 'menu_income':
        await cb_menu_income(call)
    elif call.data == 'menu_friends':
        await cb_menu_friends(call)
    elif call.data == 'inventory_view':
        await cb_inventory_view(call)

def ensure_player(user_id: int, username: str):
    cursor.execute("SELECT user_id FROM players WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO players (user_id, username, last_active, last_tap_reset) VALUES (?, ?, ?, ?)",
            (user_id, username, datetime.now().isoformat(), datetime.now().date().isoformat())
        )
        # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤–∏—Ö —Ç–≤–∞—Ä–∏–Ω
        try:
            cursor.execute(
                "INSERT INTO farm_animals (user_id, animal_type, income, count) VALUES (?, ?, ?, ?)",
                (user_id, "üêî –ö—É—Ä–∫–∞", 5, 1)
            )
        except:
            pass
        conn.commit()

def get_user_coins(user_id: int) -> int:
    cursor.execute("SELECT coins FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def get_user_level(user_id: int) -> int:
    cursor.execute("SELECT level FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 1

def get_user_role(user_id: int) -> str:
    cursor.execute("SELECT role FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else "–ù–æ–≤–∞—á–æ–∫"

def get_user_prefix(user_id: int) -> str:
    cursor.execute("SELECT prefix FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else ""

def add_user_coins(user_id: int, coins: int):
    cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (coins, user_id))
    conn.commit()

def get_user_farm_income(user_id: int) -> int:
    cursor.execute("SELECT SUM(income * count) FROM farm_animals WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    base_income = result[0] if result and result[0] else 0
    
    # –ë–æ–Ω—É—Å–∏ –≤—ñ–¥ —Ä–æ–ª–µ–π
    role = get_user_role(user_id)
    if role == "–§–µ—Ä–º–µ—Ä":
        base_income = int(base_income * 1.06)
    elif role == "–ö–æ–ª–µ–∫—Ç–æ—Ä":
        base_income = int(base_income * 1.05)
    
    return base_income

def get_user_real_estate_income(user_id: int) -> int:
    cursor.execute("SELECT SUM(income) FROM user_real_estate WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    base_income = result[0] if result and result[0] else 0
    
    # –ë–æ–Ω—É—Å–∏ –≤—ñ–¥ —Ä–æ–ª–µ–π
    role = get_user_role(user_id)
    if role == "–§–µ—Ä–º–µ—Ä":
        base_income = int(base_income * 1.06)
    elif role == "–ö–æ–ª–µ–∫—Ç–æ—Ä":
        base_income = int(base_income * 1.05)
    
    return base_income

def get_user_tap_stats(user_id: int) -> Dict:
    cursor.execute("SELECT tap_boost_level, total_taps, daily_taps, last_tap_reset FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    # –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Ç–∞–ø—ñ–≤ –Ω–∞ –Ω–æ–≤–∏–π –¥–µ–Ω—å
    today = datetime.now().date().isoformat()
    if result and result[3] != today:
        cursor.execute("UPDATE players SET daily_taps = 0, last_tap_reset = ? WHERE user_id = ?", (today, user_id))
        conn.commit()
        daily_taps = 0
    else:
        daily_taps = result[2] if result else 0
    
    if result:
        level, total_taps, _, _ = result
        income = TapGame.BOOST_LEVELS.get(level, {"income": 1})["income"]
        
        # –ë–æ–Ω—É—Å –≤—ñ–¥ —Ä–æ–ª—ñ –ê–∫—Ç–∏–≤–Ω–∏–π
        role = get_user_role(user_id)
        if role == "–ê–∫—Ç–∏–≤–Ω–∏–π":
            income = int(income * 1.03)
        
        return {
            "level": level, 
            "income": income, 
            "total_taps": total_taps,
            "daily_taps": daily_taps
        }
    return {"level": 1, "income": 1, "total_taps": 0, "daily_taps": 0}

def get_daily_tap_limit(user_id: int) -> int:
    level = get_user_level(user_id)
    role = get_user_role(user_id)
    
    if level <= 5:
        return float('inf')  # –ë–µ–∑ –ª—ñ–º—ñ—Ç—É –¥–ª—è —Ä—ñ–≤–Ω—ñ–≤ <= 5
    
    if role == "–ê–∫—Ç–∏–≤–Ω–∏–π":
        return DAILY_TAP_LIMIT_ACTIVE
    else:
        return DAILY_TAP_LIMIT_BASE

def can_user_tap(user_id: int) -> bool:
    tap_stats = get_user_tap_stats(user_id)
    daily_limit = get_daily_tap_limit(user_id)
    return tap_stats["daily_taps"] < daily_limit

def get_total_passive_income(user_id: int) -> int:
    farm_income = get_user_farm_income(user_id)
    estate_income = get_user_real_estate_income(user_id)
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –¥–æ—Ö—ñ–¥ –¥–ª—è –ë–∞–Ω–∫—ñ—Ä–∞
    role = get_user_role(user_id)
    if role == "–ë–ê–ù–ö–Ü–†":
        estate_income += 25
    
    return farm_income + estate_income

# –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ...
def get_user_friends(user_id: int) -> List[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤"""
    cursor.execute("SELECT friend_id, friend_username, added_date FROM friends WHERE user_id = ? ORDER BY added_date DESC", (user_id,))
    friends = []
    for friend_id, username, added_date in cursor.fetchall():
        friends.append({
            "user_id": friend_id,
            "username": username,
            "added_date": added_date
        })
    return friends

def add_friend(user_id: int, friend_id: int, friend_username: str):
    """–î–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–∞"""
    try:
        cursor.execute(
            "INSERT INTO friends (user_id, friend_id, friend_username, added_date) VALUES (?, ?, ?, ?)",
            (user_id, friend_id, friend_username, datetime.now().isoformat())
        )
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False  # –í–∂–µ —î –≤ –¥—Ä—É–∑—è—Ö

def transfer_money(from_user_id: int, to_user_id: int, amount: int) -> bool:
    """–ü–µ—Ä–µ–∫–∞–∑ –≥—Ä–æ—à–µ–π"""
    if from_user_id == to_user_id:
        return False
    
    from_coins = get_user_coins(from_user_id)
    if from_coins < amount:
        return False
    
    # –ö–æ–º—ñ—Å—ñ—è 5% (–∫—Ä—ñ–º –ë–∞–Ω–∫—ñ—Ä–∞)
    commission = 0 if get_user_role(from_user_id) == "–ë–ê–ù–ö–Ü–†" else ceil(amount * 0.05)
    final_amount = amount - commission
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–∫–∞–∑
    cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", (amount, from_user_id))
    cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (final_amount, to_user_id))
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –ø–µ—Ä–µ–∫–∞–∑
    cursor.execute(
        "INSERT INTO money_transfers (from_user_id, to_user_id, amount, transfer_date) VALUES (?, ?, ?, ?)",
        (from_user_id, to_user_id, amount, datetime.now().isoformat())
    )
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–º—ñ—Å—ñ—é –¥–æ –±–∞–Ω–∫—ñ—Ä–∞
    if commission > 0:
        cursor.execute("SELECT user_id FROM players WHERE role = '–ë–ê–ù–ö–Ü–†'")
        banker = cursor.fetchone()
        if banker:
            banker_id = banker[0]
            cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (commission, banker_id))
            cursor.execute(
                "INSERT INTO bank_income (user_id, total_commission) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET total_commission = total_commission + ?",
                (banker_id, commission, commission)
            )
    
    conn.commit()
    return True
#=========== –ú–ê–ì–ê–ó–ò–ù –£–†–û–í–ù–Ü–í ===============
def buy_level(user_id: int) -> Dict:
    """–ö—É–ø–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å"""
    current_level = get_user_level(user_id)
    next_level = current_level + 1
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É: 1500 * 2^(current_level-1)
    price = 1500 * (2 ** (current_level - 1))
    
    user_coins = get_user_coins(user_id)
    
    if user_coins < price:
        return {"success": False, "message": f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ {price} ‚úØ"}
    
    # –°–ø–∏—Å—É—î–º–æ –º–æ–Ω–µ—Ç–∏ —Ç–∞ –ø—ñ–¥–≤–∏—â—É—î–º–æ —Ä—ñ–≤–µ–Ω—å
    cursor.execute("UPDATE players SET coins = coins - ?, level = ? WHERE user_id = ?", 
                   (price, next_level, user_id))
    conn.commit()
    
    return {
        "success": True, 
        "message": f"üéâ –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–æ –¥–æ {next_level}!",
        "price": price,
        "new_level": next_level
    }

def add_user_xp(user_id: int, xp: int):
    # –ë–æ–Ω—É—Å –¥–ª—è –°—Ç—É–¥–µ–Ω—Ç–∞
    role = get_user_role(user_id)
    if role == "–°—Ç—É–¥–µ–Ω—Ç":
        xp = int(xp * 1.05)
    
    cursor.execute("UPDATE players SET xp = xp + ? WHERE user_id = ?", (xp, user_id))
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è (—Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ XP)
    current_level = get_user_level(user_id)
    current_xp = get_user_xp(user_id)
    xp_needed = current_level * XP_PER_LEVEL
    
    if current_xp >= xp_needed:
        new_level = current_level + 1
        cursor.execute("UPDATE players SET level = ? WHERE user_id = ?", (new_level, user_id))
        conn.commit()
        return new_level
    return current_level

#=========== PROFILE NO PASS ==========
async def show_profile_without_passport(call: types.CallbackQuery, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –±–µ–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    cursor.execute("SELECT username, level, coins FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if result:
        username, level, coins = result
        check = can_get_passport(user_id)
        
        text = (
            f"üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å –≥—Ä–∞–≤—Ü—è</b>\n\n"
            f"üÜî ID: {user_id}\n"
            f"üë§ –Ü–º'—è: {username}\n"
            f"üíé –ë–∞–ª–∞–Ω—Å: {coins} ‚úØ\n"
            f"üéØ –†—ñ–≤–µ–Ω—å: {level}\n\n"
            f"‚ùå <b>–£ –≤–∞—Å –Ω–µ–º–∞—î –ø–∞—Å–ø–æ—Ä—Ç–∞!</b>\n\n"
        )
        
        if check["can"]:
            text += f"‚úÖ {check['reason']}\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç –∑–∞ 1000 ‚úØ"
        else:
            text += f"üìã <b>–£–º–æ–≤–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Å–ø–æ—Ä—Ç–∞:</b>\n"
            text += f"‚Ä¢ üéØ 2 —Ä—ñ–≤–µ–Ω—å (—É –≤–∞—Å {level})\n"
            f"‚Ä¢ üí∞ 1000 –º–æ–Ω–µ—Ç (—É –≤–∞—Å {coins})\n\n"
            f"üí° {check['reason']}"
        
        kb = InlineKeyboardMarkup()
        
        if check["can"]:
            kb.add(InlineKeyboardButton("üõÇ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç (1000 ‚úØ)", callback_data="buy_passport"))
        
        # –¢–Ü–õ–¨–ö–ò —Ü—ñ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –±–µ–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞
        kb.add(InlineKeyboardButton("üéÆ –Ü–≥—Ä–∏", callback_data="menu_games"))
        kb.add(InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop_levels"))  # –¢—ñ–ª—å–∫–∏ —Ä—ñ–≤–Ω—ñ!
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
        
        await call.message.edit_text(text, reply_markup=kb)

def can_get_passport(user_id: int) -> Dict:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–µ –≥—Ä–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç"""
    level = get_user_level(user_id)
    coins = get_user_coins(user_id)
    
    if level < 2:
        return {"can": False, "reason": "‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω 2 —Ä—ñ–≤–µ–Ω—å!"}
    if coins < 1000:
        return {"can": False, "reason": f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 1000 ‚úØ"}
    return {"can": True, "reason": "‚úÖ –ú–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç!"}

def buy_passport(user_id: int) -> bool:
    """–ö—É–ø–∏—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç"""
    check = can_get_passport(user_id)
    if not check["can"]:
        return False
    
    cursor.execute("UPDATE players SET coins = coins - 1000, has_passport = TRUE WHERE user_id = ?", (user_id,))
    conn.commit()
    return True

async def show_beautiful_passport(call: types.CallbackQuery, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∏–ª—å–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø–∞—Å–ø–æ—Ä—Ç"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è
    cursor.execute("SELECT username, level, coins, role, total_taps, last_active FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if not result:
        await call.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
        return
    
    username, level, coins, role, total_taps, last_active = result
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–æ—Ö—ñ–¥
    farm_income = get_user_farm_income(user_id)
    estate_income = get_user_real_estate_income(user_id)
    total_income = farm_income + estate_income
    
    # –ü—Ä–æ–≥—Ä–µ—Å —Ä—ñ–≤–Ω—è
    xp_needed = level * XP_PER_LEVEL
    current_xp = get_user_xp(user_id)
    progress_percent = min(int((current_xp / xp_needed) * 100), 100) if xp_needed > 0 else 0
    progress_bar = create_modern_progress_bar(progress_percent)
    
    # –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    reg_date = last_active[:10] if last_active else "–ù–ï–í–Ü–î–û–ú–û"
    
    # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞
    passport_number = f"P-{user_id % 10000:04d}"
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∏—Å–ª–∞
    formatted_coins = f"{coins:,}"
    formatted_income = f"{total_income:,}"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∏–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞
    text = (
        f"‚ü°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ü°\n"
        f"      üõÇ  <b>–ü–ê–°–ü–û–†–¢</b>\n"
        f"‚ü°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ü°\n\n"
        f"<b>üë§ USER:</b> {username}\n"
        f"<b>üÜî ID :</b> #{user_id}\n"
        f"<b>‚≠ê LVL:</b> {level} ‚ü£ {progress_bar} {progress_percent}%\n"
        f"<b>üí∞ CREDITS:</b> {formatted_coins} ‚úØ\n"
        f"<b>üè† BASE INCOME:</b> {formatted_income} ‚úØ / 6H\n"
        f"<b>üé≠ ROLE:</b> {get_english_role(role)}\n"
        f"<b>üìÖ DATE ISSUED:</b> {reg_date}\n\n"
        f"‚ü°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ü°\n"
        f"   <b>AUTHORIZED ACCESS:</b> #{passport_number}\n"
        f"‚ü°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ü°\n\n"
        f"<i>‚ü° SYSTEM IDENTITY CONFIRMED ‚ü°</i>"
    )
    
    await call.message.edit_text(text, reply_markup=build_passport_menu(user_id))

def create_modern_progress_bar(percentage: float) -> str:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É—á–∞—Å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä"""
    filled = int(10 * percentage / 100)
    empty = 10 - filled
    return f"‚ñà" * filled + "‚ñë" * empty

def get_english_role(role: str) -> str:
    """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–æ–ª—å –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É"""
    role_map = {
        "–ù–æ–≤–∞—á–æ–∫": "NEWBIE",
        "–§–µ—Ä–º–µ—Ä": "FARMER", 
        "–ö–æ–ª–µ–∫—Ç–æ—Ä": "COLLECTOR",
        "–°—Ç—É–¥–µ–Ω—Ç": "STUDENT",
        "–ê–∫—Ç–∏–≤–Ω–∏–π": "ACTIVE",
        "–©–∞—Å–ª–∏–≤—á–∏–∫": "LUCKY",
        "–í–æ—ó–Ω": "WARRIOR",
        "–ë–ê–ù–ö–Ü–†": "BANKER"
    }
    return role_map.get(role, role.upper())

def get_user_emoji(role: str) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –µ–º–æ–¥–∑—ñ –¥–ª—è —Ä–æ–ª—ñ"""
    emoji_map = {
        "–ù–æ–≤–∞—á–æ–∫": "üë∂",
        "–§–µ—Ä–º–µ—Ä": "üë®‚Äçüåæ", 
        "–ö–æ–ª–µ–∫—Ç–æ—Ä": "üè¢",
        "–°—Ç—É–¥–µ–Ω—Ç": "üéì",
        "–ê–∫—Ç–∏–≤–Ω–∏–π": "‚ö°",
        "–©–∞—Å–ª–∏–≤—á–∏–∫": "üçÄ",
        "–í–æ—ó–Ω": "‚öîÔ∏è",
        "–ë–ê–ù–ö–Ü–†": "üí∞"
    }
    return emoji_map.get(role, "üë§")

async def show_passport(call: types.CallbackQuery, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç –≥—Ä–∞–≤—Ü—è (–≥–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è)"""
    await show_beautiful_passport(call, user_id)

def build_passport_menu(user_id: int):
    """–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –º–µ–Ω—é –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    kb = InlineKeyboardMarkup(row_width=2)
    
    kb.add(
        InlineKeyboardButton("üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view"),
        InlineKeyboardButton("üë• –î—Ä—É–∑—ñ", callback_data="menu_friends"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
    )
    return kb

@dp.callback_query_handler(lambda c: c.data == 'buy_passport')
async def cb_buy_passport(call: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫—É–ø—ñ–≤–ª—ñ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    user_id = call.from_user.id
    
    if buy_passport(user_id):
        await call.answer("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!", show_alert=True)
        await cb_menu_profile(call)
    else:
        await call.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç!", show_alert=True)

def can_get_passport(user_id: int) -> Dict:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–µ –≥—Ä–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç"""
    level = get_user_level(user_id)
    coins = get_user_coins(user_id)
    
    if level < 2:
        return {"can": False, "reason": "‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω 2 —Ä—ñ–≤–µ–Ω—å!"}
    if coins < 1000:
        return {"can": False, "reason": f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 1000 ‚úØ"}
    return {"can": True, "reason": "‚úÖ –ú–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç!"}

def buy_passport(user_id: int) -> bool:
    """–ö—É–ø–∏—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç"""
    check = can_get_passport(user_id)
    if not check["can"]:
        return False
    
    cursor.execute("UPDATE players SET coins = coins - 1000, has_passport = TRUE WHERE user_id = ?", (user_id,))
    conn.commit()
    return True

@dp.callback_query_handler(lambda c: c.data == 'buy_passport')
async def cb_buy_passport(call: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫—É–ø—ñ–≤–ª—ñ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    user_id = call.from_user.id
    
    if buy_passport(user_id):
        await call.answer("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!", show_alert=True)
        await cb_menu_profile(call)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é (—Ç–µ–ø–µ—Ä –∑ –ø–∞—Å–ø–æ—Ä—Ç–æ–º)
    else:
        await call.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç!", show_alert=True)


# ========== –Ü–ù–í–ï–ù–¢–ê–† –¢–ê –ü–†–ï–î–ú–ï–¢–ò ==========
def get_user_inventory(user_id: int) -> List[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –≥—Ä–∞–≤—Ü—è (–¢–Ü–õ–¨–ö–ò –ø—Ä–µ–¥–º–µ—Ç–∏, –±–µ–∑ —Ä–æ–ª–µ–π)"""
    try:
        # –¢–Ü–õ–¨–ö–ò –ø—Ä–µ–¥–º–µ—Ç–∏, –±–µ–∑ —Ä–æ–ª–µ–π
        cursor.execute("""
            SELECT item_name, item_price, item_type, obtained_date 
            FROM user_inventory 
            WHERE user_id = ? 
            ORDER BY obtained_date DESC
        """, (user_id,))
        
        items = []
        for name, price, item_type, date in cursor.fetchall():
            items.append({
                "name": name,
                "price": price,
                "type": item_type,
                "date": date,
                "category": "item"
            })
        
        return items
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
        return []
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
        return []


#=============== FRIEND
def send_friend_request(from_user_id: int, to_user_id: int) -> bool:
    # –ó–∞–ø–∏—Å—É—î–º–æ –∑–∞–ø–∏—Ç –≤ –æ–∫—Ä–µ–º—É —Ç–∞–±–ª–∏—Ü—é
    pass

def accept_friend_request(request_id: int) -> bool:
    # –î–æ–¥–∞—î–º–æ –≤ –¥—Ä—É–∑—ñ
    pass

def reject_friend_request(request_id: int) -> bool:
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç
    pass

def remove_from_inventory(user_id: int, item_name: str) -> bool:
    """–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    # SQLite –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î LIMIT –≤ DELETE, —Ç–æ–º—É —Ä–æ–±–∏–º–æ —Ç–∞–∫:
    cursor.execute("""
        DELETE FROM user_inventory 
        WHERE id IN (
            SELECT id FROM user_inventory 
            WHERE user_id = ? AND item_name = ? 
            LIMIT 1
        )
    """, (user_id, item_name))
    conn.commit()
    return cursor.rowcount > 0

def get_user_roles(user_id: int) -> List[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–ª—ñ –≥—Ä–∞–≤—Ü—è"""
    cursor.execute("SELECT role_id, role_name, purchased_date FROM user_roles WHERE user_id = ?", (user_id,))
    roles = []
    for role_id, role_name, date in cursor.fetchall():
        roles.append({
            "id": role_id,
            "name": role_name,
            "purchased_date": date
        })
    return roles

def get_user_prefixes(user_id: int) -> List[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ—Ñ—ñ–∫—Å–∏ –≥—Ä–∞–≤—Ü—è"""
    cursor.execute("SELECT prefix_id, prefix_name, purchased_date FROM user_prefixes WHERE user_id = ?", (user_id,))
    prefixes = []
    for prefix_id, prefix_name, date in cursor.fetchall():
        prefixes.append({
            "id": prefix_id,
            "name": prefix_name,
            "purchased_date": date
        })
    return prefixes

def buy_role(user_id: int, role_id: int) -> bool:
    """–ö—É–ø–∏—Ç–∏ —Ä–æ–ª—å"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î —Ä–æ–ª—å
    if get_user_roles(user_id):
        return False  # –ú–æ–∂–Ω–∞ –º–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω—É —Ä–æ–ª—å
    
    role = next((r for r in Roles.ROLES if r["id"] == role_id), None)
    if not role:
        return False
    
    user_coins = get_user_coins(user_id)
    if user_coins < role["price"]:
        return False
    
    # –ö—É–ø—ñ–≤–ª—è —Ä–æ–ª—ñ
    cursor.execute("UPDATE players SET coins = coins - ?, role = ? WHERE user_id = ?", 
                   (role["price"], role["name"], user_id))
    cursor.execute(
        "INSERT INTO user_roles (user_id, role_id, role_name, purchased_date) VALUES (?, ?, ?, ?)",
        (user_id, role_id, role["name"], datetime.now().isoformat())
    )
    conn.commit()
    return True

def buy_prefix(user_id: int, prefix_id: int) -> bool:
    """–ö—É–ø–∏—Ç–∏ –ø—Ä–µ—Ñ—ñ–∫—Å"""
    prefix = next((p for p in Prefixes.PREFIXES if p["id"] == prefix_id), None)
    if not prefix:
        return False
    
    user_coins = get_user_coins(user_id)
    if user_coins < prefix["price"]:
        return False
    
    # –ö—É–ø—ñ–≤–ª—è –ø—Ä–µ—Ñ—ñ–∫—Å–∞
    cursor.execute("UPDATE players SET coins = coins - ?, prefix = ? WHERE user_id = ?", 
                   (prefix["price"], prefix["name"], user_id))
    cursor.execute(
        "INSERT INTO user_prefixes (user_id, prefix_id, prefix_name, purchased_date) VALUES (?, ?, ?, ?)",
        (user_id, prefix_id, prefix["name"], datetime.now().isoformat())
    )
    conn.commit()
    return True

# ========== –ê–£–ö–¶–Ü–û–ù –¢–ê –ü–†–û–î–ê–ñ–Ü ==========
def add_to_auction(user_id: int, item_name: str, item_type: str, original_price: int) -> bool:
    """–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω"""
    auction_price = int(original_price * 0.9)  # –ó–Ω–∏–∂–∫–∞ 10%
    
    cursor.execute(
        "INSERT INTO auction_items (user_id, item_name, item_type, original_price, auction_price, listed_date) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, item_name, item_type, original_price, auction_price, datetime.now().isoformat())
    )
    conn.commit()
    return True

def remove_from_auction(item_id: int) -> bool:
    """–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑ –∞—É–∫—Ü—ñ–æ–Ω—É"""
    cursor.execute("DELETE FROM auction_items WHERE id = ?", (item_id,))
    conn.commit()
    return cursor.rowcount > 0

def buy_from_auction(user_id: int, item_id: int) -> bool:
    """–ö—É–ø–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑ –∞—É–∫—Ü—ñ–æ–Ω—É"""
    cursor.execute("SELECT * FROM auction_items WHERE id = ?", (item_id,))
    item = cursor.fetchone()
    if not item:
        return False
    
    _, seller_id, item_name, item_type, original_price, auction_price, _ = item
    buyer_coins = get_user_coins(user_id)
    
    if buyer_coins < auction_price:
        return False
    
    # –ö–æ–º—ñ—Å—ñ—è 4%
    commission = int(auction_price * 0.04)
    seller_gets = auction_price - commission
    
    # –í–∏–∫–æ–Ω—É—î–º–æ —É–≥–æ–¥—É
    cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", (auction_price, user_id))
    cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (seller_gets, seller_id))
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–º—ñ—Å—ñ—é –¥–æ –±–∞–Ω–∫—ñ—Ä–∞
    cursor.execute("SELECT user_id FROM players WHERE role = '–ë–ê–ù–ö–Ü–†'")
    banker = cursor.fetchone()
    if banker:
        banker_id = banker[0]
        cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (commission, banker_id))
        cursor.execute(
            "INSERT INTO bank_income (user_id, total_commission) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET total_commission = total_commission + ?",
            (banker_id, commission, commission)
        )
    
    # –î–æ–¥–∞—î–º–æ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–∫—É–ø—Ü—é
    add_to_inventory(user_id, item_name, original_price, item_type)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞—É–∫—Ü—ñ–æ–Ω—É
    remove_from_auction(item_id)
    
    conn.commit()
    return True

def create_pending_sale(seller_id: int, buyer_id: int, item_name: str, item_type: str, price: int) -> bool:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É –ø—Ä–æ–¥–∞–∂"""
    cursor.execute(
        "INSERT INTO pending_sales (seller_id, buyer_id, item_name, item_type, price, created_date) VALUES (?, ?, ?, ?, ?, ?)",
        (seller_id, buyer_id, item_name, item_type, price, datetime.now().isoformat())
    )
    conn.commit()
    return True

def accept_pending_sale(sale_id: int) -> bool:
    """–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É –ø—Ä–æ–¥–∞–∂"""
    cursor.execute("SELECT * FROM pending_sales WHERE id = ?", (sale_id,))
    sale = cursor.fetchone()
    if not sale:
        return False
    
    _, seller_id, buyer_id, item_name, item_type, price, _ = sale
    
    buyer_coins = get_user_coins(buyer_id)
    if buyer_coins < price:
        return False
    
    # –ö–æ–º—ñ—Å—ñ—è 4% (–∫—Ä—ñ–º –ë–∞–Ω–∫—ñ—Ä–∞)
    commission = 0 if get_user_role(seller_id) == "–ë–ê–ù–ö–Ü–†" else int(price * 0.04)
    seller_gets = price - commission
    
    # –í–∏–∫–æ–Ω—É—î–º–æ —É–≥–æ–¥—É
    cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", (price, buyer_id))
    cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (seller_gets, seller_id))
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–º—ñ—Å—ñ—é –¥–æ –±–∞–Ω–∫—ñ—Ä–∞
    if commission > 0:
        cursor.execute("SELECT user_id FROM players WHERE role = '–ë–ê–ù–ö–Ü–†'")
        banker = cursor.fetchone()
        if banker:
            banker_id = banker[0]
            cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (commission, banker_id))
            cursor.execute(
                "INSERT INTO bank_income (user_id, total_commission) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET total_commission = total_commission + ?",
                (banker_id, commission, commission)
            )
    
    # –î–æ–¥–∞—î–º–æ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–∫—É–ø—Ü—é
    add_to_inventory(buyer_id, item_name, price, item_type)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É –ø—Ä–æ–¥–∞–∂
    cursor.execute("DELETE FROM pending_sales WHERE id = ?", (sale_id,))
    
    conn.commit()
    return True

def reject_pending_sale(sale_id: int) -> bool:
    """–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É –ø—Ä–æ–¥–∞–∂"""
    cursor.execute("DELETE FROM pending_sales WHERE id = ?", (sale_id,))
    conn.commit()
    return cursor.rowcount > 0

# ========== –©–û–î–ï–ù–ù–Ü –ó–ê–í–î–ê–ù–ù–Ø ==========
def get_daily_tasks_progress(user_id: int) -> Dict:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å"""
    today = datetime.now().date().isoformat()
    
    cursor.execute("SELECT * FROM daily_tasks WHERE user_id = ? AND task_date = ?", (user_id, today))
    task_data = cursor.fetchone()
    
    if not task_data:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
        cursor.execute(
            "INSERT INTO daily_tasks (user_id, task_date) VALUES (?, ?)",
            (user_id, today)
        )
        conn.commit()
        task_data = (0, user_id, today, 0, 0, 0, 0, 0)
    
    _, _, _, tasks_completed, spin_count, tap_count, minigames_count, correct_answers = task_data
    
    # –í–∏–±–∏—Ä–∞—î–º–æ 2 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å
    random.seed(f"{today}_{user_id}")
    daily_tasks = random.sample(DailyTasks.TASKS, 2)
    
    active_tasks = []
    for task in daily_tasks:
        if task["type"] == "spin_roulette":
            current = spin_count
        elif task["type"] == "tap_count":
            current = tap_count
        elif task["type"] == "play_minigames":
            current = minigames_count
        elif task["type"] == "correct_answers":
            current = correct_answers
        elif task["type"] == "buy_animals":
            current = tasks_completed
        else:
            current = 0
        
        completed = current >= task["target"]
        active_tasks.append({
            **task,
            "current": current,
            "completed": completed
        })
    
    return {
        "tasks_completed": tasks_completed,
        "active_tasks": active_tasks
    }

def update_daily_task(user_id: int, task_type: str, increment: int = 1):
    """–û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
    today = datetime.now().date().isoformat()
    
    cursor.execute("SELECT id FROM daily_tasks WHERE user_id = ? AND task_date = ?", (user_id, today))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO daily_tasks (user_id, task_date) VALUES (?, ?)",
            (user_id, today)
        )
    
    if task_type == "spin_roulette":
        cursor.execute("UPDATE daily_tasks SET spin_roulette_count = spin_roulette_count + ? WHERE user_id = ? AND task_date = ?", 
                       (increment, user_id, today))
    elif task_type == "tap_count":
        cursor.execute("UPDATE daily_tasks SET tap_count = tap_count + ? WHERE user_id = ? AND task_date = ?", 
                       (increment, user_id, today))
    elif task_type == "play_minigames":
        cursor.execute("UPDATE daily_tasks SET play_minigames_count = play_minigames_count + ? WHERE user_id = ? AND task_date = ?", 
                       (increment, user_id, today))
    elif task_type == "correct_answers":
        cursor.execute("UPDATE daily_tasks SET correct_answers_count = correct_answers_count + ? WHERE user_id = ? AND task_date = ?", 
                       (increment, user_id, today))
    elif task_type == "buy_animals":
        cursor.execute("UPDATE daily_tasks SET tasks_completed = tasks_completed + ? WHERE user_id = ? AND task_date = ?", 
                       (increment, user_id, today))
    
    conn.commit()

# ========== –ú–ï–ù–Æ ==========
def build_main_menu(user_id: int):
    kb = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üéÆ –Ü–≥—Ä–∏", callback_data="menu_games"),
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="menu_profile"),
        InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥–∏", callback_data="menu_income"),
        InlineKeyboardButton("üè¢ –ë—ñ–∑–Ω–µ—Å", callback_data="menu_business"),
        InlineKeyboardButton("üèÜ –¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤", callback_data="menu_leaderboard"),
        InlineKeyboardButton("üìã –ó–∞–≤–¥–∞–Ω–Ω—è", callback_data="daily_tasks"),
        InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="menu_shop"),
        InlineKeyboardButton("üè¶ –ë–∞–Ω–∫", callback_data="bank_loans")
    ]
    
    if user_id in [5672490558, 6446725004]:
        buttons.append(InlineKeyboardButton("üëë –ê–¥–º—ñ–Ω", callback_data="simple_admin_panel"))
    
    kb.add(*buttons)
    return kb

def build_games_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üéØ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="game_quiz"),
        InlineKeyboardButton("üëÜ Tap Game", callback_data="game_tap"),
        InlineKeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∏", callback_data="menu_roulettes"),
        InlineKeyboardButton("‚öîÔ∏è PvP –î—É–µ–ª—å", callback_data="game_pvp"),
        InlineKeyboardButton("üé≤ –ö—ñ—Å—Ç–∫–∏", callback_data="game_dice"),
        InlineKeyboardButton("üéØ –í–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="game_guess"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
    )
    return kb

def build_roulettes_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üé™ –†—É–ª–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤", callback_data="menu_item_roulette"),
        InlineKeyboardButton("üí∞ –ó–≤–∏—á–∞–π–Ω–∞ —Ä—É–ª–µ—Ç–∫–∞", callback_data="roulette_normal"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")
    )
    return kb

def build_income_menu(user_id: int):
    kb = InlineKeyboardMarkup(row_width=1)
    buttons = [
        InlineKeyboardButton("üêì –§–µ—Ä–º–∞", callback_data="income_farm"),
        InlineKeyboardButton("üèòÔ∏è –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", callback_data="income_real_estate"),
    ]
    
    # –ö–Ω–æ–ø–∫–∞ –±–∞–Ω–∫—É –¥–ª—è –ë–∞–Ω–∫—ñ—Ä–∞
    if get_user_role(user_id) == "–ë–ê–ù–ö–Ü–†":
        buttons.append(InlineKeyboardButton("üè¶ –ë–∞–Ω–∫", callback_data="bank_income"))
    
    buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
    kb.add(*buttons)
    return kb

def build_shop_menu(user_id: int):
    """–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    cursor.execute("SELECT has_passport FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    has_passport = result[0] if result else False
    
    kb = InlineKeyboardMarkup(row_width=1)
    
    if has_passport:
        # –ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –∑ –ø–∞—Å–ø–æ—Ä—Ç–æ–º
        kb.add(
            InlineKeyboardButton("üêì –§–µ—Ä–º–∞", callback_data="shop_farm"),
            InlineKeyboardButton("üèòÔ∏è –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", callback_data="shop_real_estate"),
            InlineKeyboardButton("üé≠ –†–æ–ª—ñ", callback_data="shop_roles"),
            InlineKeyboardButton("üè∑Ô∏è –ü—Ä–µ—Ñ—ñ–∫—Å–∏", callback_data="shop_prefixes"),
            InlineKeyboardButton("üéØ –†—ñ–≤–Ω—ñ", callback_data="shop_levels"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main")
        )
    else:
        # –û–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –±–µ–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞ - —Ç—ñ–ª—å–∫–∏ —Ä—ñ–≤–Ω—ñ
        kb.add(InlineKeyboardButton("üéØ –†—ñ–≤–Ω—ñ", callback_data="shop_levels"))
        kb.add(InlineKeyboardButton("üõÇ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç", callback_data="menu_profile"))
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
    
    return kb

def build_friends_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤", callback_data="friends_list"),
        InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–∞", callback_data="friends_add"),
        InlineKeyboardButton("üí∞ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥—Ä–æ—à—ñ", callback_data="friends_transfer"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_profile")
    )
    return kb

# –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ...
# ========== –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î ==========
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    
    ensure_player(user_id, username)
    cursor.execute("UPDATE players SET last_active = ? WHERE user_id = ?", 
                   (datetime.now().isoformat(), user_id))
    conn.commit()
    
    text = (
        f"üéÆ <b>–í—ñ—Ç–∞—é, {username}!</b>\n\n"
        f"üöÄ <b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞!</b>\n\n"
        f"üí´ <b>–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:</b>"
    )
    
    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ù–ï –≤–∏–¥–∞–ª—è—î–º–æ - –≤–æ–Ω–æ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –Ω–∞–∑–∞–≤–∂–¥–∏
    await message.answer(text, reply_markup=build_main_menu(user_id))

@dp.callback_query_handler(lambda c: c.data.startswith('menu_back|'))
async def cb_menu_back(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    username = call.from_user.username or call.from_user.full_name
    
    ensure_player(user_id, username)
    
    text = (
        f"üéÆ <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n"
        f"üí´ <b>–í—ñ—Ç–∞—é, {username}!</b>\n\n"
        f"üöÄ <b>–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:</b>"
    )
    
    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ù–ï –≤–∏–¥–∞–ª—è—î–º–æ
    await call.message.edit_text(text, reply_markup=build_main_menu(user_id))

@dp.callback_query_handler(lambda c: c.data == 'menu_profile')
async def cb_menu_profile(call: types.CallbackQuery):
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    cursor.execute("SELECT has_passport FROM players WHERE user_id = ?", (user_id,))
    has_passport = cursor.fetchone()[0]
    
    if not has_passport:
        # –ü—Ä–æ—Ñ—ñ–ª—å –ë–ï–ó –ø–∞—Å–ø–æ—Ä—Ç–∞
        await show_profile_without_passport(call, user_id)
    else:
        # –ü—Ä–æ—Ñ—ñ–ª—å –ó –ø–∞—Å–ø–æ—Ä—Ç–æ–º
        await show_passport(call, user_id)


#=============== VIEM PROFILE
@dp.callback_query_handler(lambda c: c.data.startswith('view_passport_'))
async def cb_view_passport(call: types.CallbackQuery):
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–∞—Å–ø–æ—Ä—Ç —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    pass

@dp.message_handler(commands=['sell'])
async def cmd_sell(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–µ–¥–º–µ—Ç–∞ —ñ–Ω—à–æ–º—É –≥—Ä–∞–≤—Ü—é"""
    user_id = message.from_user.id
    ensure_player(user_id, message.from_user.username or message.from_user.full_name)
    
    try:
        parts = message.text.split()
        if len(parts) != 4:
            await message.answer(
                "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "üìù <b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b>\n"
                "<code>/sell ID_–ø–æ–∫—É–ø—Ü—è ID_–ø—Ä–µ–¥–º–µ—Ç–∞ —Ü—ñ–Ω–∞</code>\n\n"
                "üìù <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
                "<code>/sell 123456789 22 500</code>\n\n"
                "üí° <b>ID –ø—Ä–µ–¥–º–µ—Ç–∞</b> –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ"
            )
            return
        
        buyer_id = int(parts[1])
        item_id = int(parts[2])
        price = int(parts[3])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if buyer_id == user_id:
            await message.answer("‚ùå –ù–µ –º–æ–∂–Ω–∞ –ø—Ä–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç —Å–∞–º–æ–º—É —Å–æ–±—ñ!")
            return
        
        if price < 10:
            await message.answer("‚ùå –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: 10 ‚úØ")
            return
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–º–µ—Ç –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ
        cursor.execute("SELECT item_name, item_type FROM user_inventory WHERE user_id = ?", (user_id,))
        items = cursor.fetchall()
        
        # –®—É–∫–∞—î–º–æ –ø—Ä–µ–¥–º–µ—Ç –∑–∞ ID
        item_found = None
        for item_name, item_type in items:
            for prize in ItemRoulettePrizes.PRIZES:
                if prize["id"] == item_id and prize["name"] == item_name:
                    item_found = (item_name, item_type, prize["price"])
                    break
            if item_found:
                break
        
        if not item_found:
            await message.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–æ–º—É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ!")
            return
        
        item_name, item_type, original_price = item_found
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ø–æ–∫—É–ø–µ—Ü—å
        cursor.execute("SELECT username FROM players WHERE user_id = ?", (buyer_id,))
        buyer_data = cursor.fetchone()
        
        if not buyer_data:
            await message.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å-–ø–æ–∫—É–ø–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
            return
        
        buyer_username = buyer_data[0]
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É –ø—Ä–æ–¥–∞–∂
        if create_pending_sale(user_id, buyer_id, item_name, item_type, price):
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–∫—É–ø—Ü—é (–ù–ï –≤–∏–¥–∞–ª—è—î–º–æ - –≤–∏—Å–∏—Ç—å –¥–æ —Ä—ñ—à–µ–Ω–Ω—è)
            try:
                await bot.send_message(
                    buyer_id,
                    f"üõçÔ∏è <b>–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø–æ–∫—É–ø–∫–∏</b>\n\n"
                    f"üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü—å:</b> {message.from_user.username or message.from_user.full_name}\n"
                    f"üéÅ <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {item_name}\n"
                    f"üí∞ <b>–¶—ñ–Ω–∞:</b> {price} ‚úØ\n\n"
                    f"üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {get_user_coins(buyer_id)} ‚úØ\n\n"
                    f"<i>–¶—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –≤–∞—à–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è</i>",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"accept_sale_{user_id}_{item_id}"),
                        InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_sale_{user_id}_{item_id}")
                    )
                )
                await message.answer(f"‚úÖ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≥—Ä–∞–≤—Ü—é {buyer_username}!")
            except Exception as e:
                await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≥—Ä–∞–≤—Ü—é. –ú–æ–∂–ª–∏–≤–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ–¥–∞–∂—É!")
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ========== –û–°–ù–û–í–ù–Ü –û–ë–†–û–ë–ù–ò–ö–ò –ú–ï–ù–Æ ==========
@dp.callback_query_handler(lambda c: c.data == 'menu_games')
async def cb_menu_games(call: types.CallbackQuery):
    await call.answer()
    text = (
        "üéÆ <b>–ú–µ–Ω—é —ñ–≥–æ—Ä</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É:\n\n"
        "‚Ä¢ üéØ <b>–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞</b> - –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è\n"
        "‚Ä¢ üëÜ <b>Tap Game</b> - –ö–ª–∞—Ü–∞–π—Ç–µ —Ç–∞ –∑–∞—Ä–æ–±–ª—è–π—Ç–µ\n"
        "‚Ä¢ üé∞ <b>–†—É–ª–µ—Ç–∫–∏</b> - –í–∏–≥—Ä–∞–≤–∞–π—Ç–µ –ø—Ä–∏–∑–∏\n"
        "‚Ä¢ ‚öîÔ∏è <b>PvP –î—É–µ–ª—å</b> - –ó–º–∞–≥–∞–π—Ç–µ—Å—å –∑ –≥—Ä–∞–≤—Ü—è–º–∏\n"
        "‚Ä¢ üé≤ <b>–ö—ñ—Å—Ç–∫–∏</b> - –ö–∏–Ω—å—Ç–µ –Ω–∞ —É–¥–∞—á—É\n"
        "‚Ä¢ üéØ <b>–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ</b> - –¢–µ—Å—Ç—É–π—Ç–µ —ñ–Ω—Ç—É—ó—Ü—ñ—é"
    )
    await call.message.edit_text(text, reply_markup=build_games_menu())

@dp.callback_query_handler(lambda c: c.data == 'menu_profile')
async def cb_menu_profile(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    cursor.execute("SELECT has_passport FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    has_passport = result[0] if result else False
    
    if not has_passport:
        # –ü—Ä–æ—Ñ—ñ–ª—å –ë–ï–ó –ø–∞—Å–ø–æ—Ä—Ç–∞
        await show_profile_without_passport(call, user_id)
    else:
        # –ü—Ä–æ—Ñ—ñ–ª—å –ó –ø–∞—Å–ø–æ—Ä—Ç–æ–º (–ø–æ–∫–∏ —Å—Ç–∞—Ä–∏–π –ø—Ä–æ—Ñ—ñ–ª—å)
        await show_old_profile(call, user_id)

async def show_old_profile(call: types.CallbackQuery, user_id: int):
    """–°—Ç–∞—Ä–∏–π –ø—Ä–æ—Ñ—ñ–ª—å (—Ç–∏–º—á–∞—Å–æ–≤–æ)"""
    cursor.execute("SELECT username, level, xp, coins, role, total_taps FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if result:
        username, level, xp, coins, role, total_taps = result
        prefix = get_user_prefix(user_id)
        farm_income = get_user_farm_income(user_id)
        estate_income = get_user_real_estate_income(user_id)
        total_passive = farm_income + estate_income
        
        text = (
            f"üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å –≥—Ä–∞–≤—Ü—è</b>\n\n"
            f"üÜî <b>ID:</b> {user_id}\n"
            f"üë§ <b>–Ü–º'—è:</b> {prefix} {username}\n"
            f"üéØ <b>–†—ñ–≤–µ–Ω—å:</b> {level}\n"
            f"üíé <b>–ú–æ–Ω–µ—Ç–∏:</b> {coins} ‚úØ\n"
            f"üé≠ <b>–†–æ–ª—å:</b> {role}\n"
            f"üëÜ <b>–¢–∞–ø—ñ–≤:</b> {total_taps}\n\n"
            f"üí∞ <b>–ü–∞—Å–∏–≤–Ω–∏–π –¥–æ—Ö—ñ–¥:</b>\n"
            f"‚Ä¢ üêì –§–µ—Ä–º–∞: {farm_income} ‚úØ/6 –≥–æ–¥\n"
            f"‚Ä¢ üèòÔ∏è –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å: {estate_income} ‚úØ/6 –≥–æ–¥\n"
            f"‚Ä¢ üí∞ –í—Å—å–æ–≥–æ: {total_passive} ‚úØ/6 –≥–æ–¥"
        )
        
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view"))
        kb.add(InlineKeyboardButton("üë• –î—Ä—É–∑—ñ", callback_data="menu_friends"))
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
        await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'menu_income')
async def cb_menu_income(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    farm_income = get_user_farm_income(user_id)
    estate_income = get_user_real_estate_income(user_id)
    total_passive = farm_income + estate_income
    
    text = (
        f"üí∞ <b>–°–∏—Å—Ç–µ–º–∞ –¥–æ—Ö–æ–¥—ñ–≤</b>\n\n"
        f"üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {get_user_coins(user_id)} ‚úØ\n\n"
        f"üìä <b>–ü–æ—Ç–æ—á–Ω—ñ –¥–æ—Ö–æ–¥–∏:</b>\n"
        f"‚Ä¢ üêì –§–µ—Ä–º–∞: {farm_income} ‚úØ/6 –≥–æ–¥\n"
        f"‚Ä¢ üèòÔ∏è –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å: {estate_income} ‚úØ/6 –≥–æ–¥\n"
        f"‚Ä¢ üí∞ –í—Å—å–æ–≥–æ –ø–∞—Å–∏–≤–Ω–æ: {total_passive} ‚úØ/6 –≥–æ–¥\n\n"
        f"üéØ <b>–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:</b>"
    )
    
    await call.message.edit_text(text, reply_markup=build_income_menu(user_id))

@dp.callback_query_handler(lambda c: c.data == 'menu_leaderboard')
async def cb_menu_leaderboard(call: types.CallbackQuery):
    await call.answer()
    cursor.execute("SELECT user_id, username, level, coins, role, prefix FROM players ORDER BY coins DESC LIMIT 10")
    top_players = cursor.fetchall()
    
    text = "üèÜ <b>–¢–æ–ø 10 –≥—Ä–∞–≤—Ü—ñ–≤</b>\n\n"
    
    if top_players:
        for i, (user_id, username, level, coins, role, prefix) in enumerate(top_players, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            display_name = f"{prefix} {username}" if prefix else username
            text += f"{medal} {display_name} - {coins} ‚úØ\n"
            text += f"   üéØ –†—ñ–≤–µ–Ω—å: {level} | üé≠ –†–æ–ª—å: {role}\n\n"
    else:
        text += "üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≥—Ä–∞–≤—Ü—ñ–≤\n"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="menu_leaderboard"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'menu_shop')
async def cb_menu_shop(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    cursor.execute("SELECT has_passport FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    has_passport = result[0] if result else False
    
    if has_passport:
        text = (
            "üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:\n\n"
            "‚Ä¢ üêì <b>–§–µ—Ä–º–∞</b> - –¢–≤–∞—Ä–∏–Ω–∏ –¥–ª—è –ø–∞—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥—É\n"
            "‚Ä¢ üèòÔ∏è <b>–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å</b> - –û–±'—î–∫—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ\n"
            "‚Ä¢ üé≠ <b>–†–æ–ª—ñ</b> - –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ\n"
            "‚Ä¢ üè∑Ô∏è <b>–ü—Ä–µ—Ñ—ñ–∫—Å–∏</b> - –°—Ç–∏–ª—å–Ω—ñ –ø–æ–∑–Ω–∞—á–∫–∏\n"
            "‚Ä¢ üéØ <b>–†—ñ–≤–Ω—ñ</b> - –®–≤–∏–¥–∫–µ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è\n\n"
            "üí° <b>–ü–æ—Ä–∞–¥–∞:</b> –Ü–Ω–≤–µ—Å—Ç—É–π—Ç–µ –≤ –ø–∞—Å–∏–≤–Ω–∏–π –¥–æ—Ö—ñ–¥!"
        )
    else:
        text = (
            "üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω</b>\n\n"
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ–º–∞—î –ø–∞—Å–ø–æ—Ä—Ç–∞!</b>\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞:</b>\n"
            "‚Ä¢ üéØ –ö—É–ø—ñ–≤–ª—è —Ä—ñ–≤–Ω—ñ–≤\n\n"
            "üìã <b>–ü–æ—Ç—Ä—ñ–±–µ–Ω –ø–∞—Å–ø–æ—Ä—Ç:</b>\n"
            "‚Ä¢ üêì –§–µ—Ä–º–∞\n‚Ä¢ üèòÔ∏è –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å\n‚Ä¢ üé≠ –†–æ–ª—ñ\n‚Ä¢ üè∑Ô∏è –ü—Ä–µ—Ñ—ñ–∫—Å–∏\n\n"
            "üí° –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ!"
        )
    
    await call.message.edit_text(text, reply_markup=build_shop_menu(user_id))

@dp.callback_query_handler(lambda c: c.data == 'menu_roulettes')
async def cb_menu_roulettes(call: types.CallbackQuery):
    await call.answer()
    text = (
        "üé∞ <b>–†—É–ª–µ—Ç–∫–∏</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä—É–ª–µ—Ç–∫–∏:\n\n"
        "‚Ä¢ üé™ <b>–†—É–ª–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</b> - –í–∏–≥—Ä–∞–≤–∞–π—Ç–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏\n"
        "‚Ä¢ üí∞ <b>–ó–≤–∏—á–∞–π–Ω–∞ —Ä—É–ª–µ—Ç–∫–∞</b> - –í–∏–≥—Ä–∞–≤–∞–π—Ç–µ –º–æ–Ω–µ—Ç–∏ (50 ‚úØ –∑–∞ —Å–ø—ñ–Ω)\n"
    )
    await call.message.edit_text(text, reply_markup=build_roulettes_menu())

@dp.callback_query_handler(lambda c: c.data == 'menu_friends')
async def cb_menu_friends(call: types.CallbackQuery):
    await call.answer()
    text = (
        "üë• <b>–°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑—ñ–≤</b>\n\n"
        "üìä <b>–§—É–Ω–∫—Ü—ñ—ó:</b>\n"
        "‚Ä¢ –î–æ–¥–∞–≤–∞–π—Ç–µ –¥—Ä—É–∑—ñ–≤ –∑–∞ ID\n"
        "‚Ä¢ –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –º–æ–Ω–µ—Ç–∏ –¥—Ä—É–∑—è–º\n"
        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤\n\n"
        "üí° <b>–ü–æ—Ä–∞–¥–∞:</b> ID –¥—Ä—É–≥–∞ –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –∑ –π–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é"
    )
    
    await call.message.edit_text(text, reply_markup=build_friends_menu())

@dp.callback_query_handler(lambda c: c.data.startswith('menu_back|'))
async def cb_menu_back(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    username = call.from_user.username or call.from_user.full_name
    
    ensure_player(user_id, username)
    
    text = (
        f"üéÆ <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n"
        f"üí´ <b>–í—ñ—Ç–∞—é, {username}!</b>\n\n"
        f"üöÄ <b>–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:</b>"
    )
    
    await call.message.edit_text(text, reply_markup=build_main_menu(user_id))
#====================== INFO ==========================
@dp.message_handler(commands=['info'])
async def cmd_info(message: types.Message):
    user_id = message.from_user.id
    ensure_player(user_id, message.from_user.username or message.from_user.full_name)
    
    cursor.execute("SELECT has_passport FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    has_passport = result[0] if result else False
    
    text = (
        f"‚ü°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ü°\n"
        f"      üìö  <b>–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ë–û–¢–ê</b>\n"
        f"‚ü°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ü°\n\n"
    )
    
    if not has_passport:
        text += (
            f"üéØ <b>–ï–¢–ê–ü 1: –ü–û–ß–ê–¢–û–ö –ì–†–ò</b>\n"
            f"1. –ì—Ä–∞–π—Ç–µ –≤ üéÆ <b>–Ü–≥—Ä–∏</b> –¥–ª—è –∑–∞—Ä–æ–±—ñ—Ç–∫—É\n"
            f"2. –û—Ç—Ä–∏–º–∞–π—Ç–µ üéØ <b>2 —Ä—ñ–≤–µ–Ω—å</b> —Ç–∞ 1000 ‚úØ\n"
            f"3. –ö—É–ø—ñ—Ç—å üõÇ <b>–ü–∞—Å–ø–æ—Ä—Ç</b> –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ\n\n"
            f"üìã <b>–î–û–°–¢–£–ü–ù–û –ë–ï–ó –ü–ê–°–ü–û–†–¢–ê:</b>\n"
            f"‚Ä¢ üéÆ –í—Å—ñ —ñ–≥—Ä–∏ (–∑–∞—Ä–æ–±–ª—è–π—Ç–µ –º–æ–Ω–µ—Ç–∏)\n"
            f"‚Ä¢ üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Ä—ñ–≤–Ω—ñ–≤ (–ø—ñ–¥–≤–∏—â—É–π—Ç–µ —Ä—ñ–≤–µ–Ω—å)\n"
            f"‚Ä¢ üë§ –ü—Ä–æ—Ñ—ñ–ª—å (–æ—Ç—Ä–∏–º–∞–π—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç)\n\n"
        )
    else:
        text += (
            f"‚úÖ <b>–£ –í–ê–° –Ñ –ü–ê–°–ü–û–†–¢!</b>\n\n"
            f"üéØ <b>–ü–û–í–ù–ò–ô –î–û–°–¢–£–ü:</b>\n"
        )
    
    text += (
        f"üìã <b>–û–°–ù–û–í–ù–Ü –†–û–ó–î–Ü–õ–ò:</b>\n"
        f"‚Ä¢ üéÆ <b>–Ü–≥—Ä–∏</b> - –∑–∞—Ä–æ–±–ª—è–π—Ç–µ –º–æ–Ω–µ—Ç–∏\n"
        f"‚Ä¢ üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω</b> - –∫—É–ø—É–π—Ç–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è\n"
        f"‚Ä¢ üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å</b> - –≤–∞—à –ø–∞—Å–ø–æ—Ä—Ç —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"‚Ä¢ üí∞ <b>–î–æ—Ö–æ–¥–∏</b> - –ø–∞—Å–∏–≤–Ω–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫\n"
        f"‚Ä¢ üì¶ <b>–Ü–Ω–≤–µ–Ω—Ç–∞—Ä</b> - –≤–∞—à—ñ –ø—Ä–µ–¥–º–µ—Ç–∏\n"
        f"‚Ä¢ üë• <b>–î—Ä—É–∑—ñ</b> - —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–∫–∞–∑–∏\n"
        f"‚Ä¢ üèÜ <b>–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤</b> - —Ä–µ–π—Ç–∏–Ω–≥\n\n"
    )
    
    text += (
        f"üéÆ <b>–Ü–ì–†–ò –î–õ–Ø –ó–ê–†–û–ë–Ü–¢–ö–£:</b>\n"
        f"‚Ä¢ üéØ <b>–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞</b> - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è\n"
        f"‚Ä¢ üëÜ <b>Tap Game</b> - –∫–ª—ñ–∫–∞–π—Ç–µ —Ç–∞ –∑–∞—Ä–æ–±–ª—è–π—Ç–µ\n"
        f"‚Ä¢ üé∞ <b>–†—É–ª–µ—Ç–∫–∏</b> - –≤–∏–≥—Ä–∞–≤–∞–π—Ç–µ –ø—Ä–∏–∑–∏\n"
        f"‚Ä¢ ‚öîÔ∏è <b>PvP –î—É–µ–ª—å</b> - –∑–º–∞–≥–∞–π—Ç–µ—Å—å –∑ –≥—Ä–∞–≤—Ü—è–º–∏\n"
        f"‚Ä¢ üé≤ <b>–ö—ñ—Å—Ç–∫–∏</b> - –≤–∏–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞—á—É\n"
        f"‚Ä¢ üéØ <b>–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ</b> - —Ç–µ—Å—Ç—É–π—Ç–µ —ñ–Ω—Ç—É—ó—Ü—ñ—é\n\n"
    )
    
    text += (
        f"üí∞ <b>–ü–ê–°–ò–í–ù–ò–ô –î–û–•–Ü–î:</b>\n"
        f"‚Ä¢ üêì <b>–§–µ—Ä–º–∞</b> - —Ç–≤–∞—Ä–∏–Ω–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç—å –¥–æ—Ö—ñ–¥\n"
        f"‚Ä¢ üèòÔ∏è <b>–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å</b> - –æ–±'—î–∫—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ\n"
        f"‚Ä¢ üí∞ –î–æ—Ö—ñ–¥ –Ω–∞—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω\n\n"
    )
    
    text += (
        f"üõçÔ∏è <b>–ú–ê–ì–ê–ó–ò–ù:</b>\n"
        f"‚Ä¢ üêì <b>–§–µ—Ä–º–∞</b> - —Ç–≤–∞—Ä–∏–Ω–∏\n"
        f"‚Ä¢ üèòÔ∏è <b>–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å</b> - –æ–±'—î–∫—Ç–∏\n"
        f"‚Ä¢ üé≠ <b>–†–æ–ª—ñ</b> - —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ\n"
        f"‚Ä¢ üè∑Ô∏è <b>–ü—Ä–µ—Ñ—ñ–∫—Å–∏</b> - —Å—Ç–∏–ª—å–Ω—ñ –ø–æ–∑–Ω–∞—á–∫–∏\n"
        f"‚Ä¢ üéØ <b>–†—ñ–≤–Ω—ñ</b> - —à–≤–∏–¥–∫–µ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è\n\n"
    )
    
    text += (
        f"‚ö° <b>–ö–û–†–ò–°–ù–Ü –ö–û–ú–ê–ù–î–ò:</b>\n"
        f"‚Ä¢ /start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        f"‚Ä¢ /info - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
        f"‚Ä¢ /profile - –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å\n"
        f"‚Ä¢ /shop - –º–∞–≥–∞–∑–∏–Ω\n"
        f"‚Ä¢ /games - —ñ–≥—Ä–∏\n"
        f"‚Ä¢ /inventory - —ñ–Ω–≤–µ–Ω—Ç–∞—Ä\n"
        f"‚Ä¢ /friends - –¥—Ä—É–∑—ñ\n\n"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
    
    await message.answer(text, reply_markup=kb)
# ========== –Ü–ù–í–ï–ù–¢–ê–† –¢–ê –ê–£–ö–¶–Ü–û–ù ==========

@dp.callback_query_handler(lambda c: c.data.startswith('sell_item_menu|'))
async def cb_sell_item_menu(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    page = int(call.data.split('|')[1])
    
    items_per_page = 10
    user_items = get_user_inventory(user_id)
    
    if not user_items:
        await call.message.edit_text(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É!</b>\n\n"
            "üé™ –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–∏ –∑ —Ä—É–ª–µ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory_view")
            )
        )
        return
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø—Ä–µ–¥–º–µ—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    total_pages = (len(user_items) + items_per_page - 1) // items_per_page
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_items = user_items[start_idx:end_idx]
    
    text = f"üí∞ <b>–ü—Ä–æ–¥–∞–∂ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</b>\n\n"
    text += f"üì¶ –ü—Ä–µ–¥–º–µ—Ç—ñ–≤: {len(user_items)}/10\n\n"
    
    kb = InlineKeyboardMarkup(row_width=2)
    
    for i, item in enumerate(page_items, start_idx + 1):
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø—Ä–µ–¥–º–µ—Ç–∞
        item_id = "??"
        
        if item["category"] == "role":
            # –î–ª—è —Ä–æ–ª–µ–π
            item_id = f"role_{item.get('role_id', '?')}"
            item_name_display = item["name"]
        else:
            # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
            for prize in ItemRoulettePrizes.PRIZES:
                if prize["name"] == item["name"]:
                    item_id = prize["id"]
                    break
            item_name_display = item["name"]
        
        text += f"{i}. {item_name_display} (ID: {item_id})\n"
        text += f"   üí∞ –¶—ñ–Ω–∞: {item['price']} ‚úØ\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É
        kb.row(
            InlineKeyboardButton(
                f"üéÅ {item_name_display[:10]}...", 
                callback_data=f"select_sell_item|{item_id}"
            ),
            InlineKeyboardButton(
                f"üí∞ {item['price']}‚úØ", 
                callback_data=f"quick_sell|{item_id}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±—ñ–ª—å—à–µ 1 —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    if total_pages > 1:
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sell_item_menu|{page-1}"))
        
        if page < total_pages:
            pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"sell_item_menu|{page+1}"))
        
        if pagination_buttons:
            kb.row(*pagination_buttons)
    
    kb.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory_view"))
    
    await call.message.edit_text(text, reply_markup=kb)
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø—Ä–µ–¥–º–µ—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    total_pages = (len(user_items) + items_per_page - 1) // items_per_page
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_items = user_items[start_idx:end_idx]
    
    text = f"üí∞ <b>–ü—Ä–æ–¥–∞–∂ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</b>\n\n"
    text += f"üì¶ –ü—Ä–µ–¥–º–µ—Ç—ñ–≤: {len(user_items)}/10\n\n"
    
    kb = InlineKeyboardMarkup(row_width=2)
    
    for i, item in enumerate(page_items, start_idx + 1):
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ ID –ø—Ä–µ–¥–º–µ—Ç–∞
        item_id = "??"
        for prize in ItemRoulettePrizes.PRIZES:
            if prize["name"] == item["name"]:
                item_id = prize["id"]
                break
        
        text += f"{i}. {item['name']} (ID: {item_id})\n"
        text += f"   üí∞ –¶—ñ–Ω–∞: {item['price']} ‚úØ\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É
        kb.row(
            InlineKeyboardButton(
                f"üéÅ {item['name'][:10]}...", 
                callback_data=f"select_sell_item|{item_id}"
            ),
            InlineKeyboardButton(
                f"üí∞ {item['price']}‚úØ", 
                callback_data=f"quick_sell|{item_id}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±—ñ–ª—å—à–µ 1 —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    if total_pages > 1:
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sell_item_menu|{page-1}"))
        
        if page < total_pages:
            pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"sell_item_menu|{page+1}"))
        
        if pagination_buttons:
            kb.row(*pagination_buttons)
    
    kb.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory_view"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('select_sell_item|'))
async def cb_select_sell_item(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    item_id_str = call.data.split('|')[1]  # –ó–º—ñ–Ω—é—î–º–æ –Ω–∞–∑–≤—É –∑–º—ñ–Ω–Ω–æ—ó
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Ä–æ–ª—å
    if item_id_str.startswith('role_'):
        # –¶–µ —Ä–æ–ª—å
        role_id = int(item_id_str.replace('role_', ''))
        cursor.execute("SELECT role_name FROM user_roles WHERE user_id = ? AND role_id = ?", (user_id, role_id))
        role_data = cursor.fetchone()
        
        if not role_data:
            await call.answer("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
            
        role_name = role_data[0]
        role_price = next((r["price"] for r in Roles.ROLES if r["id"] == role_id), 500)
        sell_price = int(role_price * 0.7)
        
        text = (
            f"üí∞ <b>–ü—Ä–æ–¥–∞–∂ —Ä–æ–ª—ñ</b>\n\n"
            f"üé≠ –†–æ–ª—å: {role_name}\n"
            f"üÜî ID: {item_id_str}\n"
            f"üíé –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: {role_price} ‚úØ\n"
            f"üí∞ –¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {sell_price} ‚úØ (70%)\n\n"
            f"‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b> –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂—ñ —Ä–æ–ª—ñ –≤–æ–Ω–∞ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é!"
        )
        
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("üí∞ –®–≤–∏–¥–∫–∞ –ø—Ä–æ–¥–∞–∂–∞", callback_data=f"quick_sell|{item_id_str}")
        )
        
    else:
        # –¶–µ –∑–≤–∏—á–∞–π–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç - —Å–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –≤ —á–∏—Å–ª–æ
        try:
            item_id = int(item_id_str)
        except ValueError:
            await call.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –ø—Ä–µ–¥–º–µ—Ç–∞!", show_alert=True)
            return
            
        item_name = None
        item_price = 0
        for prize in ItemRoulettePrizes.PRIZES:
            if prize["id"] == item_id:
                item_name = prize["name"]
                item_price = prize["price"]
                break
        
        if not item_name:
            await call.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
        
        text = (
            f"üí∞ <b>–ü—Ä–æ–¥–∞–∂ –ø—Ä–µ–¥–º–µ—Ç–∞</b>\n\n"
            f"üéÅ –ü—Ä–µ–¥–º–µ—Ç: {item_name}\n"
            f"üÜî ID: {item_id}\n"
            f"üíé –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: {item_price} ‚úØ\n\n"
            f"üìù <b>–í–∞—Ä—ñ–∞–Ω—Ç–∏ –ø—Ä–æ–¥–∞–∂—É:</b>\n"
            f"‚Ä¢ üè™ –ù–∞ –∞—É–∫—Ü—ñ–æ–Ω (90% —Ü—ñ–Ω–∏)\n"
            f"‚Ä¢ üí∞ –®–≤–∏–¥–∫–∞ –ø—Ä–æ–¥–∞–∂–∞ (70% —Ü—ñ–Ω–∏)\n\n"
        )
        
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("üè™ –ù–∞ –∞—É–∫—Ü—ñ–æ–Ω", callback_data=f"sell_auction|{item_id}"),
            InlineKeyboardButton("üí∞ –®–≤–∏–¥–∫–∞ –ø—Ä–æ–¥–∞–∂–∞", callback_data=f"quick_sell|{item_id}")
        )
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sell_item_menu|1"))
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('quick_sell|role_'))
async def cb_quick_sell_role(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    role_id = int(call.data.replace('quick_sell|role_', ''))
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä–æ–ª—å
    cursor.execute("SELECT role_name FROM user_roles WHERE user_id = ? AND role_id = ?", (user_id, role_id))
    role_data = cursor.fetchone()
    
    if not role_data:
        await call.answer("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
        
    role_name = role_data[0]
    role_price = next((r["price"] for r in Roles.ROLES if r["id"] == role_id), 500)
    sell_price = int(role_price * 0.7)  # 70% –≤—ñ–¥ —Ü—ñ–Ω–∏
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Ä–æ–ª—å
    cursor.execute("DELETE FROM user_roles WHERE user_id = ? AND role_id = ?", (user_id, role_id))
    
    # –ó–º—ñ–Ω—é—î–º–æ —Ä–æ–ª—å –≥—Ä–∞–≤—Ü—è –Ω–∞ "–ù–æ–≤–∞—á–æ–∫"
    cursor.execute("UPDATE players SET role = '–ù–æ–≤–∞—á–æ–∫' WHERE user_id = ?", (user_id,))
    
    # –î–æ–¥–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
    add_user_coins(user_id, sell_price)
    conn.commit()
    
    await call.answer(f"‚úÖ –†–æ–ª—å {role_name} –ø—Ä–æ–¥–∞–Ω–∞ –∑–∞ {sell_price} ‚úØ!", show_alert=True)
    await cb_inventory_view(call)

@dp.message_handler(commands=['sellrole'])
async def cmd_sellrole(message: types.Message):
    """–ü—Ä–æ–¥–∞—Ç–∏ —Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–æ—é"""
    user_id = message.from_user.id
    ensure_player(user_id, message.from_user.username or message.from_user.full_name)
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(
                "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "üìù <b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b>\n"
                "<code>/sellrole ID_—Ä–æ–ª—ñ</code>\n\n"
                "üìù <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
                "<code>/sellrole 1</code> - –ø—Ä–æ–¥–∞—Ç–∏ —Ä–æ–ª—å –§–µ—Ä–º–µ—Ä\n"
                "<code>/sellrole 7</code> - –ø—Ä–æ–¥–∞—Ç–∏ —Ä–æ–ª—å –ë–ê–ù–ö–Ü–†\n\n"
                "üí° <b>ID —Ä–æ–ª–µ–π:</b>\n"
                "1-–§–µ—Ä–º–µ—Ä, 2-–ö–æ–ª–µ–∫—Ç–æ—Ä, 3-–°—Ç—É–¥–µ–Ω—Ç\n"
                "4-–ê–∫—Ç–∏–≤–Ω–∏–π, 5-–©–∞—Å–ª–∏–≤—á–∏–∫, 6-–í–æ—ó–Ω, 7-–ë–ê–ù–ö–Ü–†"
            )
            return
        
        role_id = int(parts[1])
        
        if role_id < 1 or role_id > 7:
            await message.answer("‚ùå ID —Ä–æ–ª—ñ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 7!")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ä–æ–ª—å
        cursor.execute("SELECT role_name FROM user_roles WHERE user_id = ? AND role_id = ?", (user_id, role_id))
        role_data = cursor.fetchone()
        
        if not role_data:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î —Ü—ñ—î—ó —Ä–æ–ª—ñ!")
            return
            
        role_name = role_data[0]
        role_price = next((r["price"] for r in Roles.ROLES if r["id"] == role_id), 500)
        sell_price = int(role_price * 0.7)
        
        # –ü—Ä–æ–¥–∞—î–º–æ —Ä–æ–ª—å
        cursor.execute("DELETE FROM user_roles WHERE user_id = ? AND role_id = ?", (user_id, role_id))
        cursor.execute("UPDATE players SET role = '–ù–æ–≤–∞—á–æ–∫' WHERE user_id = ?", (user_id,))
        add_user_coins(user_id, sell_price)
        conn.commit()
        
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))  # –î–û–î–ê–Ñ–ú–û –ö–ù–û–ü–ö–£ –ù–ê–ó–ê–î
        
        await message.answer(
            f"‚úÖ <b>–†–æ–ª—å –ø—Ä–æ–¥–∞–Ω–∞!</b>\n\n"
            f"üé≠ –†–æ–ª—å: {role_name}\n"
            f"üÜî ID: {role_id}\n"
            f"üí∞ –û—Ç—Ä–∏–º–∞–Ω–æ: {sell_price} ‚úØ\n"
            f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
            f"‚ö° –í–∞—à–∞ —Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ '–ù–æ–≤–∞—á–æ–∫'",
            reply_markup=kb  # –î–û–î–ê–Ñ–ú–û –ö–õ–ê–í–Ü–ê–¢–£–†–£
        )
        
    except ValueError:
        await message.answer("‚ùå ID —Ä–æ–ª—ñ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith('select_sell_item|'))
async def cb_select_sell_item(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    item_id = int(call.data.split('|')[1])
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–º–µ—Ç
    item_name = None
    item_price = 0
    for prize in ItemRoulettePrizes.PRIZES:
        if prize["id"] == item_id:
            item_name = prize["name"]
            item_price = prize["price"]
            break
    
    if not item_name:
        await call.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    text = (
        f"üí∞ <b>–ü—Ä–æ–¥–∞–∂ –ø—Ä–µ–¥–º–µ—Ç–∞</b>\n\n"
        f"üéÅ –ü—Ä–µ–¥–º–µ—Ç: {item_name}\n"
        f"üíé –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: {item_price} ‚úØ\n\n"
        f"üìù <b>–í–∞—Ä—ñ–∞–Ω—Ç–∏ –ø—Ä–æ–¥–∞–∂—É:</b>\n"
        f"‚Ä¢ üè™ –ù–∞ –∞—É–∫—Ü—ñ–æ–Ω (90% —Ü—ñ–Ω–∏)\n"
        f"‚Ä¢ üë§ –Ü–Ω—à–æ–º—É –≥—Ä–∞–≤—Ü—é\n\n"
        f"üí° <b>–ü–æ—Ä–∞–¥–∞:</b> –ù–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π 24 –≥–æ–¥–∏–Ω–∏"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üè™ –ù–∞ –∞—É–∫—Ü—ñ–æ–Ω", callback_data=f"sell_auction|{item_id}"),
        InlineKeyboardButton("üë§ –Ü–Ω—à–æ–º—É –≥—Ä–∞–≤—Ü—é", callback_data=f"sell_player|{item_id}"),
        InlineKeyboardButton("üí∞ –®–≤–∏–¥–∫–∞ –ø—Ä–æ–¥–∞–∂–∞", callback_data=f"quick_sell|{item_id}"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sell_item_menu|1")
    )
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('sell_auction|'))
async def cb_sell_auction(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    item_id = int(call.data.split('|')[1])
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–º–µ—Ç
    item_data = None
    for prize in ItemRoulettePrizes.PRIZES:
        if prize["id"] == item_id:
            item_data = prize
            break
    
    if not item_data:
        await call.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø—Ä–µ–¥–º–µ—Ç –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ
    user_items = get_user_inventory(user_id)
    if not any(item["name"] == item_data["name"] for item in user_items):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!", show_alert=True)
        return
    
    # –î–æ–¥–∞—î–º–æ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω
    if add_to_auction(user_id, item_data["name"], item_data["type"], item_data["price"]):
        # –í–∏–¥–∞–ª—è—î–º–æ –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
        remove_from_inventory(user_id, item_data["name"])
        
        auction_price = int(item_data["price"] * 0.9)
        
        await call.message.edit_text(
            f"‚úÖ <b>–ü—Ä–µ–¥–º–µ—Ç –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω!</b>\n\n"
            f"üéÅ –ü—Ä–µ–¥–º–µ—Ç: {item_data['name']}\n"
            f"üí∞ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: {item_data['price']} ‚úØ\n"
            f"üè™ –¶—ñ–Ω–∞ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ: {auction_price} ‚úØ\n"
            f"üí∏ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ: {int(auction_price * 0.96)} ‚úØ\n\n"
            f"‚è∞ –ü—Ä–µ–¥–º–µ—Ç –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚öñÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∞—É–∫—Ü—ñ–æ–Ω—É", callback_data="auction_view|1"),
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sell_item_menu|1")
            )
        )
    else:
        await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data.startswith('quick_sell|'))
async def cb_quick_sell(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    item_id_str = call.data.replace('quick_sell|', '')
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Ä–æ–ª—å
    if item_id_str.startswith('role_'):
        # –®–≤–∏–¥–∫–∞ –ø—Ä–æ–¥–∞–∂ —Ä–æ–ª—ñ
        role_id = int(item_id_str.replace('role_', ''))
        cursor.execute("SELECT role_name FROM user_roles WHERE user_id = ? AND role_id = ?", (user_id, role_id))
        role_data = cursor.fetchone()
        
        if not role_data:
            await call.answer("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
            
        role_name = role_data[0]
        role_price = next((r["price"] for r in Roles.ROLES if r["id"] == role_id), 500)
        sell_price = int(role_price * 0.7)
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ä–æ–ª—å
        cursor.execute("DELETE FROM user_roles WHERE user_id = ? AND role_id = ?", (user_id, role_id))
        
        # –ó–º—ñ–Ω—é—î–º–æ —Ä–æ–ª—å –≥—Ä–∞–≤—Ü—è –Ω–∞ "–ù–æ–≤–∞—á–æ–∫"
        cursor.execute("UPDATE players SET role = '–ù–æ–≤–∞—á–æ–∫' WHERE user_id = ?", (user_id,))
        
        # –î–æ–¥–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
        add_user_coins(user_id, sell_price)
        conn.commit()
        
        await call.answer(f"‚úÖ –†–æ–ª—å {role_name} –ø—Ä–æ–¥–∞–Ω–∞ –∑–∞ {sell_price} ‚úØ!", show_alert=True)
        await cb_inventory_view(call)
        
    else:
        # –ó–≤–∏—á–∞–π–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç
        try:
            item_id = int(item_id_str)
        except ValueError:
            await call.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –ø—Ä–µ–¥–º–µ—Ç–∞!", show_alert=True)
            return
            
        # –°—Ç–∞—Ä–∏–π –∫–æ–¥ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
        item_data = None
        for prize in ItemRoulettePrizes.PRIZES:
            if prize["id"] == item_id:
                item_data = prize
                break
        
        if not item_data:
            await call.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
        
        # –®–≤–∏–¥–∫–∞ –ø—Ä–æ–¥–∞–∂–∞ - 70% –≤—ñ–¥ —Ü—ñ–Ω–∏
        quick_sell_price = int(item_data["price"] * 0.7)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
        remove_from_inventory(user_id, item_data["name"])
        
        # –î–æ–¥–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
        add_user_coins(user_id, quick_sell_price)
        
        await call.message.edit_text(
            f"üí∞ <b>–ü—Ä–µ–¥–º–µ—Ç —à–≤–∏–¥–∫–æ –ø—Ä–æ–¥–∞–Ω–æ!</b>\n\n"
            f"üéÅ –ü—Ä–µ–¥–º–µ—Ç: {item_data['name']}\n"
            f"üíé –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: {item_data['price']} ‚úØ\n"
            f"üè™ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏: {quick_sell_price} ‚úØ (70%)\n"
            f"üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–∞—Ç–∏ —â–µ", callback_data="sell_item_menu|1"),
                InlineKeyboardButton("‚¨ÖÔ∏è –í —ñ–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view")
            )
        )

@dp.callback_query_handler(lambda c: c.data == 'inventory_view')
async def cb_inventory_view(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    items = get_user_inventory(user_id)  # –¢—ñ–ª—å–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∏
    user_role = get_user_role(user_id)   # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å –≥—Ä–∞–≤—Ü—è
    
    total_items = len(items)
    
    text = f"üì¶ <b>–í–∞—à —ñ–Ω–≤–µ–Ω—Ç–∞—Ä</b>\n\n"
    
    # –î–û–î–ê–Ñ–ú–û –Ü–ù–§–û–†–ú–ê–¶–Ü–Æ –ü–†–û –†–û–õ–¨ (–Ω–µ –∑–∞–π–º–∞—î –º—ñ—Å—Ü–µ)
    if user_role != "–ù–æ–≤–∞—á–æ–∫":
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ ID —Ä–æ–ª—ñ
        role_id = next((r["id"] for r in Roles.ROLES if r["name"] == user_role), "?")
        text += f"üé≠ <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {user_role} (ID: {role_id})\n"
        text += f"üí° –ü—Ä–æ–¥–∞—Ç–∏: <code>/sellrole {role_id}</code>\n\n"
    
    text += f"üìä –ü—Ä–µ–¥–º–µ—Ç—ñ–≤: {total_items}/10\n\n"
    
    if total_items == 0:
        text += "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤!\nüé™ –ö—Ä—É—Ç—ñ—Ç—å —Ä—É–ª–µ—Ç–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏."
    else:
        text += "üéÅ <b>–ü—Ä–µ–¥–º–µ—Ç–∏:</b>\n"
        for i, item in enumerate(items[:10], 1):
            # –î–ª—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∑ —Ä—É–ª–µ—Ç–∫–∏
            item_id = "??"
            for prize in ItemRoulettePrizes.PRIZES:
                if prize["name"] == item["name"]:
                    item_id = prize["id"]
                    break
            
            text += f"{i}. {item['name']} (ID: {item_id}) - {item['price']} ‚úØ\n"
    
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üé™ –†—É–ª–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤", callback_data="menu_item_roulette"),
        InlineKeyboardButton("‚öñÔ∏è –ê—É–∫—Ü—ñ–æ–Ω", callback_data="auction_view|1"),
        InlineKeyboardButton("üõ†Ô∏è –ö—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç—ñ–≤", callback_data="crafting_menu")
    )
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_profile"))
    
    await call.message.edit_text(text, reply_markup=kb)
@dp.message_handler(commands=['roles'])
async def cmd_roles(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ —Ç–∞ —ó—Ö ID"""
    user_id = message.from_user.id
    ensure_player(user_id, message.from_user.username or message.from_user.full_name)
    
    user_role = get_user_role(user_id)
    
    text = (
        f"üé≠ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π</b>\n\n"
        f"‚≠ê <b>–í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ —Ä–æ–ª—å:</b> {user_role}\n\n"
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ:</b>\n"
    )
    
    for role in Roles.ROLES:
        has_role = " ‚úÖ –í–ê–®–ê" if role["name"] == user_role else ""
        text += f"‚Ä¢ <b>{role['name']}</b> (ID: {role['id']}){has_role}\n"
        text += f"  üí∞ {role['price']} ‚úØ | {role['description']}\n\n"
    
    text += (
        f"üí° <b>–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–æ–ª—è–º–∏:</b>\n"
        f"‚Ä¢ <code>/sellrole ID</code> - –ø—Ä–æ–¥–∞—Ç–∏ —Ä–æ–ª—å\n"
        f"‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n"
        f"‚ö° <b>–£–≤–∞–≥–∞:</b> –ú–æ–∂–Ω–∞ –º–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω—É —Ä–æ–ª—å!"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π", callback_data="shop_roles"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="menu_back|main"))
    
    await message.answer(text, reply_markup=kb)
#======================= CRAFT MENU
@dp.callback_query_handler(lambda c: c.data == 'crafting_menu')
async def cb_crafting_menu(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–≤–µ–Ω—å
    user_level = get_user_level(user_id)
    if user_level < 5:
        await call.answer("‚ùå –ö—Ä–∞—Ñ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑ 5 —Ä—ñ–≤–Ω—è!", show_alert=True)
        return
    
    user_coins = get_user_coins(user_id)
    craftable_items = get_user_craftable_items(user_id)
    
    text = (
        f"üõ†Ô∏è <b>–ú–∞—Å—Ç–µ—Ä–Ω—è –∫—Ä–∞—Ñ—Ç—É</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üéØ –í–∞—à —Ä—ñ–≤–µ–Ω—å: {user_level}\n\n"
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏:</b>\n"
    )
    
    kb = InlineKeyboardMarkup(row_width=1)
    
    for craftable in craftable_items:
        recipe = craftable["recipe"]
        emoji = "‚úÖ" if craftable["can_craft"] else "‚ùå"
        
        text += f"\n{emoji} <b>{recipe['name']}</b>\n"
        text += f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –∫—Ä–∞—Ñ—Ç—É: {recipe['cost']} ‚úØ\n"
        
        # –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
        text += "üì¶ –ü–æ—Ç—Ä—ñ–±–Ω–æ: "
        ingredients_text = []
        for ingredient in recipe["ingredients"]:
            ingredients_text.append(f"{ingredient['name']} x{ingredient['quantity']}")
        text += ", ".join(ingredients_text) + "\n"
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        if recipe["result"] == "random_car":
            text += f"üéÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: –í–∏–ø–∞–¥–∫–æ–≤–∞ –º–∞—à–∏–Ω–∞\n"
        else:
            text += f"üéÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {recipe['result']} ({recipe['result_price']} ‚úØ)\n"
        
        # –°—Ç–∞—Ç—É—Å
        if not craftable["can_craft"]:
            text += f"‚ùå –ù–µ –≤–∏—Å—Ç–∞—á–∞—î: {', '.join(craftable['missing_ingredients'])}\n"
        
        text += "\n"
        
        # –ö–Ω–æ–ø–∫–∞
        if craftable["can_craft"]:
            kb.insert(InlineKeyboardButton(
                f"üõ†Ô∏è {recipe['name']} - {recipe['cost']}‚úØ", 
                callback_data=f"craft_item_{recipe['id']}"
            ))
        else:
            kb.insert(InlineKeyboardButton(
                f"‚ùå {recipe['name']}", 
                callback_data="cannot_craft"
            ))
    
    if not any(craftable["can_craft"] for craftable in craftable_items):
        text += "\nüí° –ó–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –∑ —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è –∫—Ä–∞—Ñ—Ç—É!"
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory_view"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('craft_item_'))
async def cb_craft_item(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    recipe_id = int(call.data.replace('craft_item_', ''))
    
    result = craft_item(user_id, recipe_id)
    
    if result["success"]:
        await call.answer("‚úÖ –ö—Ä–∞—Ñ—Ç —É—Å–ø—ñ—à–Ω–∏–π!", show_alert=True)
    else:
        await call.answer(result["message"], show_alert=True)
    
    await cb_crafting_menu(call)

@dp.callback_query_handler(lambda c: c.data == 'cannot_craft')
async def cb_cannot_craft(call: types.CallbackQuery):
    await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç—É!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'auction_view')
async def cb_auction_view(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    cursor.execute("SELECT * FROM auction_items")
    auction_items = cursor.fetchall()
    
    text = "‚öñÔ∏è <b>–ê—É–∫—Ü—ñ–æ–Ω</b>\n\n"
    
    if not auction_items:
        text += "‚ùå –ù–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤!\n\n"
        text += "üí° –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ —Å–≤–æ—ó –ø—Ä–µ–¥–º–µ—Ç–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂ –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è."
    else:
        text += "üè∑Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏:</b>\n\n"
        for item in auction_items:
            item_id, seller_id, item_name, item_type, original_price, auction_price, listed_date = item
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–∞–≤—Ü—è
            cursor.execute("SELECT username FROM players WHERE user_id = ?", (seller_id,))
            seller_name = cursor.fetchone()[0]
            
            # –ö–æ–º—ñ—Å—ñ—è 4%
            commission = int(auction_price * 0.04)
            seller_gets = auction_price - commission
            
            text += f"üéÅ {item_name}\n"
            text += f"üí∞ –¶—ñ–Ω–∞: {auction_price} ‚úØ (–∑–Ω–∏–∂–∫–∞ 10%)\n"
            text += f"üí∏ –ü—Ä–æ–¥–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º–∞—î: {seller_gets} ‚úØ\n"
            text += f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {seller_name}\n\n"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üì¶ –ú—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory_view"))
    
    await call.message.edit_text(text, reply_markup=kb)

# ========== –û–ë–†–û–ë–ù–ò–ö–ò –ü–†–û–î–ê–ñ–Ü–í ==========
@dp.callback_query_handler(lambda c: c.data.startswith('auction_view|'))
async def cb_auction_view(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    page = int(call.data.split('|')[1])
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø—Ä–µ–¥–º–µ—Ç–∏
    cleanup_old_auction_items()
    
    cursor.execute("""
        SELECT ai.*, p.username 
        FROM auction_items ai 
        JOIN players p ON ai.user_id = p.user_id 
        ORDER BY ai.listed_date DESC
    """)
    all_auction_items = cursor.fetchall()
    
    items_per_page = 20
    total_pages = (len(all_auction_items) + items_per_page - 1) // items_per_page
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_items = all_auction_items[start_idx:end_idx]
    
    text = f"‚öñÔ∏è <b>–ê—É–∫—Ü—ñ–æ–Ω</b>\n\n"
    text += f"üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{total_pages}\n"
    text += f"üéÅ –í—Å—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤: {len(all_auction_items)}\n\n"
    
    if not page_items:
        text += "‚ùå –ù–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤!\n\n"
    else:
        for i, item in enumerate(page_items, start_idx + 1):
            item_id, seller_id, item_name, item_type, original_price, auction_price, listed_date, seller_name = item
            
            # –ö–æ–º—ñ—Å—ñ—è 4%
            commission = int(auction_price * 0.04)
            seller_gets = auction_price - commission
            
            # –ß–∞—Å —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
            list_time = datetime.fromisoformat(listed_date)
            time_ago = datetime.now() - list_time
            hours_ago = int(time_ago.total_seconds() // 3600)
            
            text += f"{i}. üéÅ {item_name}\n"
            text += f"   üí∞ –¶—ñ–Ω–∞: {auction_price} ‚úØ\n"
            text += f"   üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {seller_name}\n"
            text += f"   ‚è∞ {hours_ago} –≥–æ–¥. —Ç–æ–º—É\n"
            text += f"   üéØ –ö–Ω–æ–ø–∫–∞: /buy {item_id}\n\n"
    
    kb = InlineKeyboardMarkup(row_width=5)
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"auction_view|{page-1}"))
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ (–º–∞–∫—Å–∏–º—É–º 5)
    start_page = max(1, page - 2)
    end_page = min(total_pages, start_page + 4)
    
    for p in range(start_page, end_page + 1):
        if p == page:
            pagination_buttons.append(InlineKeyboardButton(f"‚Ä¢{p}‚Ä¢", callback_data=f"auction_view|{p}"))
        else:
            pagination_buttons.append(InlineKeyboardButton(str(p), callback_data=f"auction_view|{p}"))
    
    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"auction_view|{page+1}"))
    
    if pagination_buttons:
        kb.row(*pagination_buttons)
    
    kb.row(
        InlineKeyboardButton("üì¶ –ú—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view"),
        InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç", callback_data="sell_item_menu|1")
    )
    kb.row(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"auction_view|{page}"))
    kb.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory_view"))
    
    await call.message.edit_text(text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith('accept_sale_'))
async def cb_accept_sale(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    data_parts = call.data.split('_')
    seller_id = int(data_parts[2])
    item_id = int(data_parts[3])
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É –ø—Ä–æ–¥–∞–∂
    cursor.execute("SELECT id FROM pending_sales WHERE seller_id = ? AND buyer_id = ?", (seller_id, user_id))
    sale = cursor.fetchone()
    
    if not sale:
        await call.answer("‚ùå –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    sale_id = sale[0]
    
    if accept_pending_sale(sale_id):
        await call.answer("‚úÖ –ü–æ–∫—É–ø–∫—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", show_alert=True)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ–¥–∞–≤—Ü—è
        try:
            await bot.send_message(
                seller_id,
                f"‚úÖ <b>–í–∞—à –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω–æ!</b>\n\n"
                f"üë§ <b>–ü–æ–∫—É–ø–µ—Ü—å:</b> {call.from_user.username or call.from_user.full_name}\n"
                f"üí∞ <b>–û—Ç—Ä–∏–º–∞–Ω–æ:</b> {get_user_coins(seller_id)} ‚úØ\n\n"
                f"üíé –í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(seller_id)} ‚úØ"
            )
        except:
            pass
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—ñ—Å–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è
        await call.message.edit_text(
            "‚úÖ <b>–ü–æ–∫—É–ø–∫—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            "üéÅ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view")
            )
        )
    else:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data.startswith('reject_sale_'))
async def cb_reject_sale(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    data_parts = call.data.split('_')
    seller_id = int(data_parts[2])
    item_id = int(data_parts[3])
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É –ø—Ä–æ–¥–∞–∂
    cursor.execute("SELECT id FROM pending_sales WHERE seller_id = ? AND buyer_id = ?", (seller_id, user_id))
    sale = cursor.fetchone()
    
    if sale:
        reject_pending_sale(sale[0])
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ–¥–∞–≤—Ü—è
        try:
            await bot.send_message(
                seller_id,
                f"‚ùå <b>–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>\n\n"
                f"üë§ <b>–ü–æ–∫—É–ø–µ—Ü—å:</b> {call.from_user.username or call.from_user.full_name}\n"
                f"üí¨ –í—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –ø–æ–∫—É–ø–∫–∏ –≤–∞—à–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É."
            )
        except:
            pass
    
    await call.answer("‚ùå –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ", show_alert=True)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—ñ—Å–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    await call.message.edit_text(
        "‚ùå <b>–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view")
        )
    )



@dp.callback_query_handler(lambda c: c.data.startswith('reject_sale_'))
async def cb_reject_sale(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    data_parts = call.data.split('_')
    seller_id = int(data_parts[2])
    item_id = int(data_parts[3])
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—É –ø—Ä–æ–¥–∞–∂
    cursor.execute("SELECT id FROM pending_sales WHERE seller_id = ? AND buyer_id = ?", (seller_id, user_id))
    sale = cursor.fetchone()
    
    if sale:
        reject_pending_sale(sale[0])
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ–¥–∞–≤—Ü—è
        try:
            await bot.send_message(
                seller_id,
                f"‚ùå <b>–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>\n\n"
                f"üë§ <b>–ü–æ–∫—É–ø–µ—Ü—å:</b> {call.from_user.username or call.from_user.full_name}\n"
                f"üí¨ –í—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –ø–æ–∫—É–ø–∫–∏ –≤–∞—à–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É."
            )
        except:
            pass
    
    await call.answer("‚ùå –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ", show_alert=True)
    await call.message.edit_text(
        "‚ùå <b>–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view")
        )
    )

# –Ü–≤–µ–Ω—Ç–∏- –ê–¥–º—ñ–Ω —ñ–≤–µ–Ω—Ç–∏ - ADMIN EVENT
def apply_event_bonus(base_reward, reward_type='coins'):
    """–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –±–æ–Ω—É—Å–∏ —ñ–≤–µ–Ω—Ç—ñ–≤ –¥–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏"""
    event = get_active_event()
    
    if not event:
        return base_reward
    
    if event['type'] == '2xcoins' and reward_type == 'coins':
        return base_reward * 2
    elif event['type'] == '2xxp' and reward_type == 'xp':
        return base_reward * 2
    elif event['type'] == 'free_spins' and reward_type == 'spins':
        return 0  # –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Å–ø—ñ–Ω–∏
    
    return base_reward
# ========== –û–ë–†–û–ë–ù–ò–ö–ò –Ü–ì–û–† ==========

@dp.callback_query_handler(lambda c: c.data == 'game_quiz')
async def cb_game_quiz(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –ø–∏—Ç–∞–Ω—å (–±–æ–Ω—É—Å –¥–ª—è –°—Ç—É–¥–µ–Ω—Ç–∞)
    role = get_user_role(user_id)
    daily_limit = DAILY_QUESTION_LIMIT
    if role == "–°—Ç—É–¥–µ–Ω—Ç":
        daily_limit = 25
    
    cursor.execute("SELECT COUNT(*) FROM quiz_answers WHERE user_id = ? AND date = ?", 
                   (user_id, datetime.now().date().isoformat()))
    answered_count = cursor.fetchone()[0]
    
    if answered_count >= daily_limit:
        await call.message.edit_text(
            f"‚ùå <b>–õ—ñ–º—ñ—Ç –ø–∏—Ç–∞–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏—á–µ—Ä–ø–∞–Ω–æ!</b>\n\n"
            f"–í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ {answered_count}/{daily_limit} –ø–∏—Ç–∞–Ω—å.\n"
            f"üïí –õ—ñ–º—ñ—Ç –æ–Ω–æ–≤–∏—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞!",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")
            )
        )
        return
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∑ —Ñ–∞–π–ª—É
    try:
        with open(QUESTIONS_PATH, 'r', encoding='utf-8') as f:
            questions = json.load(f)
        
        if not questions:
            await call.message.edit_text(
                "‚ùå <b>–§–∞–π–ª –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π!</b>\n\n"
                "–î–æ–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ —Ñ–∞–π–ª—É questions.json",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")
                )
            )
            return
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–∞–ª—ñ–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è (—Ç–µ–ø–µ—Ä –∑ –ø–æ–ª–µ–º "answer")
        valid_questions = []
        for q in questions:
            if ('question' in q and 'options' in q and 'answer' in q and 
                isinstance(q['options'], list) and len(q['options']) > 0 and
                0 <= q['answer'] < len(q['options'])):
                valid_questions.append(q)
        
        if not valid_questions:
            await call.message.edit_text(
                "‚ùå <b>–ù–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å!</b>\n\n"
                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–∏—Ç–∞–Ω—å —É —Ñ–∞–π–ª—ñ questions.json\n"
                "–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è: question, options, answer",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")
                )
            )
            return
            
        question = random.choice(valid_questions)
        
    except FileNotFoundError:
        await call.message.edit_text(
            "‚ùå <b>–§–∞–π–ª –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!</b>\n\n"
            "–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª questions.json –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")
            )
        )
        return
    except json.JSONDecodeError:
        await call.message.edit_text(
            "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–∞–π–ª—É –ø–∏—Ç–∞–Ω—å!</b>\n\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å JSON —Ñ–æ—Ä–º–∞—Ç—É.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")
            )
        )
        return
    except Exception as e:
        await call.message.edit_text(
            f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å:</b>\n{e}",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games")
            )
        )
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (—Ç–µ–ø–µ—Ä –∑ 'answer')
    kb = InlineKeyboardMarkup(row_width=2)
    for i, option in enumerate(question["options"]):
        kb.insert(InlineKeyboardButton(option, callback_data=f"quiz_answer_{i}_{question['answer']}"))
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(
        f"‚ùì <b>–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞</b>\n\n"
        f"{question['question']}\n\n"
        f"üìä –°—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏: {answered_count}/{daily_limit}",
        reply_markup=kb
    )

@dp.callback_query_handler(lambda c: c.data.startswith('quiz_answer_'))
async def cb_quiz_answer(call: types.CallbackQuery):
    user_id = call.from_user.id
    data_parts = call.data.split('_')
    
    if len(data_parts) != 4:
        await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!", show_alert=True)
        return
    
    try:
        answer_index = int(data_parts[2])
        correct_index = int(data_parts[3])  # –¢–µ–ø–µ—Ä —Ü–µ 'answer'
    except ValueError:
        await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!", show_alert=True)
        return
    
    # –ë–æ–Ω—É—Å XP –¥–ª—è –°—Ç—É–¥–µ–Ω—Ç–∞
    role = get_user_role(user_id)
    xp_bonus = 10
    if role == "–°—Ç—É–¥–µ–Ω—Ç":
        xp_bonus = int(xp_bonus * 1.05)
    
    if answer_index == correct_index:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        reward = 20
        add_user_coins(user_id, reward)
        add_user_xp(user_id, xp_bonus)
        
        cursor.execute(
            "INSERT INTO quiz_answers (user_id, date, correct) VALUES (?, ?, ?)",
            (user_id, datetime.now().date().isoformat(), 1)
        )
        conn.commit()
        
        update_daily_task(user_id, "correct_answers")
        update_daily_task(user_id, "play_minigames")
        
        text = (
            f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
            f"üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏ {reward} ‚úØ\n"
            f"üìà +{xp_bonus} –¥–æ—Å–≤—ñ–¥—É\n\n"
            f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
        )
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        cursor.execute(
            "INSERT INTO quiz_answers (user_id, date, correct) VALUES (?, ?, ?)",
            (user_id, datetime.now().date().isoformat(), 0)
        )
        conn.commit()
        
        update_daily_task(user_id, "play_minigames")
        
        text = (
            f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
            f"üí° –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!"
        )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéØ –©–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="game_quiz"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'game_tap')
async def cb_game_tap(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    tap_stats = get_user_tap_stats(user_id)
    daily_limit = get_daily_tap_limit(user_id)
    next_level = tap_stats['level'] + 1
    next_boost = TapGame.BOOST_LEVELS.get(next_level)
    
    # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –¥–ª—è –ª—ñ–º—ñ—Ç—É —Ç–∞–ø—ñ–≤
    tap_progress = min(tap_stats['daily_taps'] / daily_limit * 100, 100) if daily_limit != float('inf') else 0
    progress_bar = create_progress_bar(tap_progress)
    
    text = (
        f"üëÜ <b>Tap Game</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n"
        f"üéØ –†—ñ–≤–µ–Ω—å: {tap_stats['level']}\n"
        f"üí∞ –î–æ—Ö—ñ–¥: {tap_stats['income']} ‚úØ/—Ç–∞–ø\n"
        f"üëÜ –í—Å—å–æ–≥–æ —Ç–∞–ø—ñ–≤: {tap_stats['total_taps']}\n"
        f"üìä –°—å–æ–≥–æ–¥–Ω—ñ: {tap_stats['daily_taps']}"
    )
    
    if daily_limit != float('inf'):
        text += f"/{daily_limit}\n{progress_bar}\n"
    else:
        text += "\n"
    
    if next_boost:
        text += f"\n‚ö° –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å ({next_level}): {next_boost['income']} ‚úØ/—Ç–∞–ø\n"
        text += f"üíµ –¶—ñ–Ω–∞: {next_boost['price']} ‚úØ\n\n"
    
    text += "üéÆ –ù–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É —â–æ–± –∑–∞—Ä–æ–±–ª—è—Ç–∏ –º–æ–Ω–µ—Ç–∏!"
    
    kb = InlineKeyboardMarkup(row_width=2)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç
    if can_user_tap(user_id):
        kb.add(InlineKeyboardButton("üëÜ –¢–∞–ø–Ω—É—Ç–∏!", callback_data="tap_click"))
    else:
        kb.add(InlineKeyboardButton("‚ùå –õ—ñ–º—ñ—Ç —Ç–∞–ø—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–æ", callback_data="tap_limit"))
    
    if next_boost and get_user_coins(user_id) >= next_boost['price']:
        kb.add(InlineKeyboardButton(f"‚ö° –ü—Ä–æ–∫–∞—á–∞—Ç–∏ ({next_boost['price']} ‚úØ)", callback_data="tap_upgrade"))
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'tap_click')
async def cb_tap_click(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É
    if not can_user_tap(user_id):
        await call.answer("‚ùå –õ—ñ–º—ñ—Ç —Ç–∞–ø—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏—á–µ—Ä–ø–∞–Ω–æ!", show_alert=True)
        await cb_game_tap(call)
        return
    
    tap_stats = get_user_tap_stats(user_id)
    
    add_user_coins(user_id, tap_stats['income'])
    cursor.execute("UPDATE players SET total_taps = total_taps + 1, daily_taps = daily_taps + 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    
    update_daily_task(user_id, "tap_count")
    await cb_game_tap(call)

@dp.callback_query_handler(lambda c: c.data == 'tap_limit')
async def cb_tap_limit(call: types.CallbackQuery):
    await call.answer("‚ùå –õ—ñ–º—ñ—Ç —Ç–∞–ø—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏—á–µ—Ä–ø–∞–Ω–æ!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'tap_upgrade')
async def cb_tap_upgrade(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    tap_stats = get_user_tap_stats(user_id)
    next_level = tap_stats['level'] + 1
    next_boost = TapGame.BOOST_LEVELS.get(next_level)
    
    if not next_boost:
        await call.answer("üéâ –í–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è!", show_alert=True)
        return
    
    if get_user_coins(user_id) >= next_boost['price']:
        cursor.execute("UPDATE players SET coins = coins - ?, tap_boost_level = ? WHERE user_id = ?", 
                       (next_boost['price'], next_level, user_id))
        conn.commit()
        await call.answer(f"‚ö° –ü—Ä–æ–∫–∞—á–∞–Ω–æ –¥–æ {next_level} —Ä—ñ–≤–Ω—è!", show_alert=True)
        await cb_game_tap(call)
    else:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'game_pvp')
async def cb_game_pvp(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    cursor.execute("SELECT user_id, username FROM players WHERE user_id != ? ORDER BY RANDOM() LIMIT 1", (user_id,))
    opponent = cursor.fetchone()
    
    if opponent:
        opponent_id, opponent_name = opponent
        opponent_coins = get_user_coins(opponent_id)
        
        text = (
            f"‚öîÔ∏è <b>PvP –î—É–µ–ª—å</b>\n\n"
            f"üéØ <b>–í–∞—à —Å—É–ø–µ—Ä–Ω–∏–∫:</b> {opponent_name}\n"
            f"üíé –ë–∞–ª–∞–Ω—Å —Å—É–ø–µ—Ä–Ω–∏–∫–∞: {opponent_coins} ‚úØ\n"
            f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
            f"üé∞ <b>–ú–µ—Ö–∞–Ω—ñ–∫–∞:</b>\n"
            f"‚Ä¢ –ö–æ–∂–µ–Ω —Å—Ç–∞–≤–∏—Ç—å 10% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É\n"
            f"‚Ä¢ –ü–µ—Ä–µ–º–∞–≥–∞—î —Ç–æ–π, —Ö—Ç–æ –≤–∏–∫–∏–Ω–µ –±—ñ–ª—å—à–µ –Ω–∞ –∫—ñ—Å—Ç–∫–∞—Ö (1-6)\n"
            f"‚Ä¢ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º—É—î –≤–µ—Å—å –±–∞–Ω–∫!\n\n"
            f"‚ö° –ì–æ—Ç–æ–≤—ñ –¥–æ –±–∏—Ç–≤–∏?"
        )
        
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üé≤ –ü—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫!", callback_data=f"pvp_fight_{opponent_id}"))
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    else:
        text = "‚ùå –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤!"
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('pvp_fight_'))
async def cb_pvp_fight(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    opponent_id = int(call.data.split('_')[2])
    
    user_coins = get_user_coins(user_id)
    opponent_coins = get_user_coins(opponent_id)
    
    bet_user = max(10, min(1000, user_coins // 10))
    bet_opponent = max(10, min(1000, opponent_coins // 10))
    total_bet = bet_user + bet_opponent
    
    user_roll = random.randint(1, 6)
    opponent_roll = random.randint(1, 6)
    
    cursor.execute("SELECT username FROM players WHERE user_id = ?", (opponent_id,))
    opponent_name = cursor.fetchone()[0]
    
    bonus = 0
    if user_roll > opponent_roll:
        # –ë–æ–Ω—É—Å –¥–ª—è –í–æ—ó–Ω–∞
        if get_user_role(user_id) == "–í–æ—ó–Ω":
            bonus = 50
            total_bet += bonus
        
        add_user_coins(user_id, total_bet)
        cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", (bet_opponent, opponent_id))
        result_text = f"üéâ <b>–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!</b>\n\n"
        reward = total_bet
        if bonus > 0:
            result_text += f"‚öîÔ∏è –ë–æ–Ω—É—Å –í–æ—ó–Ω–∞: +{bonus} ‚úØ\n"
    elif user_roll < opponent_roll:
        cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (total_bet, opponent_id))
        cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", (bet_user, user_id))
        result_text = f"‚ùå <b>–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!</b>\n\n"
        reward = -bet_user
    else:
        result_text = f"ü§ù <b>–ù—ñ—á–∏—è!</b>\n\n"
        reward = 0
    
    text = (
        f"{result_text}"
        f"üé≤ –í–∞—à –∫–∏–¥–æ–∫: <b>{user_roll}</b>\n"
        f"üé≤ –ö–∏–¥–æ–∫ {opponent_name}: <b>{opponent_roll}</b>\n\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_user} ‚úØ\n"
        f"üèÜ –í–∏–≥—Ä–∞—à: {reward} ‚úØ\n"
        f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚öîÔ∏è –©–µ –¥—É–µ–ª—å", callback_data="game_pvp"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)
    conn.commit()
    update_daily_task(user_id, "play_minigames")

@dp.callback_query_handler(lambda c: c.data == 'game_dice')
async def cb_game_dice(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    text = (
        f"üé≤ <b>–ì—Ä–∞ –≤ –∫—ñ—Å—Ç–∫–∏</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
        f"üéØ <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        f"‚Ä¢ –°—Ç–∞–≤–∫–∞: 50 ‚úØ\n"
        f"‚Ä¢ –ö–∏–¥–∞—î—Ç–µ –¥–≤—ñ –∫—ñ—Å—Ç–∫–∏ (2-12)\n"
        f"‚Ä¢ 7-12: x2 –≤–∏–≥—Ä–∞—à\n"
        f"‚Ä¢ 2-6: –ø—Ä–æ–≥—Ä–∞—à\n\n"
        f"üé∞ –ì–æ—Ç–æ–≤—ñ –∫–∏–Ω—É—Ç–∏ –∫—ñ—Å—Ç–∫–∏?"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé≤ –ö–∏–Ω—É—Ç–∏ –∫—ñ—Å—Ç–∫–∏ (50 ‚úØ)", callback_data="dice_roll"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'dice_roll')
async def cb_dice_roll(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    user_coins = get_user_coins(user_id)
    
    if user_coins < 50:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    dice1 = random.randint(1, 6)
    dice2 = random.randint(1, 6)
    total = dice1 + dice2
    
    if total >= 7:
        win_amount = 100
        add_user_coins(user_id, win_amount - 50)
        result = f"üéâ <b>–í–∏–≥—Ä–∞—à! +50 ‚úØ</b>"
    else:
        cursor.execute("UPDATE players SET coins = coins - 50 WHERE user_id = ?", (user_id,))
        result = f"‚ùå <b>–ü—Ä–æ–≥—Ä–∞—à! -50 ‚úØ</b>"
    
    conn.commit()
    update_daily_task(user_id, "play_minigames")
    
    text = (
        f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∏–¥–∫–∞</b>\n\n"
        f"üéØ –ö—ñ—Å—Ç–∫–∏: <b>{dice1}</b> + <b>{dice2}</b> = <b>{total}</b>\n"
        f"üí∞ {result}\n\n"
        f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé≤ –ö–∏–Ω—É—Ç–∏ —â–µ —Ä–∞–∑", callback_data="dice_roll"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="game_dice"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'game_guess')
async def cb_game_guess(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    secret_number = random.randint(1, 3)  # –ó–º—ñ–Ω–∞ –∑ 1-10 –Ω–∞ 1-3
    
    text = (
        f"üéØ <b>–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
        f"üéØ <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        f"‚Ä¢ –ó–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 3\n"  # –û–Ω–æ–≤–ª–µ–Ω–æ –¥—ñ–∞–ø–∞–∑–æ–Ω
        f"‚Ä¢ –°—Ç–∞–≤–∫–∞: 25 ‚úØ\n"
        f"‚Ä¢ –í–≥–∞–¥–∞–ª–∏: +75 ‚úØ (x3)\n"
        f"‚Ä¢ –ù–µ –≤–≥–∞–¥–∞–ª–∏: -25 ‚úØ\n\n"
        f"üî¢ –û–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ:"
    )
    
    kb = InlineKeyboardMarkup(row_width=3)
    buttons = []
    for i in range(1, 4):  # –ó–º—ñ–Ω–∞ –∑ 10 –Ω–∞ 3
        buttons.append(InlineKeyboardButton(str(i), callback_data=f"guess_number_{i}_{secret_number}"))
    kb.add(*buttons)
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('guess_number_'))
async def cb_guess_number(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    data_parts = call.data.split('_')
    guessed_number = int(data_parts[2])
    secret_number = int(data_parts[3])
    
    user_coins = get_user_coins(user_id)
    
    if user_coins < 25:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return
    
    if guessed_number == secret_number:
        add_user_coins(user_id, 50)
        result = f"üéâ <b>–í—ñ—Ç–∞—é! –í–∏ –≤–≥–∞–¥–∞–ª–∏!</b>\n+50 ‚úØ"
    else:
        cursor.execute("UPDATE players SET coins = coins - 25 WHERE user_id = ?", (user_id,))
        result = f"‚ùå <b>–ù–∞–∂–∞–ª—å, –Ω–µ –≤–≥–∞–¥–∞–ª–∏!</b>\n-25 ‚úØ\n–ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ: {secret_number}"
    
    conn.commit()
    update_daily_task(user_id, "play_minigames")
    
    text = (
        f"üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∏</b>\n\n"
        f"üî¢ –í–∞—à–∞ —Å–ø—Ä–æ–±–∞: <b>{guessed_number}</b>\n"
        f"üí∞ {result}\n\n"
        f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéØ –ì—Ä–∞—Ç–∏ —â–µ", callback_data="game_guess"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_games"))
    
    await call.message.edit_text(text, reply_markup=kb)

# ========== –†–£–õ–ï–¢–ö–ò ==========
@dp.callback_query_handler(lambda c: c.data == 'menu_item_roulette')
async def cb_menu_item_roulette(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    user_level = get_user_level(user_id)
    user_coins = get_user_coins(user_id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–≤–Ω—è –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ (—Ç–µ–ø–µ—Ä –≤—ñ–¥ 5 —Ä—ñ–≤–Ω—è)
    if user_level < 5:
        await call.message.edit_text(
            f"‚ùå <b>–†—É–ª–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –∑ 5 —Ä—ñ–≤–Ω—è!</b>\n\n"
            f"üéØ –í–∞—à —Ä—ñ–≤–µ–Ω—å: {user_level}/5\n"
            f"üí° –ü—ñ–¥–Ω—ñ–º–∞–π—Ç–µ —Ä—ñ–≤–µ–Ω—å, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ä—É–ª–µ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤!",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_roulettes")
            )
        )
        return
    
    can_spin = user_coins >= 200
    
    text = (
        f"üé™ <b>–†—É–ª–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üéØ –í–∞—Ä—Ç—ñ—Å—Ç—å: 200 ‚úØ\n"
        f"üìä –î–æ—Å—Ç—É–ø–Ω–æ: {'‚úÖ' if can_spin else '‚ùå'}\n\n"
    )
    
    if not can_spin:
        text += "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 200 ‚úØ\n\n"
    
    text += "üèÜ <b>–¢–æ–ø –ø—Ä–∏–∑–∏:</b>\n"
    top_prizes = sorted(ItemRoulettePrizes.PRIZES, key=lambda x: x['price'], reverse=True)[:5]
    for prize in top_prizes:
        text += f"‚Ä¢ {prize['name']} (ID: {prize['id']}) - {prize['price']} ‚úØ\n"
    
    kb = InlineKeyboardMarkup(row_width=2)
    if can_spin:
        kb.add(InlineKeyboardButton("üé™ –ö—Ä—É—Ç–∏—Ç–∏ (200 ‚úØ)", callback_data="item_roulette_spin"))
    kb.add(
        InlineKeyboardButton("üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_roulettes")
    )
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'item_roulette_spin')
async def cb_item_roulette_spin(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    if get_user_coins(user_id) < 200:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    cursor.execute("UPDATE players SET coins = coins - 200 WHERE user_id = ?", (user_id,))
    
    r = random.random()
    cumulative_probability = 0.0
    
    for prize in ItemRoulettePrizes.PRIZES:
        cumulative_probability += prize["probability"]
        if r <= cumulative_probability:
            # –ë–æ–Ω—É—Å –¥–ª—è –©–∞—Å–ª–∏–≤—á–∏–∫–∞
            bonus = 0
            if get_user_role(user_id) == "–©–∞—Å–ª–∏–≤—á–∏–∫":
                bonus = 60
                add_user_coins(user_id, bonus)
            
            # –î–æ–¥–∞—î–º–æ –ø—Ä–µ–¥–º–µ—Ç –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
            if add_to_inventory(user_id, prize["name"], prize["price"], prize["type"]):
                conn.commit()
                
                update_daily_task(user_id, "spin_roulette")
                
                bonus_text = f"\nüé∞ –ë–æ–Ω—É—Å –©–∞—Å–ª–∏–≤—á–∏–∫–∞: +{bonus} ‚úØ" if bonus > 0 else ""
                
                text = (
                    f"üé™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏</b>\n\n"
                    f"üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏: {prize['name']}!\n"
                    f"üíé –¶—ñ–Ω–∞: {prize['price']} ‚úØ\n"
                    f"üÜî ID: {prize['id']}{bonus_text}\n\n"
                    f"üíº –ü—Ä–µ–¥–º–µ—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è!\n"
                    f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
                )
            else:
                text = (
                    f"‚ùå <b>–Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∏–π!</b>\n\n"
                    f"üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏: {prize['name']}!\n"
                    f"üíé –ê–ª–µ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∏–π (–º–∞–∫—Å. 10 –ø—Ä–µ–¥–º–µ—Ç—ñ–≤)\n\n"
                    f"üí° –ü—Ä–æ–¥–∞–π—Ç–µ –∞–±–æ –≤–∏–¥–∞–ª—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∏ –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è"
                )
            
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view"))
            kb.add(InlineKeyboardButton("üé™ –ö—Ä—É—Ç–∏—Ç–∏ —â–µ", callback_data="item_roulette_spin"))
            kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_item_roulette"))
            
            await call.message.edit_text(text, reply_markup=kb)
            return
    
    await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä—É–ª–µ—Ç–∫–∏", show_alert=True)

# –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ...
@dp.callback_query_handler(lambda c: c.data == 'roulette_normal')
async def cb_roulette_normal(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    user_coins = get_user_coins(user_id)
    
    text = (
        f"üí∞ <b>–ó–≤–∏—á–∞–π–Ω–∞ —Ä—É–ª–µ—Ç–∫–∞</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üéØ –í–∞—Ä—Ç—ñ—Å—Ç—å: 50 ‚úØ\n\n"
        f"üèÜ <b>–ú–æ–∂–ª–∏–≤—ñ –≤–∏–≥—Ä–∞—à—ñ:</b>\n"
        f"‚Ä¢ 10 ‚úØ (30% —à–∞–Ω—Å)\n"
        f"‚Ä¢ 25 ‚úØ (25% —à–∞–Ω—Å)\n"
        f"‚Ä¢ 50 ‚úØ (20% —à–∞–Ω—Å)\n"
        f"‚Ä¢ 100 ‚úØ (15% —à–∞–Ω—Å)\n"
        f"‚Ä¢ 200 ‚úØ (10% —à–∞–Ω—Å)\n\n"
        f"üé∞ –ì–æ—Ç–æ–≤—ñ –∫—Ä—É—Ç–∏—Ç–∏?"
    )
    
    kb = InlineKeyboardMarkup()
    if user_coins >= 50:
        kb.add(InlineKeyboardButton("üí∞ –ö—Ä—É—Ç–∏—Ç–∏ (50 ‚úØ)", callback_data="normal_roulette_spin"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_roulettes"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'normal_roulette_spin')
async def cb_normal_roulette_spin(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    if get_user_coins(user_id) < 50:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    cursor.execute("UPDATE players SET coins = coins - 50 WHERE user_id = ?", (user_id,))
    
    r = random.random()
    if r < 0.30:
        win = 10
    elif r < 0.55:
        win = 25
    elif r < 0.75:
        win = 50
    elif r < 0.90:
        win = 100
    else:
        win = 200
    
    # –ë–æ–Ω—É—Å –¥–ª—è –©–∞—Å–ª–∏–≤—á–∏–∫–∞
    bonus = 0
    if get_user_role(user_id) == "–©–∞—Å–ª–∏–≤—á–∏–∫":
        bonus = 60
    
    total_win = win + bonus
    add_user_coins(user_id, total_win)
    update_daily_task(user_id, "spin_roulette")
    
    bonus_text = f"\nüé∞ –ë–æ–Ω—É—Å –©–∞—Å–ª–∏–≤—á–∏–∫–∞: +{bonus} ‚úØ" if bonus > 0 else ""
    
    text = (
        f"üí∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏</b>\n\n"
        f"üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏: {win} ‚úØ!{bonus_text}\n"
        f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏–≥—Ä–∞—à: {total_win} ‚úØ\n\n"
        f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üí∞ –ö—Ä—É—Ç–∏—Ç–∏ —â–µ", callback_data="normal_roulette_spin"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="roulette_normal"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'income_farm')
async def cb_income_farm(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—Ö—ñ–¥ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
    update_income_for_user(user_id)
    
    farm_income = get_user_farm_income(user_id)
    estate_income = get_user_real_estate_income(user_id)
    total_income_per_hour = farm_income + estate_income
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—î –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
    last_income_time = get_last_income_time(user_id)
    next_income_time = "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    
    if last_income_time:
        next_income_time = (last_income_time + timedelta(hours=1)).strftime("%H:%M")
    
    cursor.execute("SELECT animal_type, income, count FROM farm_animals WHERE user_id = ?", (user_id,))
    user_animals = cursor.fetchall()
    
    text = (
        f"üêì <b>–í–∞—à–∞ —Ñ–µ—Ä–º–∞</b>\n\n"
        f"üí∞ –î–æ—Ö—ñ–¥: {farm_income} ‚úØ/6 –≥–æ–¥\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n"
        f"üïí –ù–∞—Å—Ç—É–ø–Ω–µ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è: ~{next_income_time}\n"
        f"üéØ –í—Å—å–æ–≥–æ –ø–∞—Å–∏–≤–Ω–æ: {total_income_per_hour} ‚úØ/6 –≥–æ–¥\n\n"
    )
    
    if user_animals:
        text += "üè† <b>–í–∞—à—ñ —Ç–≤–∞—Ä–∏–Ω–∏:</b>\n"
        for animal_type, income, count in user_animals:
            text += f"‚Ä¢ {animal_type}: {count} —à—Ç. ({income * count} ‚úØ/6 –≥–æ–¥)\n"
    else:
        text += "‚ùå –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ç–≤–∞—Ä–∏–Ω!\n"
    
    text += "\nüõçÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–≤–∞—Ä–∏–Ω–∏:</b>\n"
    for animal in FarmAnimals.ANIMALS[:3]:
        text += f"‚Ä¢ {animal['emoji']} {animal['name']}: {animal['price']} ‚úØ ({animal['income']} ‚úØ/–≥–æ–¥)\n"
    
    text += f"\nüí° <b>–î–æ—Ö—ñ–¥ –Ω–∞—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω!</b>"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üõçÔ∏è –ö—É–ø–∏—Ç–∏ —Ç–≤–∞—Ä–∏–Ω", callback_data="shop_farm"))
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="income_farm"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'income_real_estate')
async def cb_income_real_estate(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—Ö—ñ–¥ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
    update_income_for_user(user_id)
    
    farm_income = get_user_farm_income(user_id)
    estate_income = get_user_real_estate_income(user_id)
    total_income_per_hour = farm_income + estate_income
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—î –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
    last_income_time = get_last_income_time(user_id)
    next_income_time = "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    
    if last_income_time:
        next_income_time = (last_income_time + timedelta(hours=1)).strftime("%H:%M")
    
    cursor.execute("SELECT type, income FROM user_real_estate WHERE user_id = ?", (user_id,))
    user_estates = cursor.fetchall()
    
    text = (
        f"üèòÔ∏è <b>–í–∞—à–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å</b>\n\n"
        f"üí∞ –î–æ—Ö—ñ–¥: {estate_income} ‚úØ/6 –≥–æ–¥\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n"
        f"üïí –ù–∞—Å—Ç—É–ø–Ω–µ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è: ~{next_income_time}\n"
        f"üéØ –í—Å—å–æ–≥–æ –ø–∞—Å–∏–≤–Ω–æ: {total_income_per_hour} ‚úØ/6 –≥–æ–¥\n\n"
    )
    
    if user_estates:
        text += "üè† <b>–í–∞—à—ñ –æ–±'—î–∫—Ç–∏:</b>\n"
        for estate_type, income in user_estates:
            text += f"‚Ä¢ {estate_type}: {income} ‚úØ/6 –≥–æ–¥\n"
    else:
        text += "‚ùå –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ!\n"
    
    text += "\nüõçÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å:</b>\n"
    for estate in RealEstate.PROPERTIES[:3]:
        text += f"‚Ä¢ {estate['name']}: {estate['price']} ‚úØ ({estate['income']} ‚úØ/6 –≥–æ–¥)\n"
    
    text += f"\nüí° <b>–î–æ—Ö—ñ–¥ –Ω–∞—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω!</b>"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üõçÔ∏è –ö—É–ø–∏—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", callback_data="shop_real_estate"))
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="income_real_estate"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'bank_collect')
async def cb_bank_collect(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    cursor.execute("SELECT total_commission FROM bank_income WHERE user_id = ?", (user_id,))
    bank_data = cursor.fetchone()
    
    if not bank_data or bank_data[0] == 0:
        await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Ö–æ–¥—É –¥–ª—è –∑–±–æ—Ä—É!", show_alert=True)
        return
    
    total_commission = bank_data[0]
    add_user_coins(user_id, total_commission)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –∑–∞–ø–∏—Å
    current_date = datetime.now().date().isoformat()
    cursor.execute(
        "UPDATE bank_income SET total_commission = 0, last_collect_date = ? WHERE user_id = ?",
        (current_date, user_id)
    )
    conn.commit()
    
    text = (
        f"üè¶ <b>–ó–±—ñ—Ä –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –¥–æ—Ö–æ–¥—É</b>\n\n"
        f"üí∞ –ó—ñ–±—Ä–∞–Ω–æ: {total_commission} ‚úØ\n"
        f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
        f"üéâ –ö–æ–º—ñ—Å—ñ—ó –∑ –ø—Ä–æ–¥–∞–∂—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–≤–æ–¥—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑—ñ–±—Ä–∞–Ω—ñ!"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="bank_income"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_income"))
    
    await call.message.edit_text(text, reply_markup=kb)

# –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ...
# ========== –ú–ê–ì–ê–ó–ò–ù ==========
@dp.callback_query_handler(lambda c: c.data == 'shop_levels')
async def cb_shop_levels(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    current_level = get_user_level(user_id)
    next_level = current_level + 1
    user_coins = get_user_coins(user_id)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É
    price = 1500 * (2 ** (current_level - 1))
    can_buy = user_coins >= price
    
    text = (
        f"üéØ <b>–ú–∞–≥–∞–∑–∏–Ω —Ä—ñ–≤–Ω—ñ–≤</b>\n\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üéØ –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {current_level}\n"
        f"‚¨ÜÔ∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {next_level}\n"
        f"üí∞ –¶—ñ–Ω–∞: {price} ‚úØ\n\n"
    )
    
    if can_buy:
        text += f"‚úÖ –í–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –¥–æ {next_level} —Ä—ñ–≤–Ω—è!"
    else:
        text += f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏!\n–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ {price - user_coins} ‚úØ"
    
    text += f"\n\nüí° <b>–¶—ñ–Ω–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä—ñ–≤–Ω—ñ:</b>\n"
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ü—ñ–Ω–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ 3 —Ä—ñ–≤–Ω—ñ
    for i in range(1, 4):
        level = current_level + i
        future_price = 1500 * (2 ** (level - 2))  # -2 –±–æ –ø–æ–∫–∞–∑—É—î–º–æ —Ü—ñ–Ω—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –∑ level-1 –Ω–∞ level
        text += f"‚Ä¢ –†—ñ–≤–µ–Ω—å {level}: {future_price} ‚úØ\n"
    
    kb = InlineKeyboardMarkup()
    
    if can_buy:
        kb.add(InlineKeyboardButton(f"üéØ –ö—É–ø–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å {next_level} - {price}‚úØ", callback_data="buy_level"))
    
    kb.add(InlineKeyboardButton("üõçÔ∏è –î–æ –º–∞–≥–∞–∑–∏–Ω—É", callback_data="menu_shop"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'buy_level')
async def cb_buy_level(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    result = buy_level(user_id)
    
    if result["success"]:
        await call.answer(f"‚úÖ {result['message']}", show_alert=True)
    else:
        await call.answer(result["message"], show_alert=True)
    
    await cb_shop_levels(call)
@dp.callback_query_handler(lambda c: c.data == 'shop_farm')
async def cb_shop_farm(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    user_coins = get_user_coins(user_id)
    farm_income = get_user_farm_income(user_id)
    user_role = get_user_role(user_id)
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤–∞—Ä–∏–Ω (–±–æ–Ω—É—Å –¥–ª—è –§–µ—Ä–º–µ—Ä–∞)
    max_animals = 4
    if user_role == "–§–µ—Ä–º–µ—Ä":
        max_animals = 6
    
    text = (
        f"üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω —Ñ–µ—Ä–º–∏</b>\n\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –¥–æ—Ö—ñ–¥: {farm_income} ‚úØ/6 –≥–æ–¥\n"
        f"üêì –ú–∞–∫—Å. –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {max_animals} –æ–¥.\n\n"
        f"üêì <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–≤–∞—Ä–∏–Ω–∏:</b>\n"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    
    for animal in FarmAnimals.ANIMALS:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞–≤–µ—Ü—å –≤–∂–µ –º–∞—î —Ü—é —Ç–≤–∞—Ä–∏–Ω—É —Ç–∞ —ó—ó –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        cursor.execute("SELECT count FROM farm_animals WHERE user_id = ? AND animal_type = ?", (user_id, animal['name']))
        result = cursor.fetchone()
        current_count = result[0] if result else 0
        
        can_buy = user_coins >= animal['price'] and current_count < max_animals
        emoji = "‚úÖ" if can_buy else "‚ùå"
        
        text += f"{emoji} {animal['emoji']} {animal['name']}: {animal['price']} ‚úØ ({animal['income']} ‚úØ/6 –≥–æ–¥)"
        if current_count > 0:
            text += f" [–ú–∞—î—Ç–µ: {current_count}/{max_animals}]\n"
        else:
            text += "\n"
        
        if can_buy:
            kb.insert(InlineKeyboardButton(
                f"{animal['emoji']} {animal['price']}‚úØ", 
                callback_data=f"buy_animal_{animal['name']}"
            ))
        else:
            kb.insert(InlineKeyboardButton(
                f"‚ùå {animal['price']}‚úØ", 
                callback_data=f"cannot_buy_animal"
            ))
    
    text += f"\nüí° <b>–ü–æ—Ä–∞–¥–∞:</b> –¢–≤–∞—Ä–∏–Ω–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç—å –ø–∞—Å–∏–≤–Ω–∏–π –¥–æ—Ö—ñ–¥ –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω!"
    if user_role == "–§–µ—Ä–º–µ—Ä":
        text += f"\nüé≠ <b>–ë–æ–Ω—É—Å –§–µ—Ä–º–µ—Ä–∞:</b> –ú–æ–∂–Ω–∞ –∫—É–ø—É–≤–∞—Ç–∏ –¥–æ {max_animals} —Ç–≤–∞—Ä–∏–Ω –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É!"
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="income_farm"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('buy_animal_'))
async def cb_buy_animal(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    animal_name = call.data.replace('buy_animal_', '')
    
    animal = next((a for a in FarmAnimals.ANIMALS if a['name'] == animal_name), None)
    if not animal:
        await call.answer("‚ùå –¢–≤–∞—Ä–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    user_coins = get_user_coins(user_id)
    user_role = get_user_role(user_id)
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤–∞—Ä–∏–Ω
    max_animals = 4
    if user_role == "–§–µ—Ä–º–µ—Ä":
        max_animals = 6
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    cursor.execute("SELECT count FROM farm_animals WHERE user_id = ? AND animal_type = ?", (user_id, animal['name']))
    result = cursor.fetchone()
    current_count = result[0] if result else 0
    
    if current_count >= max_animals:
        await call.answer(f"‚ùå –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º ({max_animals}) –¥–ª—è —Ü—ñ—î—ó —Ç–≤–∞—Ä–∏–Ω–∏!", show_alert=True)
        return
    
    if user_coins < animal['price']:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", 
                   (animal['price'], user_id))
    
    if result:
        cursor.execute("UPDATE farm_animals SET count = count + 1 WHERE user_id = ? AND animal_type = ?", 
                       (user_id, animal['name']))
    else:
        cursor.execute(
            "INSERT INTO farm_animals (user_id, animal_type, income, count) VALUES (?, ?, ?, ?)",
            (user_id, animal['name'], animal['income'], 1)
        )
    
    conn.commit()
    update_daily_task(user_id, "buy_animals")
    
    await call.answer(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {animal['emoji']} {animal['name']}! –¢–µ–ø–µ—Ä —É –≤–∞—Å {current_count + 1}/{max_animals}", show_alert=True)
    await cb_shop_farm(call)

@dp.callback_query_handler(lambda c: c.data == 'cannot_buy_animal')
async def cb_cannot_buy_animal(call: types.CallbackQuery):
    await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –∞–±–æ –¥–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'shop_real_estate')
async def cb_shop_real_estate(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    user_coins = get_user_coins(user_id)
    estate_income = get_user_real_estate_income(user_id)
    user_role = get_user_role(user_id)
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–±–æ–Ω—É—Å –¥–ª—è –ö–æ–ª–µ–∫—Ç–æ—Ä–∞)
    max_estates = 2
    if user_role == "–ö–æ–ª–µ–∫—Ç–æ—Ä":
        max_estates = 4
    
    text = (
        f"üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ</b>\n\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –¥–æ—Ö—ñ–¥: {estate_income} ‚úØ/6 –≥–æ–¥\n"
        f"üèòÔ∏è –ú–∞–∫—Å. –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {max_estates} –æ–¥.\n\n"
        f"üèòÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å:</b>\n"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    
    for estate in RealEstate.PROPERTIES:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞–≤–µ—Ü—å –≤–∂–µ –º–∞—î —Ü—é –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å
        cursor.execute("SELECT COUNT(*) FROM user_real_estate WHERE user_id = ? AND type = ?", (user_id, estate['name']))
        current_count = cursor.fetchone()[0]
        
        can_buy = user_coins >= estate['price'] and current_count < max_estates
        emoji = "‚úÖ" if can_buy else "‚ùå"
        
        text += f"{emoji} {estate['name']}: {estate['price']} ‚úØ ({estate['income']} ‚úØ/6 –≥–æ–¥)"
        if current_count > 0:
            text += f" [–ú–∞—î—Ç–µ: {current_count}/{max_estates}]\n"
        else:
            text += "\n"
        
        if can_buy:
            kb.insert(InlineKeyboardButton(
                f"{estate['name']} {estate['price']}‚úØ", 
                callback_data=f"buy_estate_{estate['name']}"
            ))
        else:
            kb.insert(InlineKeyboardButton(
                f"‚ùå {estate['price']}‚úØ", 
                callback_data=f"cannot_buy_estate"
            ))
    
    text += f"\nüí° <b>–ü–æ—Ä–∞–¥–∞:</b> –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å –ø—Ä–∏–Ω–æ—Å–∏—Ç—å —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –ø–∞—Å–∏–≤–Ω–∏–π –¥–æ—Ö—ñ–¥!"
    if user_role == "–ö–æ–ª–µ–∫—Ç–æ—Ä":
        text += f"\nüé≠ <b>–ë–æ–Ω—É—Å –ö–æ–ª–µ–∫—Ç–æ—Ä–∞:</b> –ú–æ–∂–Ω–∞ –∫—É–ø—É–≤–∞—Ç–∏ –¥–æ {max_estates} –æ–±'—î–∫—Ç—ñ–≤ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É!"
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="income_real_estate"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('buy_estate_'))
async def cb_buy_estate(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    estate_name = call.data.replace('buy_estate_', '')
    
    estate = next((e for e in RealEstate.PROPERTIES if e['name'] == estate_name), None)
    if not estate:
        await call.answer("‚ùå –û–±'—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!", show_alert=True)
        return
    
    user_coins = get_user_coins(user_id)
    user_role = get_user_role(user_id)
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
    max_estates = 2
    if user_role == "–ö–æ–ª–µ–∫—Ç–æ—Ä":
        max_estates = 4
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    cursor.execute("SELECT COUNT(*) FROM user_real_estate WHERE user_id = ? AND type = ?", (user_id, estate['name']))
    current_count = cursor.fetchone()[0]
    
    if current_count >= max_estates:
        await call.answer(f"‚ùå –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º ({max_estates}) –¥–ª—è —Ü—å–æ–≥–æ –æ–±'—î–∫—Ç–∞!", show_alert=True)
        return
    
    if user_coins < estate['price']:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", 
                   (estate['price'], user_id))
    
    cursor.execute(
        "INSERT INTO user_real_estate (user_id, type, income, price, last_collect_time) VALUES (?, ?, ?, ?, ?)",
        (user_id, estate['name'], estate['income'], estate['price'], datetime.now().isoformat())
    )
    
    conn.commit()
    
    await call.answer(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {estate['name']}! –¢–µ–ø–µ—Ä —É –≤–∞—Å {current_count + 1}/{max_estates}", show_alert=True)
    await cb_shop_real_estate(call)

@dp.callback_query_handler(lambda c: c.data == 'cannot_buy_estate')
async def cb_cannot_buy_estate(call: types.CallbackQuery):
    await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –∞–±–æ –¥–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'shop_roles')
async def cb_shop_roles(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    user_coins = get_user_coins(user_id)
    current_role = get_user_role(user_id)
    
    text = (
        f"üé≠ <b>–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π</b>\n\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üéØ –ü–æ—Ç–æ—á–Ω–∞ —Ä–æ–ª—å: {current_role}\n\n"
        f"üé≠ <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ:</b>\n"
    )
    
    kb = InlineKeyboardMarkup(row_width=1)
    
    for role in Roles.ROLES:
        can_buy = user_coins >= role['price'] and current_role != role['name']
        has_role = current_role == role['name']
        emoji = "‚úÖ" if can_buy else "‚ùå" if not has_role else "‚≠ê"
        
        if has_role:
            text += f"{emoji} <b>{role['name']}</b> - –£ –í–ê–°\n"
            text += f"   üí∞ {role['price']} ‚úØ | {role['description']}\n\n"
        else:
            text += f"{emoji} <b>{role['name']}</b>\n"
            text += f"   üí∞ {role['price']} ‚úØ | {role['description']}\n\n"
        
        if can_buy:
            kb.insert(InlineKeyboardButton(
                f"üé≠ {role['name']} - {role['price']}‚úØ", 
                callback_data=f"buy_role_{role['id']}"
            ))
        elif not has_role:
            kb.insert(InlineKeyboardButton(
                f"‚ùå {role['name']} - {role['price']}‚úØ", 
                callback_data=f"cannot_buy_role"
            ))
        else:
            kb.insert(InlineKeyboardButton(
                f"‚≠ê {role['name']} - –í–ê–®–ê –†–û–õ–¨", 
                callback_data=f"already_has_role"
            ))
    
    text += "üí° <b>–£–≤–∞–≥–∞:</b> –ú–æ–∂–Ω–∞ –º–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω—É —Ä–æ–ª—å! –ü—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ –Ω–æ–≤–æ—ó —Å—Ç–∞—Ä–∞ –ø—Ä–æ–¥–∞—î—Ç—å—Å—è."
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_shop"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('buy_role_'))
async def cb_buy_role(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    role_id = int(call.data.replace('buy_role_', ''))
    
    if buy_role(user_id, role_id):
        await call.answer("‚úÖ –†–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞!", show_alert=True)
        await cb_shop_roles(call)
    else:
        await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ä–æ–ª—ñ!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'cannot_buy_role')
async def cb_cannot_buy_role(call: types.CallbackQuery):
    await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'already_has_role')
async def cb_already_has_role(call: types.CallbackQuery):
    await call.answer("‚≠ê –¶—è —Ä–æ–ª—å –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'shop_prefixes')
async def cb_shop_prefixes(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    user_coins = get_user_coins(user_id)
    current_prefix = get_user_prefix(user_id)
    
    text = (
        f"üè∑Ô∏è <b>–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤</b>\n\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_coins} ‚úØ\n"
        f"üè∑Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–µ—Ñ—ñ–∫—Å: {current_prefix if current_prefix else '–í—ñ–¥—Å—É—Ç–Ω—ñ–π'}\n\n"
        f"üè∑Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–µ—Ñ—ñ–∫—Å–∏:</b>\n"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    
    for prefix in Prefixes.PREFIXES:
        can_buy = user_coins >= prefix['price'] and current_prefix != prefix['name']
        has_prefix = current_prefix == prefix['name']
        emoji = "‚úÖ" if can_buy else "‚ùå" if not has_prefix else "‚≠ê"
        
        if has_prefix:
            text += f"{emoji} <b>{prefix['name']}</b> - –£ –í–ê–°\n"
            text += f"   üí∞ {prefix['price']} ‚úØ | ID: {prefix['id']}\n\n"
        else:
            text += f"{emoji} <b>{prefix['name']}</b>\n"
            text += f"   üí∞ {prefix['price']} ‚úØ | ID: {prefix['id']}\n\n"
        
        if can_buy:
            kb.insert(InlineKeyboardButton(
                f"{prefix['name']} - {prefix['price']}‚úØ", 
                callback_data=f"buy_prefix_{prefix['id']}"
            ))
        elif not has_prefix:
            kb.insert(InlineKeyboardButton(
                f"‚ùå {prefix['price']}‚úØ", 
                callback_data=f"cannot_buy_prefix"
            ))
        else:
            kb.insert(InlineKeyboardButton(
                f"‚≠ê {prefix['name']}", 
                callback_data=f"already_has_prefix"
            ))
    
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_shop"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('buy_prefix_'))
async def cb_buy_prefix(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    prefix_id = int(call.data.replace('buy_prefix_', ''))
    
    if buy_prefix(user_id, prefix_id):
        await call.answer("‚úÖ –ü—Ä–µ—Ñ—ñ–∫—Å —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∏–π!", show_alert=True)
        await cb_shop_prefixes(call)
    else:
        await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ—Ñ—ñ–∫—Å–∞!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'cannot_buy_prefix')
async def cb_cannot_buy_prefix(call: types.CallbackQuery):
    await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'already_has_prefix')
async def cb_already_has_prefix(call: types.CallbackQuery):
    await call.answer("‚≠ê –¶–µ–π –ø—Ä–µ—Ñ—ñ–∫—Å –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π!", show_alert=True)

# ========== –©–û–î–ï–ù–ù–Ü –ó–ê–í–î–ê–ù–ù–Ø ==========
@dp.callback_query_handler(lambda c: c.data == 'daily_tasks')
async def cb_daily_tasks(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    ensure_player(user_id, call.from_user.username or call.from_user.full_name)
    
    progress = get_daily_tasks_progress(user_id)
    
    text = (
        f"üìã <b>–©–æ–¥–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è</b>\n\n"
        f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {progress['tasks_completed']}/2\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
        f"üéØ <b>–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:</b>\n"
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    buttons_added = False
    
    for i, task in enumerate(progress["active_tasks"]):
        # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è
        percentage = min((task['current'] / task['target']) * 100, 100)
        progress_bar = create_progress_bar(percentage)
        
        status = "‚úÖ" if task["completed"] else "‚è≥"
        text += f"{i+1}. {task['description']} {status}\n"
        text += f"   {progress_bar}\n"
        text += f"   –ü—Ä–æ–≥—Ä–µ—Å: {task['current']}/{task['target']} | –ù–∞–≥–æ—Ä–æ–¥–∞: {task['reward']} ‚úØ\n\n"
        
        if task["completed"]:
            kb.insert(InlineKeyboardButton(f"üéÅ –ó–∞–≤–¥.{i+1}", callback_data=f"claim_task_{i}"))
            buttons_added = True
    
    if not buttons_added:
        text += "üí° –í–∏–∫–æ–Ω–∞–π—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥–∏!"
    
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="daily_tasks"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('claim_task_'))
async def cb_claim_task(call: types.CallbackQuery):
    task_index = int(call.data.replace('claim_task_', ''))
    user_id = call.from_user.id
    
    progress = get_daily_tasks_progress(user_id)
    
    if task_index >= len(progress["active_tasks"]):
        await call.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    task = progress["active_tasks"][task_index]
    
    if not task["completed"]:
        await call.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è —â–µ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ!", show_alert=True)
        return
    
    add_user_coins(user_id, task["reward"])
    cursor.execute("UPDATE daily_tasks SET tasks_completed = tasks_completed + 1 WHERE user_id = ? AND task_date = ?", 
                   (user_id, datetime.now().date().isoformat()))
    conn.commit()
    
    await call.answer(f"üéâ –û—Ç—Ä–∏–º–∞–Ω–æ {task['reward']} ‚úØ!", show_alert=True)
    await cb_daily_tasks(call)


# ========== –î–û–î–ê–¢–ö–û–í–Ü –§–£–ù–ö–¶–Ü–á ==========
def add_user_xp(user_id: int, xp: int):
    # –ë–æ–Ω—É—Å –¥–ª—è –°—Ç—É–¥–µ–Ω—Ç–∞
    role = get_user_role(user_id)
    if role == "–°—Ç—É–¥–µ–Ω—Ç":
        xp = int(xp * 1.05)
    
    cursor.execute("UPDATE players SET xp = xp + ? WHERE user_id = ?", (xp, user_id))
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
    current_level = get_user_level(user_id)
    current_xp = get_user_xp(user_id)
    xp_needed = current_level * XP_PER_LEVEL
    
    if current_xp >= xp_needed:
        new_level = current_level + 1
        cursor.execute("UPDATE players SET level = ? WHERE user_id = ?", (new_level, user_id))
        conn.commit()
        return new_level
    return current_level

def get_user_xp(user_id: int) -> int:
    cursor.execute("SELECT xp FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def create_progress_bar(percentage: float, length: int = 10) -> str:
    filled = int(length * percentage / 100)
    empty = length - filled
    return f"[{'‚ñà' * filled}{'‚ñë' * empty}] {percentage:.1f}%"

# ========== –ê–î–ú–Ü–ù-ADMIN
#–¥–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# ========== –ö–û–ù–§–ò–ì ==========
BOT_TOKEN = "8160983444:AAF-qKOw_MtVhFPtnejy3UcbPT59riKrsd8"
OWNER_ID = 5672490558  # –¢–í–Ü–ô ID
ADMIN_IDS = [OWNER_ID]  # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ - —Ç—ñ–ª—å–∫–∏ —Ç–∏

# ========== –ü–ï–†–ï–í–Ü–†–ö–ê –ê–î–ú–Ü–ù–ê ==========
def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º (–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º —Ç–∞–±–ª–∏—Ü—ñ)"""
    try:
        # –í–ª–∞—Å–Ω–∏–∫ –∑–∞–≤–∂–¥–∏ –∞–¥–º—ñ–Ω
        if user_id == OWNER_ID:
            return True
            
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–∞–±–ª–∏—Ü—è —ñ—Å–Ω—É—î
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='bot_admins'
        """)
        table_exists = cursor.fetchone()
        
        if not table_exists:
            # –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î - —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS bot_admins (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT NOT NULL,
                    added_by INTEGER NOT NULL,
                    added_date TEXT NOT NULL,
                    status TEXT DEFAULT 'active'
                )
            """)
            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—é bot_admins —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            return False  # –ü–æ–∫–∏ –Ω—ñ—Ö—Ç–æ –Ω–µ –∞–¥–º—ñ–Ω –∫—Ä—ñ–º –≤–ª–∞—Å–Ω–∏–∫–∞
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        cursor.execute("""
            SELECT 1 FROM bot_admins 
            WHERE user_id = ? AND (status = 'active' OR status IS NULL)
        """, (user_id,))
        
        is_adm = cursor.fetchone() is not None
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –¥–µ–±–∞–≥
        if is_adm:
            print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –∞–¥–º—ñ–Ω–∞—Ö")
        else:
            print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –∞–¥–º—ñ–Ω–∞—Ö")
            
        return is_adm
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–¥–º—ñ–Ω–∞ {user_id}: {e}")
        return False


# ========== –ö–û–ú–ê–ù–î–ò –î–õ–Ø –í–õ–ê–°–ù–ò–ö–ê ==========

# ========== –ù–û–í–ê –ü–†–û–°–¢–ê –ê–î–ú–Ü–ù-–°–ò–°–¢–ï–ú–ê ==========

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

@dp.callback_query_handler(lambda c: c.data == 'simple_admin_panel')
async def cb_simple_admin_panel(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    text = (
        "üëë <b>–ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨ v2.0</b>\n\n"
        "‚ö° <b>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥–∏:</b>\n\n"
        "üí∞ <b>–ì—Ä–æ—à—ñ:</b>\n"
        "<code>/setcoins ID —Å—É–º–º–∞</code>\n"
        "<code>/rewardtop5 —Å—É–º–º–∞</code>\n"
        "<code>/rewardactive —Å—É–º–º–∞</code>\n\n"
        
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"  
        "<code>/adminstats</code>\n"
        "<code>/users</code>\n\n"
        
        "üéØ <b>–Ü–≤–µ–Ω—Ç–∏:</b>\n"
        "<code>/event start 2xcoins 24</code>\n"
        "<code>/event status</code>\n\n"
        
        "‚ö° <b>–ï–∫—Å–ø–æ—Ä—Ç:</b>\n"
        "<code>/export users</code>\n"
        "<code>/export items</code>\n\n"
        
        "üõ°Ô∏è <b>–ú–æ–¥–µ—Ä–∞—Ü—ñ—è:</b>\n"
        "<code>/warn ID –ø—Ä–∏—á–∏–Ω–∞</code>\n"
        "<code>/mute ID —Ö–≤–∏–ª–∏–Ω–∏</code>\n"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="simple_admin_panel"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back|main"))
    
    await call.message.edit_text(text, reply_markup=kb)

# ========== –ë–ê–ó–û–í–Ü –ê–î–ú–Ü–ù-–ö–û–ú–ê–ù–î–ò ==========

@dp.message_handler(commands=['setcoins'])
async def cmd_setcoins(message: types.Message):
    """–ù–æ–≤–∞ –ø—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        amount = int(parts[2])
        
        cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (amount, user_id))
        conn.commit()
        
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ {amount} ‚úØ")
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['adminstats'])
async def cmd_adminstats(message: types.Message):
    """–ü—Ä–æ—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not is_admin(message.from_user.id):
        return
    
    cursor.execute("SELECT COUNT(*) FROM players WHERE last_active > datetime('now', '-1 day')")
    active_today = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM players")
    total_players = cursor.fetchone()[0]
    
    cursor.execute("SELECT SUM(coins) FROM players")
    total_coins = cursor.fetchone()[0] or 0
    
    text = (
        "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n"
        f"üë• –ì—Ä–∞–≤—Ü—ñ–≤: {total_players}\n"
        f"üéØ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞ 24–≥: {active_today}\n" 
        f"üí∞ –ú–æ–Ω–µ—Ç –≤ –æ–±—ñ–≥—É: {total_coins:,} ‚úØ\n"
        f"üïí –ß–∞—Å: {datetime.now().strftime('%H:%M')}"
    )
    
    await message.answer(text)

@dp.message_handler(commands=['users'])
async def cmd_users(message: types.Message):
    """–ü—Ä–æ—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤"""
    if not is_admin(message.from_user.id):
        return
    
    cursor.execute("SELECT user_id, username, coins, level FROM players ORDER BY coins DESC LIMIT 10")
    top_players = cursor.fetchall()
    
    text = "üèÜ <b>–¢–û–ü-10 –ì–†–ê–í–¶–Ü–í</b>\n\n"
    for i, (user_id, username, coins, level) in enumerate(top_players, 1):
        text += f"{i}. {username}\n"
        text += f"   ID: {user_id} | üí∞ {coins:,} ‚úØ | üéØ {level} —Ä—ñ–≤.\n\n"
    
    await message.answer(text)

#=========== ADMIN COMANDS - –ê–î–ú–Ü–ù –ö–û–ú–ê–ù–î–ò ==========
@dp.message_handler(commands=['msgall'])
async def cmd_msgall(message: types.Message):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫—Ä–∞—Å–∏–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer(
                "üîî <b>–§–û–†–ú–ê–¢ –†–û–ó–°–ò–õ–ö–ò</b>\n\n"
                "üìù <b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b>\n"
                "<code>/msgall –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</code>\n\n"
                "üéØ <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
                "<code>/msgall –í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤! üöÄ</code>\n"
                "<code>/msgall –ó–∞–≤—Ç—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∏ –∑ 14:00! üéÆ</code>\n"
                "<code>/msgall –ù–æ–≤–∏–π —ñ–≤–µ–Ω—Ç —Å—Ç–∞—Ä—Ç—É—î —á–µ—Ä–µ–∑ 2 –¥–Ω—ñ! üéâ</code>\n\n"
                "‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b> –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–Ü–ú –≥—Ä–∞–≤—Ü—è–º!"
            )
            return
        
        admin_message = parts[1]
        admin_name = message.from_user.username or message.from_user.full_name
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
        cursor.execute("SELECT user_id, username FROM players")
        all_players = cursor.fetchall()
        
        if not all_players:
            await message.answer("‚ùå –ù–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏!")
            return
        
        success_count = 0
        failed_count = 0
        
        # –ö—Ä–∞—Å–∏–≤–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        announcement_text = (
            f"‚ü°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ü°\n"
            f"   üì¢  <b>–°–ü–û–í–Ü–©–ï–ù–ù–Ø –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¶–Ü–á</b>\n"
            f"‚ü°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ü°\n\n"
            f"üí´ <b>–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø:</b>\n"
            f"‚ú® {admin_message}\n\n"
            f"üëÆ <b>–ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†:</b> Luna\n"
            f"üìÖ <b>–î–ê–¢–ê:</b> {datetime.now().strftime('%d.%m.%Y')}\n"
            f"‚è∞ <b>–ß–ê–°:</b> {datetime.now().strftime('%H:%M')}\n\n"
            f"‚ü°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ü°\n"
            f"     üéÆ <i>–î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É!</i> üéÆ\n"
            f"‚ü°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ü°"
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –≥—Ä–∞–≤—Ü—é
        for user_id, username in all_players:
            try:
                await bot.send_message(
                    user_id,
                    announcement_text,
                    parse_mode="HTML"
                )
                success_count += 1
                
                # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Telegram
                await asyncio.sleep(0.1)
                
            except Exception as e:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ {user_id}: {e}")
                failed_count += 1
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞
        results_text = (
            f"üì® <b>–†–û–ó–°–ò–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
            f"‚ü°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ü°\n"
            f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success_count} –≥—Ä–∞–≤—Ü—ñ–≤\n"
            f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å: {failed_count} –≥—Ä–∞–≤—Ü—ñ–≤\n"
            f"üë• –í—Å—å–æ–≥–æ: {len(all_players)} –≥—Ä–∞–≤—Ü—ñ–≤\n\n"
            f"üí¨ <b>–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø:</b>\n"
            f"üìù {admin_message}\n\n"
            f"‚è∞ <i>–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {datetime.now().strftime('%H:%M:%S')}</i>"
        )
        
        await message.answer(results_text)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–æ –ª–æ–≥—É—î–º–æ
        log.info(f"üì¢ –ê–¥–º—ñ–Ω {admin_name} –∑—Ä–æ–±–∏–≤ —Ä–æ–∑—Å–∏–ª–∫—É: {admin_message}")
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")

@dp.message_handler(commands=['msgi'])
async def cmd_msgi(message: types.Message):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    try:
        parts = message.text.split(maxsplit=2)  # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ 3 —á–∞—Å—Ç–∏–Ω–∏
        if len(parts) < 3:
            await message.answer(
                "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "üìù <b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b>\n"
                "<code>/msgi ID_–≥—Ä–∞–≤—Ü—è –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</code>\n\n"
                "üìù <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
                "<code>/msgi 123456789 –í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é! üéâ</code>\n"
                "<code>/msgi 123456789 –ù–∞–≥–∞–¥—É—î–º–æ –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏</code>\n\n"
                "üí° <b>ID –≥—Ä–∞–≤—Ü—è</b> –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —á–µ—Ä–µ–∑ /users"
            )
            return
        
        user_id = int(parts[1])
        admin_message = parts[2]
        admin_name = message.from_user.username or message.from_user.full_name
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞–≤–µ—Ü—å —ñ—Å–Ω—É—î
        cursor.execute("SELECT username FROM players WHERE user_id = ?", (user_id,))
        player_data = cursor.fetchone()
        
        if not player_data:
            await message.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
            return
        
        player_name = player_data[0]
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é
        try:
            await bot.send_message(
                user_id,
                f"üì¢ <b>–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –í–Ü–î –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¶–Ü–á</b>\n\n"
                f"üí¨ {admin_message}\n\n"
                f"üëÆ <i>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: Luna</i>\n"
                f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üéâ –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!"
            )
            
            await message.answer(
                f"‚úÖ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üë§ –ì—Ä–∞–≤–µ—Ü—å: {player_name}\n"
                f"üÜî ID: {user_id}\n"
                f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {admin_message}\n\n"
                f"üì® –ì—Ä–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
            )
            
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é. –ú–æ–∂–ª–∏–≤–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['export'])
async def cmd_export(message: types.Message):
    """–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –≤ CSV"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(
                "üìÅ <b>–ï–ö–°–ü–û–†–¢ –î–ê–ù–ò–•</b>\n\n"
                "‚ö° <b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
                "<code>/export users</code> - —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤\n"
                "<code>/export items</code> - –ø—Ä–µ–¥–º–µ—Ç–∏ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è—Ö\n"
                "<code>/export transactions</code> - –ø–µ—Ä–µ–∫–∞–∑–∏\n"
                "<code>/export businesses</code> - –±—ñ–∑–Ω–µ—Å–∏\n"
            )
            return
        
        export_type = parts[1].lower()
        
        if export_type == 'users':
            await export_users(message)
        elif export_type == 'items':
            await export_items(message)
        elif export_type == 'transactions':
            await export_transactions(message)
        elif export_type == 'businesses':
            await export_businesses(message)
        else:
            await message.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –µ–∫—Å–ø–æ—Ä—Ç—É")
            
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")

async def export_users(message: types.Message):
    """–ï–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞–≤—Ü—ñ–≤"""
    cursor.execute("""
        SELECT user_id, username, level, xp, coins, role, prefix, 
               total_taps, last_active 
        FROM players 
        ORDER BY coins DESC
    """)
    users = cursor.fetchall()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ CSV
    csv_content = "ID;Username;Level;XP;Coins;Role;Prefix;Taps;Last Active\n"
    
    for user in users:
        user_id, username, level, xp, coins, role, prefix, taps, last_active = user
        csv_content += f"{user_id};{username};{level};{xp};{coins};{role};{prefix};{taps};{last_active}\n"
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ñ–∞–π–ª
    filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(csv_content)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª
    with open(filename, 'rb') as f:
        await message.answer_document(
            f,
            caption=f"üìä –ï–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞–≤—Ü—ñ–≤ ({len(users)} –∑–∞–ø–∏—Å—ñ–≤)"
        )
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
    os.remove(filename)

async def export_items(message: types.Message):
    """–ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ–¥–º–µ—Ç—ñ–≤"""
    cursor.execute("""
        SELECT ui.user_id, p.username, ui.item_name, ui.item_price, ui.item_type, ui.obtained_date
        FROM user_inventory ui
        JOIN players p ON ui.user_id = p.user_id
        ORDER BY ui.obtained_date DESC
    """)
    items = cursor.fetchall()
    
    csv_content = "User ID;Username;Item Name;Price;Type;Obtained Date\n"
    
    for item in items:
        user_id, username, item_name, price, item_type, date = item
        csv_content += f"{user_id};{username};{item_name};{price};{item_type};{date}\n"
    
    filename = f"items_export_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(csv_content)
    
    with open(filename, 'rb') as f:
        await message.answer_document(
            f,
            caption=f"üéÅ –ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ ({len(items)} –∑–∞–ø–∏—Å—ñ–≤)"
        )
    
    os.remove(filename)

async def export_transactions(message: types.Message):
    """–ï–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–∫–∞–∑—ñ–≤"""
    cursor.execute("""
        SELECT mt.from_user_id, p1.username, mt.to_user_id, p2.username, 
               mt.amount, mt.transfer_date
        FROM money_transfers mt
        JOIN players p1 ON mt.from_user_id = p1.user_id
        JOIN players p2 ON mt.to_user_id = p2.user_id
        ORDER BY mt.transfer_date DESC
    """)
    transactions = cursor.fetchall()
    
    csv_content = "From User;From Username;To User;To Username;Amount;Date\n"
    
    for trans in transactions:
        from_id, from_name, to_id, to_name, amount, date = trans
        csv_content += f"{from_id};{from_name};{to_id};{to_name};{amount};{date}\n"
    
    filename = f"transactions_export_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(csv_content)
    
    with open(filename, 'rb') as f:
        await message.answer_document(
            f,
            caption=f"üí∏ –ï–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–∫–∞–∑—ñ–≤ ({len(transactions)} –∑–∞–ø–∏—Å—ñ–≤)"
        )
    
    os.remove(filename)

async def export_businesses(message: types.Message):
    """–ï–∫—Å–ø–æ—Ä—Ç –±—ñ–∑–Ω–µ—Å—ñ–≤"""
    cursor.execute("""
        SELECT ub.user_id, p.username, ub.business_name, ub.business_type, 
               ub.level, ub.purchased_date
        FROM user_businesses ub
        JOIN players p ON ub.user_id = p.user_id
        ORDER BY ub.purchased_date DESC
    """)
    businesses = cursor.fetchall()
    
    csv_content = "User ID;Username;Business Name;Type;Level;Purchased Date\n"
    
    for biz in businesses:
        user_id, username, biz_name, biz_type, level, date = biz
        csv_content += f"{user_id};{username};{biz_name};{biz_type};{level};{date}\n"
    
    filename = f"businesses_export_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(csv_content)
    
    with open(filename, 'rb') as f:
        await message.answer_document(
            f,
            caption=f"üè¢ –ï–∫—Å–ø–æ—Ä—Ç –±—ñ–∑–Ω–µ—Å—ñ–≤ ({len(businesses)} –∑–∞–ø–∏—Å—ñ–≤)"
        )
    
    os.remove(filename)

# ========== –°–ò–°–¢–ï–ú–ê –ú–û–î–ï–†–ê–¶–Ü–á ==========

@dp.message_handler(commands=['warn'])
async def cmd_warn(message: types.Message):
    """–í–∏–¥–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /warn ID –ø—Ä–∏—á–∏–Ω–∞\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /warn 123456789 —Å–ø–∞–º")
            return
        
        user_id = int(parts[1])
        reason = parts[2]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞–≤–µ—Ü—å —ñ—Å–Ω—É—î
        cursor.execute("SELECT username FROM players WHERE user_id = ?", (user_id,))
        player = cursor.fetchone()
        
        if not player:
            await message.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
            return
        
        username = player[0]
        
        # –õ–æ–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (—Ç–∏–º—á–∞—Å–æ–≤–æ –≤ –æ–∫—Ä–µ–º—É —Ç–∞–±–ª–∏—Ü—é)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS warnings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT NOT NULL,
                reason TEXT NOT NULL,
                admin_id INTEGER NOT NULL,
                admin_username TEXT NOT NULL,
                warning_date TEXT NOT NULL
            )
        """)
        
        cursor.execute("""
            INSERT INTO warnings (user_id, username, reason, admin_id, admin_username, warning_date)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (user_id, username, reason, message.from_user.id, 
              message.from_user.username or message.from_user.full_name,
              datetime.now().isoformat()))
        
        # –†–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
        cursor.execute("SELECT COUNT(*) FROM warnings WHERE user_id = ?", (user_id,))
        warn_count = cursor.fetchone()[0]
        
        conn.commit()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é
        try:
            await bot.send_message(
                user_id,
                f"‚ö†Ô∏è <b>–í–ò –û–¢–†–ò–ú–ê–õ–ò –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø</b>\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üî¢ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: {warn_count}/3\n"
                f"‚ùó –ü—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ 3 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å - –±–∞–Ω!"
            )
        except:
            pass  # –ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        
        await message.answer(
            f"‚ö†Ô∏è <b>–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø –í–ò–î–ê–ù–û</b>\n\n"
            f"üë§ –ì—Ä–∞–≤–µ—Ü—å: {username}\n"
            f"üÜî ID: {user_id}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"üî¢ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: {warn_count}/3\n\n"
            f"{'üö® –£–í–ê–ì–ê: –ù–∞—Å—Ç—É–ø–Ω–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è - –±–∞–Ω!' if warn_count >= 2 else ''}"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['mute'])
async def cmd_mute(message: types.Message):
    """–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è –Ω–∞ —á–∞—Å"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /mute ID —Ö–≤–∏–ª–∏–Ω–∏\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /mute 123456789 60")
            return
        
        user_id = int(parts[1])
        minutes = int(parts[2])
        
        if minutes <= 0 or minutes > 10080:  # –ú–∞–∫—Å–∏–º—É–º 7 –¥–Ω—ñ–≤
            await message.answer("‚ùå –•–≤–∏–ª–∏–Ω–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 10080 (7 –¥–Ω—ñ–≤)")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞–≤–µ—Ü—å —ñ—Å–Ω—É—î
        cursor.execute("SELECT username FROM players WHERE user_id = ?", (user_id,))
        player = cursor.fetchone()
        
        if not player:
            await message.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
            return
        
        username = player[0]
        
        # –¢–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –æ–∫—Ä–µ–º—ñ–π —Ç–∞–±–ª–∏—Ü—ñ
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS mutes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT NOT NULL,
                end_time TEXT NOT NULL,
                admin_id INTEGER NOT NULL,
                admin_username TEXT NOT NULL,
                mute_date TEXT NOT NULL
            )
        """)
        
        end_time = datetime.now() + timedelta(minutes=minutes)
        
        cursor.execute("""
            INSERT INTO mutes (user_id, username, end_time, admin_id, admin_username, mute_date)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (user_id, username, end_time.isoformat(), message.from_user.id,
              message.from_user.username or message.from_user.full_name,
              datetime.now().isoformat()))
        
        conn.commit()
        
        # –°–ø–æ–≤—ñ—â–∞—î–º–æ –≥—Ä–∞–≤—Ü—è
        try:
            await bot.send_message(
                user_id,
                f"üîá <b>–í–ò –ó–ê–ú–£–ß–ï–ù–Ü</b>\n\n"
                f"‚è∞ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {minutes} —Ö–≤–∏–ª–∏–Ω\n"
                f"üïí –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è: {end_time.strftime('%H:%M')}\n"
                f"üëÆ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.username or message.from_user.full_name}\n\n"
                f"üìµ –î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –º—É—Ç—É –¥–æ—Å—Ç—É–ø –¥–æ —ñ–≥–æ—Ä –æ–±–º–µ–∂–µ–Ω–æ"
            )
        except:
            pass
        
        await message.answer(
            f"üîá <b>–ì–†–ê–í–ï–¶–¨ –ó–ê–ú–£–ß–ï–ù–ò–ô</b>\n\n"
            f"üë§ {username}\n"
            f"üÜî {user_id}\n"
            f"‚è∞ –ù–∞ {minutes} —Ö–≤–∏–ª–∏–Ω\n"
            f"üïí –î–æ {end_time.strftime('%H:%M')}"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! ID —Ç–∞ —Ö–≤–∏–ª–∏–Ω–∏ –º–∞—é—Ç—å –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['warnings'])
async def cmd_warnings(message: types.Message):
    """–ü–µ—Ä–µ–≥–ª—è–¥ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –≥—Ä–∞–≤—Ü—è"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /warnings ID\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /warnings 123456789")
            return
        
        user_id = int(parts[1])
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        cursor.execute("""
            SELECT reason, admin_username, warning_date 
            FROM warnings 
            WHERE user_id = ? 
            ORDER BY warning_date DESC
        """, (user_id,))
        
        warnings = cursor.fetchall()
        
        cursor.execute("SELECT username FROM players WHERE user_id = ?", (user_id,))
        player = cursor.fetchone()
        
        if not player:
            await message.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
            return
        
        username = player[0]
        
        if not warnings:
            await message.answer(f"‚úÖ {username} –Ω–µ –º–∞—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å")
            return
        
        text = f"‚ö†Ô∏è <b>–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø {username}</b>\n\n"
        
        for i, (reason, admin, date) in enumerate(warnings, 1):
            warn_date = datetime.fromisoformat(date).strftime('%d.%m.%Y %H:%M')
            text += f"{i}. {reason}\n"
            text += f"   üëÆ {admin} | {warn_date}\n\n"
        
        text += f"üìä –í—Å—å–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: {len(warnings)}/3"
        
        await message.answer(text)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
@dp.message_handler(commands=['setcoins'])
async def cmd_setcoins(message: types.Message):
    """–î–æ–¥–∞—Ç–∏/–≤—ñ–¥–Ω—è—Ç–∏ –º–æ–Ω–µ—Ç–∏ –≥—Ä–∞–≤—Ü—é"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /setcoins ID —Å—É–º–º–∞\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /setcoins 123456789 1000")
            return
        
        user_id = int(parts[1])
        amount = int(parts[2])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞–≤–µ—Ü—å —ñ—Å–Ω—É—î
        cursor.execute("SELECT username FROM players WHERE user_id = ?", (user_id,))
        player = cursor.fetchone()
        
        if not player:
            await message.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
            return
        
        username = player[0]
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
        cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (amount, user_id))
        conn.commit()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
        cursor.execute("SELECT coins FROM players WHERE user_id = ?", (user_id,))
        new_balance = cursor.fetchone()[0]
        
        action = "–¥–æ–¥–∞–Ω–æ" if amount > 0 else "–∑–Ω—è—Ç–æ"
        await message.answer(
            f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üë§ –ì—Ä–∞–≤–µ—Ü—å: {username}\n"
            f"üÜî ID: {user_id}\n"
            f"üí∞ {action}: {abs(amount)} ‚úØ\n"
            f"üíé –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚úØ"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! ID —Ç–∞ —Å—É–º–º–∞ –º–∞—é—Ç—å –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['rewardactive'])
async def cmd_rewardactive(message: types.Message):
    """–ù–∞–≥–æ—Ä–æ–¥–∏—Ç–∏ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /rewardactive —Å—É–º–º–∞\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /rewardactive 500")
            return
        
        amount = int(parts[1])
        
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!")
            return
        
        # –†–∞—Ö—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ (–æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏)
        cursor.execute("SELECT COUNT(*) FROM players WHERE last_active > datetime('now', '-1 day')")
        active_players = cursor.fetchone()[0]
        
        if active_players == 0:
            await message.answer("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏!")
            return
        
        # –ù–∞–≥–æ—Ä–æ–¥–∂—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö
        cursor.execute("UPDATE players SET coins = coins + ? WHERE last_active > datetime('now', '-1 day')", (amount,))
        conn.commit()
        
        total_reward = active_players * amount
        
        await message.answer(
            f"üéâ <b>–ê–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–∞–≥–æ—Ä–æ–¥–∂–µ–Ω–æ!</b>\n\n"
            f"üë• –ì—Ä–∞–≤—Ü—ñ–≤: {active_players}\n"
            f"üí∞ –ù–∞–≥–æ—Ä–æ–¥–∞: {amount} ‚úØ –∫–æ–∂–Ω–æ–º—É\n"
            f"üí∏ –í—Å—å–æ–≥–æ –≤–∏–¥–∞–Ω–æ: {total_reward} ‚úØ\n\n"
            f"‚ö° –ì—Ä–∞–≤—Ü—ñ –æ—Ç—Ä–∏–º–∞—é—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!"
        )
        
        # TODO: –¢—É—Ç –ø–æ—Ç—ñ–º –¥–æ–¥–∞–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è–º
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['rewardtop5'])
async def cmd_rewardtop5(message: types.Message):
    """–ù–∞–≥–æ—Ä–æ–¥–∏—Ç–∏ —Ç–æ–ø-5 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /rewardtop5 —Å—É–º–º–∞\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /rewardtop5 1000")
            return
        
        amount = int(parts[1])
        
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø-5 –≥—Ä–∞–≤—Ü—ñ–≤
        cursor.execute("SELECT user_id, username, coins FROM players ORDER BY coins DESC LIMIT 5")
        top_players = cursor.fetchall()
        
        if not top_players:
            await message.answer("‚ùå –ù–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –Ω–∞–≥–æ—Ä–æ–¥–∂–µ–Ω–Ω—è!")
            return
        
        # –ù–∞–≥–æ—Ä–æ–¥–∂—É—î–º–æ —Ç–æ–ø-5
        rewarded_players = []
        for user_id, username, current_coins in top_players:
            cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (amount, user_id))
            rewarded_players.append(f"‚Ä¢ {username} - {current_coins + amount} ‚úØ")
        
        conn.commit()
        
        players_list = "\n".join(rewarded_players)
        
        await message.answer(
            f"üèÜ <b>–¢–æ–ø-5 –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–∞–≥–æ—Ä–æ–¥–∂–µ–Ω–æ!</b>\n\n"
            f"üí∞ –ù–∞–≥–æ—Ä–æ–¥–∞: {amount} ‚úØ –∫–æ–∂–Ω–æ–º—É\n\n"
            f"üéØ –ù–∞–≥–æ—Ä–æ–¥–∂–µ–Ω—ñ –≥—Ä–∞–≤—Ü—ñ:\n{players_list}"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –°–ò–°–¢–ï–ú–ê –Ü–í–ï–ù–¢–Ü–í

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —ñ–≤–µ–Ω—Ç—É
current_event = None

@dp.message_handler(commands=['event'])
async def cmd_event(message: types.Message):
    """–ö–µ—Ä—É–≤–∞–Ω–Ω—è —ñ–≤–µ–Ω—Ç–∞–º–∏"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        
        if len(parts) < 2:
            await message.answer(
                "üéØ <b>–°–ò–°–¢–ï–ú–ê –Ü–í–ï–ù–¢–Ü–í</b>\n\n"
                "‚ö° <b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
                "<code>/event start 2xcoins 24</code> - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–≤–µ–Ω—Ç\n"
                "<code>/event start 2xxp 48</code> - x2 –¥–æ—Å–≤—ñ–¥—É –Ω–∞ 48 –≥–æ–¥.\n" 
                "<code>/event status</code> - —Å—Ç–∞—Ç—É—Å —ñ–≤–µ–Ω—Ç—É\n"
                "<code>/event stop</code> - –∑—É–ø–∏–Ω–∏—Ç–∏ —ñ–≤–µ–Ω—Ç\n\n"
                "üéÅ <b>–î–æ—Å—Ç—É–ø–Ω—ñ —ñ–≤–µ–Ω—Ç–∏:</b>\n"
                "‚Ä¢ <code>2xcoins</code> - –ø–æ–¥–≤—ñ–π–Ω—ñ –º–æ–Ω–µ—Ç–∏\n"
                "‚Ä¢ <code>2xxp</code> - –ø–æ–¥–≤—ñ–π–Ω–∏–π –¥–æ—Å–≤—ñ–¥\n"
                "‚Ä¢ <code>free_spins</code> - –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Å–ø—ñ–Ω–∏\n"
            )
            return
        
        subcommand = parts[1].lower()
        
        if subcommand == 'start' and len(parts) >= 4:
            event_type = parts[2].lower()
            hours = int(parts[3])
            
            global current_event
            current_event = {
                'type': event_type,
                'start_time': datetime.now(),
                'end_time': datetime.now() + timedelta(hours=hours),
                'hours': hours
            }
            
            event_names = {
                '2xcoins': 'üí∞ –ü–æ–¥–≤—ñ–π–Ω—ñ –º–æ–Ω–µ—Ç–∏',
                '2xxp': 'üéØ –ü–æ–¥–≤—ñ–π–Ω–∏–π –¥–æ—Å–≤—ñ–¥', 
                'free_spins': 'üé∞ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Å–ø—ñ–Ω–∏'
            }
            
            event_name = event_names.get(event_type, event_type)
            
            await message.answer(
                f"üéâ <b>–Ü–í–ï–ù–¢ –ó–ê–ü–£–©–ï–ù–û!</b>\n\n"
                f"üéØ –¢–∏–ø: {event_name}\n"
                f"‚è∞ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {hours} –≥–æ–¥–∏–Ω\n"
                f"üïí –ó–∞–≤–µ—Ä—à–∏—Ç—å—Å—è: {current_event['end_time'].strftime('%d.%m.%Y –æ %H:%M')}\n\n"
                f"üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º!"
            )
            
            # TODO: –¢—É—Ç –ø–æ—Ç—ñ–º –¥–æ–¥–∞–º–æ —Ä–æ–∑—Å–∏–ª–∫—É –≥—Ä–∞–≤—Ü—è–º
            
        elif subcommand == 'status':
            if current_event:
                time_left = current_event['end_time'] - datetime.now()
                hours_left = max(0, int(time_left.total_seconds() // 3600))
                minutes_left = max(0, int((time_left.total_seconds() % 3600) // 60))
                
                event_names = {
                    '2xcoins': 'üí∞ –ü–æ–¥–≤—ñ–π–Ω—ñ –º–æ–Ω–µ—Ç–∏',
                    '2xxp': 'üéØ –ü–æ–¥–≤—ñ–π–Ω–∏–π –¥–æ—Å–≤—ñ–¥',
                    'free_spins': 'üé∞ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ —Å–ø—ñ–Ω–∏'
                }
                
                event_name = event_names.get(current_event['type'], current_event['type'])
                
                await message.answer(
                    f"üìä <b>–°–¢–ê–¢–£–° –Ü–í–ï–ù–¢–£</b>\n\n"
                    f"üéØ –¢–∏–ø: {event_name}\n"
                    f"‚è∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {hours_left}–≥ {minutes_left}—Ö–≤\n"
                    f"üïí –ó–∞–≤–µ—Ä—à–∏—Ç—å—Å—è: {current_event['end_time'].strftime('%d.%m.%Y –æ %H:%M')}\n"
                    f"üöÄ –ó–∞–ø—É—â–µ–Ω–æ: {current_event['start_time'].strftime('%d.%m.%Y %H:%M')}"
                )
            else:
                await message.answer("‚ùå –ù–∞—Ä–∞–∑—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≤–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î")
                
        elif subcommand == 'stop':
            if current_event:
                current_event = None
                await message.answer("‚úÖ –Ü–≤–µ–Ω—Ç –∑—É–ø–∏–Ω–µ–Ω–æ!")
            else:
                await message.answer("‚ùå –ù–∞—Ä–∞–∑—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≤–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î")
                
        else:
            await message.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /event –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏")
            
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ñ–≤–µ–Ω—Ç—É (–¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —á–∞—Å—Ç–∏–Ω–∞—Ö –∫–æ–¥—É)
def get_active_event():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π —ñ–≤–µ–Ω—Ç"""
    global current_event
    if current_event and datetime.now() < current_event['end_time']:
        return current_event
    return None

def is_event_active(event_type):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —ñ–≤–µ–Ω—Ç"""
    event = get_active_event()
    return event and event['type'] == event_type



# ADMIN STAST - –ê–î–ú–Ü–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê
@dp.message_handler(commands=['adminstats'])
async def cmd_adminstats(message: types.Message):
    """–®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        # –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
        cursor.execute("SELECT COUNT(*) FROM players WHERE last_active > datetime('now', '-1 day')")
        active_today = cursor.fetchone()[0]
        
        # –í—Å—å–æ–≥–æ –≥—Ä–∞–≤—Ü—ñ–≤
        cursor.execute("SELECT COUNT(*) FROM players")
        total_players = cursor.fetchone()[0]
        
        # –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å
        cursor.execute("SELECT SUM(coins) FROM players")
        total_coins = cursor.fetchone()[0] or 0
        
        # –¢–æ–ø-1 –≥—Ä–∞–≤–µ—Ü—å
        cursor.execute("SELECT username, coins FROM players ORDER BY coins DESC LIMIT 1")
        top_player = cursor.fetchone()
        top_player_info = f"{top_player[0]} - {top_player[1]:,} ‚úØ" if top_player else "–ù–µ–º–∞—î"
        
        # –ü—Ä–µ–¥–º–µ—Ç—ñ–≤ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è—Ö
        cursor.execute("SELECT COUNT(*) FROM user_inventory")
        total_items = cursor.fetchone()[0]
        
        text = (
            "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n"
            f"üë• –í—Å—å–æ–≥–æ –≥—Ä–∞–≤—Ü—ñ–≤: {total_players}\n"
            f"üéØ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞ 24–≥: {active_today}\n"
            f"üí∞ –ú–æ–Ω–µ—Ç –≤ –æ–±—ñ–≥—É: {total_coins:,} ‚úØ\n"
            f"üèÜ –¢–æ–ø-1 –≥—Ä–∞–≤–µ—Ü—å: {top_player_info}\n"
            f"üéÅ –ü—Ä–µ–¥–º–µ—Ç—ñ–≤ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è—Ö: {total_items}\n\n"
            f"üïí –û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        await message.answer(text)
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['users'])
async def cmd_users(message: types.Message):
    """–°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        cursor.execute("SELECT user_id, username, coins, level, last_active FROM players ORDER BY coins DESC LIMIT 15")
        players = cursor.fetchall()
        
        text = "üë• <b>–¢–û–ü-15 –ì–†–ê–í–¶–Ü–í</b>\n\n"
        
        for i, (user_id, username, coins, level, last_active) in enumerate(players, 1):
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
            last_active_time = datetime.fromisoformat(last_active)
            time_diff = datetime.now() - last_active_time
            hours_ago = int(time_diff.total_seconds() // 3600)
            
            status = "üü¢" if hours_ago < 1 else "üü°" if hours_ago < 24 else "üî¥"
            
            text += f"{status} {i}. {username}\n"
            text += f"   üÜî {user_id} | üí∞ {coins:,} ‚úØ | üéØ {level} —Ä—ñ–≤.\n"
            text += f"   ‚è∞ {hours_ago} –≥–æ–¥. —Ç–æ–º—É\n\n"
        
        await message.answer(text)
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
# ========== –°–ò–°–¢–ï–ú–ê –î–†–£–ó–Ü–í (–æ–Ω–æ–≤–ª–µ–Ω–∞) ==========
@dp.callback_query_handler(lambda c: c.data == 'friends_list')
async def cb_friends_list(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    friends = get_user_friends(user_id)
    
    text = "üë• <b>–í–∞—à—ñ –¥—Ä—É–∑—ñ</b>\n\n"
    
    if friends:
        for i, friend in enumerate(friends, 1):
            friend_prefix = get_user_prefix(friend['user_id'])
            display_name = f"{friend_prefix} {friend['username']}" if friend_prefix else friend['username']
            text += f"{i}. {display_name}\n"
            text += f"   ID: {friend['user_id']}\n\n"
    else:
        text += "‚ùå –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥—Ä—É–∑—ñ–≤!\n\n"
        text += "üí° –î–æ–¥–∞–π—Ç–µ –¥—Ä—É–≥–∞ –∑–∞ –π–æ–≥–æ ID"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–∞", callback_data="friends_add"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_friends"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'friends_add')
async def cb_friends_add(call: types.CallbackQuery):
    await call.answer()
    
    text = (
        "‚ûï <b>–î–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–∞</b>\n\n"
        "üìù <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "<code>/addfriend ID_–¥—Ä—É–≥–∞</code>\n\n"
        "üìù <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
        "<code>/addfriend 123456789</code>\n\n"
        "üí° <b>–Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å ID –¥—Ä—É–≥–∞?</b>\n"
        "1. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–≥–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ /start –±–æ—Ç—É\n"
        "2. –í—ñ–Ω –ø–æ–±–∞—á–∏—Ç—å —Å–≤—ñ–π ID —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\n"
        "3. –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ @userinfobot"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤", callback_data="friends_list"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_friends"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'friends_transfer')
async def cb_friends_transfer(call: types.CallbackQuery):
    await call.answer()
    
    text = (
        "üí∞ <b>–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥—Ä–æ—à—ñ –¥—Ä—É–≥—É</b>\n\n"
        "üìù <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "<code>/transfer ID_–¥—Ä—É–≥–∞ —Å—É–º–∞</code>\n\n"
        "üìù <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
        "<code>/transfer 123456789 100</code> - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 100 ‚úØ\n"
        "<code>/transfer 123456789 500</code> - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 500 ‚úØ\n\n"
        "‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b>\n"
        "‚Ä¢ –ö–æ–º—ñ—Å—ñ—è 5% (–∫—Ä—ñ–º –ë–∞–Ω–∫—ñ—Ä–∞)\n"
        "‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞: 10 ‚úØ\n"
        "‚Ä¢ –ù–µ –º–æ–∂–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–æ–±—ñ"
    )
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤", callback_data="friends_list"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_friends"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.message_handler(commands=['addfriend'])
async def cmd_addfriend(message: types.Message):
    user_id = message.from_user.id
    ensure_player(user_id, message.from_user.username or message.from_user.full_name)
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addfriend ID_–¥—Ä—É–≥–∞")
            return
        
        friend_id = int(parts[1])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –¥–æ–¥–∞—î–º–æ —Å–µ–±–µ
        if friend_id == user_id:
            await message.answer("‚ùå –ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–µ–±–µ –≤ –¥—Ä—É–∑—ñ!")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –≥—Ä–∞–≤–µ—Ü—å
        cursor.execute("SELECT username FROM players WHERE user_id = ?", (friend_id,))
        friend_data = cursor.fetchone()
        
        if not friend_data:
            await message.answer("‚ùå –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π! –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–≥–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ /start –±–æ—Ç—É.")
            return
        
        friend_username = friend_data[0]
        
        # –î–æ–¥–∞—î–º–æ –¥—Ä—É–≥–∞
        if add_friend(user_id, friend_id, friend_username):
            await message.answer(f"‚úÖ <b>–î—Ä—É–≥–∞ –¥–æ–¥–∞–Ω–æ!</b>\n\nüë§ {friend_username} —Ç–µ–ø–µ—Ä —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –¥—Ä—É–∑—ñ–≤!")
        else:
            await message.answer("‚ùå –¶–µ–π –≥—Ä–∞–≤–µ—Ü—å –≤–∂–µ —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –¥—Ä—É–∑—ñ–≤!")
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['transfer'])
async def cmd_transfer(message: types.Message):
    user_id = message.from_user.id
    ensure_player(user_id, message.from_user.username or message.from_user.full_name)
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /transfer ID_–¥—Ä—É–≥–∞ —Å—É–º–∞")
            return
        
        friend_id = int(parts[1])
        amount = int(parts[2])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if amount < 10:
            await message.answer("‚ùå –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É: 10 ‚úØ")
            return
        
        if friend_id == user_id:
            await message.answer("‚ùå –ù–µ –º–æ–∂–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≥—Ä–æ—à—ñ —Å–∞–º–æ–º—É —Å–æ–±—ñ!")
            return
        
        user_coins = get_user_coins(user_id)
        if user_coins < amount:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç! –£ –≤–∞—Å {user_coins} ‚úØ, –ø–æ—Ç—Ä—ñ–±–Ω–æ {amount} ‚úØ")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥—Ä—É–≥
        cursor.execute("SELECT friend_username FROM friends WHERE user_id = ? AND friend_id = ?", (user_id, friend_id))
        friend_data = cursor.fetchone()
        
        if not friend_data:
            await message.answer("‚ùå –¶–µ–π –≥—Ä–∞–≤–µ—Ü—å –Ω–µ —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –¥—Ä—É–∑—ñ–≤! –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ.")
            return
        
        friend_username = friend_data[0]
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–∫–∞–∑
        if transfer_money(user_id, friend_id, amount):
            commission = 0 if get_user_role(user_id) == "–ë–ê–ù–ö–Ü–†" else ceil(amount * 0.05)
            final_amount = amount - commission
            
            await message.answer(
                f"‚úÖ <b>–ü–µ—Ä–µ–∫–∞–∑ —É—Å–ø—ñ—à–Ω–∏–π!</b>\n\n"
                f"üë§ –û—Ç—Ä–∏–º—É–≤–∞—á: {friend_username}\n"
                f"üí∞ –°—É–º–∞: {amount} ‚úØ\n"
                f"üí∏ –ö–æ–º—ñ—Å—ñ—è: {commission} ‚úØ (5%)\n"
                f"üéØ –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: {final_amount} ‚úØ\n"
                f"üíé –í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ"
            )
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–∞–∑—É!")
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ========== –ê–£–ö–¶–Ü–û–ù –î–õ–Ø –í–°–Ü–• ==========

def cleanup_old_auction_items():
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –∑ –∞—É–∫—Ü—ñ–æ–Ω—É (—Å—Ç–∞—Ä—ñ—à—ñ 24 –≥–æ–¥–∏–Ω)"""
    yesterday = (datetime.now() - timedelta(hours=24)).isoformat()
    cursor.execute("DELETE FROM auction_items WHERE listed_date < ?", (yesterday,))
    conn.commit()

def add_to_auction(user_id: int, item_name: str, item_type: str, original_price: int) -> bool:
    """–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω"""
    auction_price = int(original_price * 0.9)  # –ó–Ω–∏–∂–∫–∞ 10%
    
    # –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—Å—Ç–∏–º–æ —Å—Ç–∞—Ä—ñ –ø—Ä–µ–¥–º–µ—Ç–∏
    cleanup_old_auction_items()
    
    cursor.execute(
        "INSERT INTO auction_items (user_id, item_name, item_type, original_price, auction_price, listed_date) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, item_name, item_type, original_price, auction_price, datetime.now().isoformat())
    )
    conn.commit()
    return True

@dp.callback_query_handler(lambda c: c.data == 'auction_view')
async def cb_auction_view(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø—Ä–µ–¥–º–µ—Ç–∏
    cleanup_old_auction_items()
    
    cursor.execute("""
        SELECT ai.*, p.username 
        FROM auction_items ai 
        JOIN players p ON ai.user_id = p.user_id 
        ORDER BY ai.listed_date DESC
    """)
    auction_items = cursor.fetchall()
    
    text = "‚öñÔ∏è <b>–ê—É–∫—Ü—ñ–æ–Ω</b>\n\n"
    
    if not auction_items:
        text += "‚ùå –ù–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤!\n\n"
        text += "üí° –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ —Å–≤–æ—ó –ø—Ä–µ–¥–º–µ—Ç–∏ –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è –∫–æ–º–∞–Ω–¥–æ—é <code>/sellitem ID_–ø—Ä–µ–¥–º–µ—Ç–∞</code>"
    else:
        text += f"üè∑Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ ({len(auction_items)}):</b>\n\n"
        
        for i, item in enumerate(auction_items, 1):
            item_id, seller_id, item_name, item_type, original_price, auction_price, listed_date, seller_name = item
            
            # –ö–æ–º—ñ—Å—ñ—è 4%
            commission = int(auction_price * 0.04)
            seller_gets = auction_price - commission
            
            # –ß–∞—Å —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
            list_time = datetime.fromisoformat(listed_date)
            time_ago = datetime.now() - list_time
            hours_ago = int(time_ago.total_seconds() // 3600)
            
            text += f"{i}. üéÅ {item_name}\n"
            text += f"   üí∞ –¶—ñ–Ω–∞: {auction_price} ‚úØ (–∑–Ω–∏–∂–∫–∞ 10%)\n"
            text += f"   üí∏ –ü—Ä–æ–¥–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º–∞—î: {seller_gets} ‚úØ\n"
            text += f"   üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {seller_name}\n"
            text += f"   ‚è∞ –†–æ–∑–º—ñ—â–µ–Ω–æ: {hours_ago} –≥–æ–¥. —Ç–æ–º—É\n"
            text += f"   üéØ –ö–æ–º–∞–Ω–¥–∞: <code>/buy {item_id}</code>\n\n"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üì¶ –ú—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view"))
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="auction_view"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory_view"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.message_handler(commands=['auction'])
async def cmd_auction(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞—É–∫—Ü—ñ–æ–Ω—É"""
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø—Ä–µ–¥–º–µ—Ç–∏
    cleanup_old_auction_items()
    
    cursor.execute("""
        SELECT ai.*, p.username 
        FROM auction_items ai 
        JOIN players p ON ai.user_id = p.user_id 
        ORDER BY ai.listed_date DESC
    """)
    auction_items = cursor.fetchall()
    
    text = "‚öñÔ∏è <b>–ê—É–∫—Ü—ñ–æ–Ω</b>\n\n"
    
    if not auction_items:
        text += "‚ùå –ù–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤!\n\n"
        text += "üí° –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ —Å–≤–æ—ó –ø—Ä–µ–¥–º–µ—Ç–∏ –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è –∫–æ–º–∞–Ω–¥–æ—é <code>/sellitem ID_–ø—Ä–µ–¥–º–µ—Ç–∞</code>"
    else:
        text += f"üè∑Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ ({len(auction_items)}):</b>\n\n"
        
        for i, item in enumerate(auction_items, 1):
            item_id, seller_id, item_name, item_type, original_price, auction_price, listed_date, seller_name = item
            
            # –ö–æ–º—ñ—Å—ñ—è 4%
            commission = int(auction_price * 0.04)
            seller_gets = auction_price - commission
            
            # –ß–∞—Å —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
            list_time = datetime.fromisoformat(listed_date)
            time_ago = datetime.now() - list_time
            hours_ago = int(time_ago.total_seconds() // 3600)
            
            text += f"{i}. üéÅ {item_name}\n"
            text += f"   üí∞ –¶—ñ–Ω–∞: {auction_price} ‚úØ (–∑–Ω–∏–∂–∫–∞ 10%)\n"
            text += f"   üí∏ –ü—Ä–æ–¥–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º–∞—î: {seller_gets} ‚úØ\n"
            text += f"   üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {seller_name}\n"
            text += f"   ‚è∞ –†–æ–∑–º—ñ—â–µ–Ω–æ: {hours_ago} –≥–æ–¥. —Ç–æ–º—É\n"
            text += f"   üéØ –ö–æ–º–∞–Ω–¥–∞: <code>/buy {item_id}</code>\n\n"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üì¶ –ú—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view"))
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="auction_view"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory_view"))
    
    await message.answer(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'auction_view')
async def cb_auction_view(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø—Ä–µ–¥–º–µ—Ç–∏
    cleanup_old_auction_items()
    
    cursor.execute("""
        SELECT ai.*, p.username 
        FROM auction_items ai 
        JOIN players p ON ai.user_id = p.user_id 
        ORDER BY ai.listed_date DESC
    """)
    auction_items = cursor.fetchall()
    
    text = "‚öñÔ∏è <b>–ê—É–∫—Ü—ñ–æ–Ω</b>\n\n"
    
    if not auction_items:
        text += "‚ùå –ù–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤!\n\n"
        text += "üí° –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ —Å–≤–æ—ó –ø—Ä–µ–¥–º–µ—Ç–∏ –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è –∫–æ–º–∞–Ω–¥–æ—é <code>/sellitem ID_–ø—Ä–µ–¥–º–µ—Ç–∞</code>"
    else:
        text += f"üè∑Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ ({len(auction_items)}):</b>\n\n"
        
        for i, item in enumerate(auction_items, 1):
            item_id, seller_id, item_name, item_type, original_price, auction_price, listed_date, seller_name = item
            
            # –ö–æ–º—ñ—Å—ñ—è 4%
            commission = int(auction_price * 0.04)
            seller_gets = auction_price - commission
            
            # –ß–∞—Å —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
            list_time = datetime.fromisoformat(listed_date)
            time_ago = datetime.now() - list_time
            hours_ago = int(time_ago.total_seconds() // 3600)
            
            text += f"{i}. üéÅ {item_name}\n"
            text += f"   üí∞ –¶—ñ–Ω–∞: {auction_price} ‚úØ (–∑–Ω–∏–∂–∫–∞ 10%)\n"
            text += f"   üí∏ –ü—Ä–æ–¥–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º–∞—î: {seller_gets} ‚úØ\n"
            text += f"   üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {seller_name}\n"
            text += f"   ‚è∞ –†–æ–∑–º—ñ—â–µ–Ω–æ: {hours_ago} –≥–æ–¥. —Ç–æ–º—É\n"
            text += f"   üéØ –ö–æ–º–∞–Ω–¥–∞: <code>/buy {item_id}</code>\n\n"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üì¶ –ú—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_view"))
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="auction_view"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="inventory_view"))
    
    await call.message.edit_text(text, reply_markup=kb)

@dp.message_handler(commands=['buy'])
async def cmd_buy(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ –∞—É–∫—Ü—ñ–æ–Ω—É"""
    user_id = message.from_user.id
    ensure_player(user_id, message.from_user.username or message.from_user.full_name)
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(
                "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "üìù <b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b>\n"
                "<code>/buy ID_–ø—Ä–µ–¥–º–µ—Ç–∞</code>\n\n"
                "üìù <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
                "<code>/buy 1</code> - –∫—É–ø–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∑ ID 1\n\n"
                "üí° <b>ID –ø—Ä–µ–¥–º–µ—Ç–∞</b> –º–æ–∂–Ω–∞ –ø–æ–±–∞—á–∏—Ç–∏ –≤ –∞—É–∫—Ü—ñ–æ–Ω—ñ"
            )
            return
        
        item_id = int(parts[1])
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ
        cursor.execute("SELECT * FROM auction_items WHERE id = ?", (item_id,))
        item = cursor.fetchone()
        
        if not item:
            await message.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ!")
            return
        
        auction_id, seller_id, item_name, item_type, original_price, auction_price, listed_date = item
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∫—É–ø—É—î–º–æ —É —Å–µ–±–µ
        if seller_id == user_id:
            await message.answer("‚ùå –ù–µ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ —Å–≤—ñ–π –∂–µ –ø—Ä–µ–¥–º–µ—Ç!")
            return
        
        buyer_coins = get_user_coins(user_id)
        
        if buyer_coins < auction_price:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ {auction_price} ‚úØ, —É –≤–∞—Å {buyer_coins} ‚úØ")
            return
        
        # –ö–æ–º—ñ—Å—ñ—è 4%
        commission = int(auction_price * 0.04)
        seller_gets = auction_price - commission
        
        # –í–∏–∫–æ–Ω—É—î–º–æ —É–≥–æ–¥—É
        cursor.execute("UPDATE players SET coins = coins - ? WHERE user_id = ?", (auction_price, user_id))
        cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (seller_gets, seller_id))
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–º—ñ—Å—ñ—é –¥–æ –±–∞–Ω–∫—ñ—Ä–∞
        cursor.execute("SELECT user_id FROM players WHERE role = '–ë–ê–ù–ö–Ü–†'")
        banker = cursor.fetchone()
        if banker:
            banker_id = banker[0]
            cursor.execute("UPDATE players SET coins = coins + ? WHERE user_id = ?", (commission, banker_id))
            cursor.execute(
                "INSERT INTO bank_income (user_id, total_commission) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET total_commission = total_commission + ?",
                (banker_id, commission, commission)
            )
        
        # –î–æ–¥–∞—î–º–æ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–∫—É–ø—Ü—é
        add_to_inventory(user_id, item_name, original_price, item_type)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞—É–∫—Ü—ñ–æ–Ω—É
        cursor.execute("DELETE FROM auction_items WHERE id = ?", (auction_id,))
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–º–µ–Ω–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        cursor.execute("SELECT username FROM players WHERE user_id = ?", (seller_id,))
        seller_name = cursor.fetchone()[0]
        
        conn.commit()
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø–æ–∫—É–ø—Ü—è
        await message.answer(
            f"‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø—ñ—à–Ω–∞!</b>\n\n"
            f"üéÅ –ü—Ä–µ–¥–º–µ—Ç: {item_name}\n"
            f"üí∞ –¶—ñ–Ω–∞: {auction_price} ‚úØ\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {seller_name}\n"
            f"üíé –í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(user_id)} ‚úØ\n\n"
            f"üéâ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è!"
        )
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ–¥–∞–≤—Ü—è
        try:
            await bot.send_message(
                seller_id,
                f"üí∞ <b>–í–∞—à –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω–æ!</b>\n\n"
                f"üéÅ –ü—Ä–µ–¥–º–µ—Ç: {item_name}\n"
                f"üíµ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: {original_price} ‚úØ\n"
                f"üõí –ü—Ä–æ–¥–∞–Ω–æ –∑–∞: {auction_price} ‚úØ\n"
                f"üí∏ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏: {seller_gets} ‚úØ\n"
                f"üë§ –ü–æ–∫—É–ø–µ—Ü—å: {message.from_user.username or message.from_user.full_name}\n"
                f"üíé –í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_user_coins(seller_id)} ‚úØ"
            )
        except:
            pass  # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–≤—Ü—é
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['sellitem'])
async def cmd_sellitem(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω"""
    user_id = message.from_user.id
    ensure_player(user_id, message.from_user.username or message.from_user.full_name)
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(
                "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "üìù <b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b>\n"
                "<code>/sellitem ID_–ø—Ä–µ–¥–º–µ—Ç–∞</code>\n\n"
                "üìù <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
                "<code>/sellitem 22</code> - –ø—Ä–æ–¥–∞—Ç–∏ –∞–ª–º–∞–∑\n\n"
                "üí° <b>ID –ø—Ä–µ–¥–º–µ—Ç–∞</b> –º–æ–∂–Ω–∞ –ø–æ–±–∞—á–∏—Ç–∏ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ"
            )
            return
        
        item_id = int(parts[1])
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–º–µ—Ç –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ
        items = get_user_inventory(user_id)
        item_to_sell = None
        
        for item in items:
            for prize in ItemRoulettePrizes.PRIZES:
                if prize["id"] == item_id and prize["name"] == item["name"]:
                    item_to_sell = (item["name"], prize["price"], prize["type"])
                    break
            if item_to_sell:
                break
        
        if not item_to_sell:
            await message.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–æ–º—É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ!")
            return
        
        item_name, original_price, item_type = item_to_sell
        auction_price = int(original_price * 0.9)  # 90% –≤—ñ–¥ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏
        
        # –î–æ–¥–∞—î–º–æ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω
        if add_to_auction(user_id, item_name, item_type, original_price):
            # –í–∏–¥–∞–ª—è—î–º–æ –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
            remove_from_inventory(user_id, item_name)
            
            await message.answer(
                f"‚úÖ <b>–ü—Ä–µ–¥–º–µ—Ç –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω!</b>\n\n"
                f"üéÅ –ü—Ä–µ–¥–º–µ—Ç: {item_name}\n"
                f"üí∞ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: {original_price} ‚úØ\n"
                f"üõí –¶—ñ–Ω–∞ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ: {auction_price} ‚úØ\n"
                f"üí∏ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ: {int(auction_price * 0.96)} ‚úØ\n\n"
                f"üìä <b>–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:</b>\n"
                f"‚Ä¢ –ó–Ω–∏–∂–∫–∞ 10%: -{int(original_price * 0.1)} ‚úØ\n"
                f"‚Ä¢ –ö–æ–º—ñ—Å—ñ—è 4%: -{int(auction_price * 0.04)} ‚úØ\n\n"
                f"‚öñÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞—É–∫—Ü—ñ–æ–Ω: /auction\n"
                f"üí° –ü—Ä–µ–¥–º–µ—Ç –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏"
            )
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω!")
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

#AUTO-DELETE
# ========== –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –í–ò–î–ê–õ–ï–ù–ù–Ø ==========

async def delete_message_with_delay(chat_id: int, message_id: int, delay: int = 20):
    """–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∑–∞—Ç—Ä–∏–º–∫—É"""
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–æ—â–æ)
        pass

async def send_message_with_auto_delete(chat_id: int, text: str, reply_markup=None, delay: int = 20):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º"""
    message = await bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode="HTML")
    asyncio.create_task(delete_message_with_delay(chat_id, message.message_id, delay))
    return message

async def edit_message_with_auto_delete(call: types.CallbackQuery, text: str, reply_markup=None, delay: int = 20):
    """–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º"""
    await call.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    asyncio.create_task(delete_message_with_delay(call.message.chat.id, call.message.message_id, delay))

async def auto_delete_old_messages():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—Ç–∏ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞"""
    while True:
        try:
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –ø–æ—à—É–∫—É —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            await asyncio.sleep(300)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ auto_delete_old_messages: {e}")
            await asyncio.sleep(60)
#000000000
async def cleanup_old_pending_sales():
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ (—Å—Ç–∞—Ä—ñ—à—ñ 7 –¥–Ω—ñ–≤)"""
    week_ago = (datetime.now() - timedelta(days=7)).isoformat()
    cursor.execute("DELETE FROM pending_sales WHERE created_date < ?", (week_ago,))
    conn.commit()

# –î–æ–¥–∞–π —Ü–µ–π –≤–∏–∫–ª–∏–∫ –¥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–æ—Ö–æ–¥—ñ–≤ –∞–±–æ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def background_tasks():
    """–§–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ"""
    while True:
        try:
            await cleanup_old_pending_sales()
            await asyncio.sleep(3600)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ background_tasks: {e}")
            await asyncio.sleep(300)

# ========== –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ê –°–ò–°–¢–ï–ú–ê –î–û–•–û–î–Ü–í ==========

def get_last_income_time(user_id: int) -> Optional[datetime]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É"""
    cursor.execute("SELECT last_income_time FROM players WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result and result[0]:
        return datetime.fromisoformat(result[0])
    return None

def calculate_passive_income(user_id: int) -> int:
    """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø–∞—Å–∏–≤–Ω–∏–π –¥–æ—Ö—ñ–¥ –∑–∞ 6 –≥–æ–¥–∏–Ω"""
    farm_income = get_user_farm_income(user_id)
    estate_income = get_user_real_estate_income(user_id)
    
    role = get_user_role(user_id)
    if role == "–ë–ê–ù–ö–Ü–†":
        estate_income += 25
    
    # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—É —Å–∞–º—É —Å—É–º—É, —â–æ –±—É–ª–∞ –∑–∞ –≥–æ–¥–∏–Ω—É
    total_income = farm_income + estate_income
    return total_income

def update_income_for_user(user_id: int):
    """–û–Ω–æ–≤–∏—Ç–∏ –¥–æ—Ö—ñ–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è (—Ç–µ–ø–µ—Ä –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω)"""
    last_income_time = get_last_income_time(user_id)
    if not last_income_time:
        cursor.execute("UPDATE players SET last_income_time = ? WHERE user_id = ?", 
                       (datetime.now().isoformat(), user_id))
        conn.commit()
        return
    
    current_time = datetime.now()
    time_diff = current_time - last_income_time
    hours_passed = time_diff.total_seconds() / 3600
    
    # –ó–º—ñ–Ω—é—î–º–æ –∑ 1 –≥–æ–¥–∏–Ω–∏ –Ω–∞ 6 –≥–æ–¥–∏–Ω
    if hours_passed >= 6:
        income_per_6_hours = calculate_passive_income(user_id)
        full_periods = int(hours_passed // 6)
        total_income = income_per_6_hours * full_periods
        
        if total_income > 0:
            add_user_coins(user_id, total_income)
            new_income_time = last_income_time + timedelta(hours=6 * full_periods)
            cursor.execute("UPDATE players SET last_income_time = ? WHERE user_id = ?", 
                           (new_income_time.isoformat(), user_id))
            conn.commit()
            print(f"üíµ –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {total_income} ‚úØ –≥—Ä–∞–≤—Ü—é {user_id} –∑–∞ {full_periods * 6} –≥–æ–¥.")

async def update_all_incomes():
    """–û–Ω–æ–≤–∏—Ç–∏ –¥–æ—Ö–æ–¥–∏ –¥–ª—è –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤"""
    try:
        cursor.execute("SELECT user_id FROM players")
        all_players = cursor.fetchall()
        
        updated_count = 0
        for (user_id,) in all_players:
            update_income_for_user(user_id)
            updated_count += 1
            
        print(f"‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –¥–æ—Ö–æ–¥–∏ –¥–ª—è {updated_count} –≥—Ä–∞–≤—Ü—ñ–≤")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Ö–æ–¥—ñ–≤: {e}")

async def income_scheduler():
    """–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—ñ–≤ (—Ç–µ–ø–µ—Ä –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω)"""
    while True:
        try:
            await update_all_incomes()
            await asyncio.sleep(6 * 3600)  # 6 –≥–æ–¥–∏–Ω –∑–∞–º—ñ—Å—Ç—å 1
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫—É –¥–æ—Ö–æ–¥—ñ–≤: {e}")
            await asyncio.sleep(300)

async def background_tasks():
    """–§–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ"""
    while True:
        try:
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ–¥–∞–∂—ñ–≤
            week_ago = (datetime.now() - timedelta(days=7)).isoformat()
            cursor.execute("DELETE FROM pending_sales WHERE created_date < ?", (week_ago,))
            conn.commit()
            
            await asyncio.sleep(3600)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ background_tasks: {e}")
            await asyncio.sleep(300)

# ========== –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–†–£–ö–¢–£–†–ò –ë–ê–ó–ò ========== –ë–î
#====---- pass ----======
# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ–ª–æ–Ω–∫–∞ has_passport
if 'has_passport' not in player_columns:
    print("üîÑ –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É has_passport –¥–æ —Ç–∞–±–ª–∏—Ü—ñ players...")
    cursor.execute("ALTER TABLE players ADD COLUMN has_passport BOOLEAN DEFAULT FALSE")
    conn.commit()
    print("‚úÖ –ö–æ–ª–æ–Ω–∫—É has_passport –¥–æ–¥–∞–Ω–æ!")

# –î–æ–¥–∞–º–æ –≤ —Å–µ–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ë–î
if 'has_passport' not in player_columns:
    cursor.execute("ALTER TABLE players ADD COLUMN has_passport BOOLEAN DEFAULT FALSE")
# –î–æ–¥–∞—î–º–æ –≤ —Å–µ–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ë–î
try:
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ–ª–æ–Ω–∫–∞ item_type –≤ user_inventory
    cursor.execute("PRAGMA table_info(user_inventory)")
    inventory_columns = [column[1] for column in cursor.fetchall()]
    
    if 'item_type' not in inventory_columns:
        print("üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ user_inventory –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –º–∞—à–∏–Ω...")
        # –¢—É—Ç –≤–∂–µ —î –ª–æ–≥—ñ–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")


try:
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ–ª–æ–Ω–∫–∞ last_income_time
    cursor.execute("PRAGMA table_info(players)")
    player_columns = [column[1] for column in cursor.fetchall()]

    if 'last_income_time' not in player_columns:
        print("üîÑ –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É last_income_time –¥–æ —Ç–∞–±–ª–∏—Ü—ñ players...")
        cursor.execute("ALTER TABLE players ADD COLUMN last_income_time TEXT")
        conn.commit()
        print("‚úÖ –ö–æ–ª–æ–Ω–∫—É last_income_time –¥–æ–¥–∞–Ω–æ!")
        
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")
        
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")


#DELAUCH-ADMIN
# ========== –ê–î–ú–Ü–ù-–ö–û–ú–ê–ù–î–ê –î–õ–Ø –û–ß–ò–©–ï–ù–ù–Ø –ê–£–ö–¶–Ü–û–ù–£ ==========

@dp.message_handler(commands=['clearauction'])
async def cmd_clearauction(message: types.Message):
    """–û—á–∏—Å—Ç–∏—Ç–∏ –≤–µ—Å—å –∞—É–∫—Ü—ñ–æ–Ω (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
        cursor.execute("SELECT COUNT(*) FROM auction_items")
        items_count = cursor.fetchone()[0]
        
        if items_count == 0:
            await message.answer("‚ÑπÔ∏è –ù–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ –≤–∂–µ –Ω–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤!")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–µ–¥–º–µ—Ç–∏ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        cursor.execute("""
            SELECT ai.item_name, p.username 
            FROM auction_items ai 
            JOIN players p ON ai.user_id = p.user_id
        """)
        items_info = cursor.fetchall()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏
        cursor.execute("DELETE FROM auction_items")
        conn.commit()
        
        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
        items_list = ""
        for i, (item_name, seller_name) in enumerate(items_info[:10], 1):  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 10 –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
            items_list += f"{i}. {item_name} (–≤—ñ–¥ {seller_name})\n"
        
        if len(items_info) > 10:
            items_list += f"... —ñ —â–µ {len(items_info) - 10} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤\n"
        
        await message.answer(
            f"üßπ <b>–ê—É–∫—Ü—ñ–æ–Ω –æ—á–∏—â–µ–Ω–æ!</b>\n\n"
            f"üìä <b>–í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤:</b> {items_count}\n\n"
            f"üì¶ <b>–í–∏–¥–∞–ª–µ–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏:</b>\n{items_list}\n"
            f"‚ö° –í—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ –∞—É–∫—Ü—ñ–æ–Ω—É!"
        )
        
        # –õ–æ–≥—É—î–º–æ –¥—ñ—é
        log.info(f"üëë –ê–¥–º—ñ–Ω {message.from_user.id} –æ—á–∏—Å—Ç–∏–≤ –∞—É–∫—Ü—ñ–æ–Ω ({items_count} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤)")
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∞—É–∫—Ü—ñ–æ–Ω—É: {e}")
        log.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∞—É–∫—Ü—ñ–æ–Ω—É: {e}")
#^^0000^^

import os

QUESTIONS_PATH = "questions.json"

# –î–æ–¥–∞–π —Ü—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –ø–æ—á–∞—Ç–∫—É
print(f"üìÅ –ü–æ—Ç–æ—á–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥: {os.getcwd()}")
print(f"üìÅ –§–∞–π–ª –ø–∏—Ç–∞–Ω—å: {QUESTIONS_PATH}")
print(f"üìÅ –§–∞–π–ª —ñ—Å–Ω—É—î: {os.path.exists(QUESTIONS_PATH)}")

if os.path.exists(QUESTIONS_PATH):
    print(f"üìÅ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É: {oct(os.stat(QUESTIONS_PATH).st_mode)[-3:]}")
    
#=============================================== USER LIST ADMIN
@dp.message_handler(commands=['us'])
async def cmd_us(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    cursor.execute("SELECT user_id, username, level, coins FROM players ORDER BY coins DESC")
    users = cursor.fetchall()
    
    text = f"üë• <b>–í—Å—ñ –≥—Ä–∞–≤—Ü—ñ ({len(users)}):</b>\n\n"
    
    for user_id, username, level, coins in users:
        username = username or f"User{user_id}"
        text += f"üë§ {username}\nüÜî {user_id} | üéØ {level} | üí∞ {coins} ‚úØ\n\n"
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_us"))
    
    await message.answer(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'refresh_us')
async def cb_refresh_us(call: types.CallbackQuery):
    """–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤"""
    if not is_admin(call.from_user.id):
        return
    
    await cmd_us(call.message)
    await call.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ!")

        # ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä—É–ª–µ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    cursor.execute("SELECT COUNT(*) FROM item_roulette_prizes")
    if cursor.fetchone()[0] == 0:
        for prize in ItemRoulettePrizes.PRIZES:
            cursor.execute(
                "INSERT INTO item_roulette_prizes (name, price, probability, item_type) VALUES (?, ?, ?, ?)",
                (prize["name"], prize["price"], prize["probability"], prize["type"])
            )
        conn.commit()    
    # ... —Ä–µ—à—Ç–∞ –∫–æ–¥—É –∑–∞–ø—É—Å–∫—É
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    log.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    log.info(f"üëë –ê–¥–º—ñ–Ω ID: {ADMIN_ID}")
    log.info("üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Ö–æ–¥—ñ–≤ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ
        asyncio.create_task(income_scheduler())
        asyncio.create_task(background_tasks())
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        await dp.start_polling()
        
    except Exception as e:
        log.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        log.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        conn.close()
